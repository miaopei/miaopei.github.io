<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Miaow Blog</title>
  
  <subtitle>Do what you say, say what you do.</subtitle>
  <link href="http://miaopei.github.io/atom.xml" rel="self"/>
  
  <link href="http://miaopei.github.io/"/>
  <updated>2024-06-11T05:20:24.516Z</updated>
  <id>http://miaopei.github.io/</id>
  
  <author>
    <name>Mr.Miaow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sysrepo note</title>
    <link href="http://miaopei.github.io/2020/09/23/Netconf/sysrepo-note/"/>
    <id>http://miaopei.github.io/2020/09/23/Netconf/sysrepo-note/</id>
    <published>2020-09-23T11:50:28.000Z</published>
    <updated>2024-06-11T05:20:24.516Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sysrepo"><a href="#sysrepo" class="headerlink" title="sysrepo"></a>sysrepo</h1><blockquote><p>sysrepo - 1.4.2 笔记</p></blockquote><h2 id="1-sysrepo-概述"><a href="#1-sysrepo-概述" class="headerlink" title="1. sysrepo 概述"></a>1. sysrepo 概述</h2><p><code>Sysrepo</code> 是 <code>Linux/Unix</code> 系统下一个基于 <code>YANG</code> 模型的配置和操作数据库，为应用程序提供统一的操作数据的接口。应用程序使用 <code>YANG</code> 模型来建模，通过利用 <code>YANG</code> 模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件的一种数据管理方式。</p><span id="more"></span><h3 id="1-1-基本特性与原则"><a href="#1-1-基本特性与原则" class="headerlink" title="1.1 基本特性与原则"></a>1.1 基本特性与原则</h3><ul><li><code>sysrepo</code> 只是一个库，不是一个独立的进程</li><li>全部的数据始终由 <code>Yang</code> 模型区分，这就可能造成许多严重的后果，例如，允许同时使用不同的模型进行工作，这将可 导致数据访问时异常。</li><li>在所有有 <code>IPC</code> 中使用共享内存的方式，取代了之前的 UNIX中进程间通信的方式，这样更高效，性能更优，扩展性更强</li><li>在 <code>sysrepo</code> 中几乎不存在 CPU 时间浪费，没有活动等待或者定期检查</li><li>完全可定制化的事件处理，从定期检查或者 <code>poll/select</code> 到自动线程处理</li><li>访问控制严格受制于文件系统的权限</li><li><code>sysrepo</code> 操作期间可以修改 <code>Yang</code> 模型</li></ul><h3 id="1-2-主要特点"><a href="#1-2-主要特点" class="headerlink" title="1.2 主要特点"></a>1.2 主要特点</h3><ul><li><code>sysrepo</code> 的主要功能是使用 <code>YANG</code> 模型对数据进行操作并订阅各种事件。但是，在执行任何操作时，都需要创建会话，连接会话，并要 <code>install</code> 所支持的各类 <code>Yang</code> 模型。假如设置了日志操作记录，<code>sysrepo</code> 在运行时，也可以保留它的行为记录。</li><li>通过 <code>Yang</code> 的 <code>xpath</code> 来修改与获取数据，所以要求了解 <code>xpath</code> 的基础知识。</li><li>最常见的操作订阅事件和修改订阅事件，订阅事件是允许应用程序根据特定的事件回调相应的数据执行，更改操作。操作执行成功后，会将对应配置操作保存，这样 <code>sysrepo</code> 可以充当更智能的配置文件，从而保证配置的可恢复性。</li><li>也支持 <code>Rpc/Action/Notify</code> 的订阅，这样可以通过执行特别的 <code>Rpc</code> ，就可以分别向其他 <code>sysrepo</code> 客户端通知各种生成的事件。</li></ul><h3 id="1-3-访问方法"><a href="#1-3-访问方法" class="headerlink" title="1.3 访问方法"></a>1.3 访问方法</h3><p>应用程序可以通过两种方法来访问 <code>sysrepo</code>，一种是直接的方法，即当应用程序需要配置数据或者执行相应的 <code>callback</code> 来响应配置变化时，可以通过 <code>sysrepo</code> 自带的应用程序来触发用 <code>sysrepo</code> 的功能函数来实现。这种方法一般用于开发人员自测或验证某个模块时使用；另一种是间接的方法，即应用程序通过创建 <code>Deamon</code> 进程的方法，该方法是通过将对 <code>sysrepo</code> 的调用转化为对应用程序的特定操作，该方法也最容易扩展，也无需为了使用 <code>sysrepo</code> 数据库而做相应的更改。如果有多个类似的 <code>Deamon</code> 进程，可以将这些进程合成一个 <code>plugind</code>，最后由一个进程统一纳管。可扩展性得到大大的提高。间接方法的使用如图所示：</p><img data-src="/2020/09/23/Netconf/sysrepo-note/sr_apps.png" class="" title="sr_apps"><h3 id="1-4-数据库"><a href="#1-4-数据库" class="headerlink" title="1.4 数据库"></a>1.4 数据库</h3><p>数据库结构大多是遵循 <code>NMDA</code>（网络管理数据存储区体）所定义的体系架构。<code>sysrepo</code> 同样也不例外，<code>sysrepo</code> 中定义了四类数据库，分别是 <code>startup</code>，<code>running</code>，<code>candidate</code> 和 <code>operational</code>。</p><ol><li><code>startup</code> 库，是 <code>sysrepo</code> 中唯一的持久性数据存储库，它包含设备启动时的配置文件，系统启动后创建的第一个 <code>sysrepo</code> 连接（共享内存）时，会将配置文件从 <code>startup</code> 库 <code>copy</code> 到 <code>running</code> 库；</li><li><code>running</code> 数据库，是保存当前所运行时系统配置，当一个配置发生变化时并且设备需要重新配置时， <code>running</code> 数据库需要修改。系统重启时不会存在，如果需要，可以将配置 <code>copy</code> 到 <code>startup</code> 库。</li><li><code>candidate</code> 数据库，候选库，顾名思义，它是一个准备配置的数据但又不影响实际设备使用。虽然该库中的数据不限制设备的正常使用，可以不必严格按照 NETCONF协议的定义，但也是需要遵循一般的数据存储规则。该库正常是无效的，实际使用时，需要将该库 <code>mirror</code> 到 <code>running</code>，由 <code>running</code> 完成修改和配置下发，最后通过 <code>sr_copy_config()</code>, 将 <code>candidate</code> 库重置。整个会话的过程中可能需要相应的 <code>lock</code> 操作，来保证操作的一致与完整性。</li><li><code>operational</code> 库，维护当前使用的配置，并且该库只可读。它通常与对应的 <code>running</code> 库有所不同，而且，只包含任何状态数据结点。在默认的情况下，该库是空的，对于用户来说，全部的订阅数据和操作数据都存储于 <code>operational</code> 库中。并且 <code>Notificationg RPC/Action</code> 数据的校验都是在 <code>operational</code> 库是完成。</li></ol><h3 id="1-5-运行模式"><a href="#1-5-运行模式" class="headerlink" title="1.5 运行模式"></a>1.5 运行模式</h3><ul><li>对于连接与会话来说，会话是不同步的，所以不会在多个线程中共享一个会话。每个线程都需要建立属于自己的会话，来确保本线程运行的正确。</li><li>对于订阅来说，可以由应用程序对感兴趣的事件通过 <code>*_subscribe()</code> 函数来做相应的订阅。订阅在原则上是将全部的的事件一并处理，应用程序也可以将根据不同的事件类型拆分成多个不同的订阅，用于保证事件的并发处理。</li><li>每个订阅可以由不同的方式处理，这个由 <code>sysrepo</code> 做统一管理。<code>sysrepo</code> 创建一个单独的线程来捕获各种订阅事件的发生，然后通过订阅所注册的回调函数不处理它们。</li></ul><h2 id="2-sysrepo-常用操作命令"><a href="#2-sysrepo-常用操作命令" class="headerlink" title="2. sysrepo 常用操作命令"></a>2. sysrepo 常用操作命令</h2><p><code>sysrepo</code> 提供两个独立的，非常实用的程序。方便开发者便捷地使用 <code>sysrepo</code> 来开发与调试自己的应用。</p><h3 id="2-1-Sysrepoctl"><a href="#2-1-Sysrepoctl" class="headerlink" title="2.1 Sysrepoctl"></a>2.1 Sysrepoctl</h3><p><code>sysrepoctl</code>，它用于列出，安装，卸载或更新 <code>sysrepo</code> 模块，也能用于修改一个 <code>sysrepo</code> 模块的特性，权限等。开发过程中经常使用的命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出全部已经安装在 sysrepo 中的 Yang 模块，并包含模块的基本信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -l, --list</span>     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -l</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定 Yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -i， --install</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以默认权限安装 ietf-interfaces.yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为特定 admin 用户安装可访问权限为 644 的 ietf-interfaces.yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang --owner=admin:admin --permissions=644</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载已安装的 Yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -u, --uninstall</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --uninstall ietf-interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 Yang 模型，常用的是设置模型支持的特性</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -c, --chang</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --(<span class="built_in">disable</span>|<span class="built_in">enable</span>)-feature if-mib</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 Yang 模型，如果已安装的 Yang 模型有更新，可以执行该命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -U, --update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --update /root/ietf-netconf@2013-09-29.yang</span></span><br></pre></td></tr></table></figure><p>更多 <code>sysrepoctl</code> 的使用，请参考 <code>sysrepoctl -h</code>。</p><h3 id="2-2-sysrepocfg"><a href="#2-2-sysrepocfg" class="headerlink" title="2.2 sysrepocfg"></a>2.2 sysrepocfg</h3><p><code>sysrepocfg</code> 是用于 <code>importing</code>，<code>exporting</code>，<code>editing</code>，<code>replacing</code> 配置到指定的数据库中。命令默认是操作 <code>running</code> 库，也支持多种数据格式，<code>json</code> , <code>xml</code> , <code>lyb</code> ，除非通过 <code>–format</code> 特定指出，默认的采用 <code>xml</code> 格式。常用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入一个配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -I, --import[=]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 ietf-interfaces 配置导入默认 running 下的 ietf-interfaces 模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces.xml</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 json 格式的 ietf-interfaces 配置导入 startup 的 ietf-interfaces 模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces_startup.json --datastore startup --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出一个配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -X, --<span class="built_in">export</span>[=]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 running 库 ietf-interfaces 的配置 xml 的格式导入，并以 ietf-interfaces_running.xml 名字命令配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span>=ietf-interfaces_running.xml --format xml --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑或修改配置文件，应用到指定的数据库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -E, --edit[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=candidate.xml --datastore candidate</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是修改 running 库，需要加相应的锁</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --lock</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发一个 RPC 请求，RPC 返回的结果直接输出于终端</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -R, --rpc[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p>更多 <code>sysrepocfg</code> 的使用，请参考 <code>sysrepocfg -h</code>。</p><h2 id="3-sysrepo-plugind-源码分析"><a href="#3-sysrepo-plugind-源码分析" class="headerlink" title="3. sysrepo-plugind 源码分析"></a>3. sysrepo-plugind 源码分析</h2><p>应用程序通过将对 <code>sysrepo</code> 的调用通过 <code>sysrepo</code> 提供的相应的 API接口访问方法，称为 <code>syrepo</code> 的间接访问方法。该方法是应用程序通过创建 Deamon进程，通过 <code>IPC Shm</code> 机制与 <code>sysrepo</code> 通信。可以做到对 <code>sysrepo</code> 的即插即用，最后由 <code>sysrepo</code> 纳管，这就是 <code>Plugind</code>，命名为 <code>sysrepo-plugind</code>。要快速的使用 <code>sysrepo</code>，并快速开发出适配于 <code>sysrepo</code> 的插件，就要先了解 <code>sysrepo-plugind</code> 的实现原理与机制，就需要先从实现 <code>sysrepo-plugind</code> 的源码处着手。<code>sysrepo</code> 源码路径：<code>git clone https://github.com/sysrepo/sysrepo.git</code> 。 <code>Sysrepo-plugind</code> 实现的路径为 <code>sysrepo/src/executables/sysrepo-plugind.c</code> 。下面也就从该文件开始说。</p><h3 id="3-1-数据结构"><a href="#3-1-数据结构" class="headerlink" title="3.1 数据结构"></a>3.1 数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">srpd_plugin_s</span> &#123;</span><br><span class="line">    <span class="type">void</span> *handle;</span><br><span class="line">    <span class="type">srp_init_cb_t</span> init_cb;</span><br><span class="line">    <span class="type">srp_cleanup_cb_t</span> cleanup_cb;</span><br><span class="line">    <span class="type">void</span> *private_data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*结构参数说明*/</span></span><br><span class="line">handle: 动态库句柄,在load_plugin中细说</span><br><span class="line"> </span><br><span class="line"><span class="type">srp_init_cb_t</span>:</span><br><span class="line"><span class="comment">/*Sysrepo plugin initialization callback.*/</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="type">srp_init_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> **private_data)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">srp_cleanup_cb_t</span> :</span><br><span class="line"><span class="comment">/*brief Sysrepo plugin cleanup callback.*/</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="type">srp_cleanup_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> *private_data)</span></span>;</span><br><span class="line"> </span><br><span class="line">private_data:  Private context opaque to sysrepo</span><br></pre></td></tr></table></figure><h3 id="3-2-main-函数实现"><a href="#3-2-main-函数实现" class="headerlink" title="3.2 main 函数实现"></a>3.2 main 函数实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">srpd_plugin_s</span> *plugins = <span class="literal">NULL</span>;       <span class="comment">/*plugin结构*/</span></span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn = <span class="literal">NULL</span>;                 <span class="comment">/*sysrepo连接的上下文，该结构定义于common.h.in*/</span></span><br><span class="line">    <span class="type">sr_session_ctx_t</span> *sess = <span class="literal">NULL</span>;              <span class="comment">/*sysrepo会话的上下文，该结构定义于common.h.in中*/</span></span><br><span class="line">    <span class="type">sr_log_level_t</span> log_level = SR_LL_ERR;       <span class="comment">/*输出log等级，默认是ERR*/</span></span><br><span class="line">    <span class="type">int</span> plugin_count = <span class="number">0</span>, i, r, rc = EXIT_FAILURE, opt, debug = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">option</span> options[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;help&quot;</span>,      no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;version&quot;</span>,   no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;V&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;verbosity&quot;</span>, required_argument, <span class="literal">NULL</span>, <span class="string">&#x27;v&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;debug&quot;</span>,     no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;d&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>,        <span class="number">0</span>,                 <span class="literal">NULL</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;;                                          <span class="comment">/*命令行支持的参数*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* process options */</span></span><br><span class="line">    opterr = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*整个while循环是解析命令的参数，例如，在调试时，输入“sysrepo-plugind -d -v 4” 是debug模式        </span></span><br><span class="line"><span class="comment">     *下log级别DBG级，将会打印全部的调试信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = <span class="built_in">getopt_long</span>(argc, argv, <span class="string">&quot;hVv:d&quot;</span>, options, <span class="literal">NULL</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">            <span class="built_in">version_print</span>();</span><br><span class="line">            <span class="built_in">help_print</span>();</span><br><span class="line">            rc = EXIT_SUCCESS;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">            <span class="built_in">version_print</span>();</span><br><span class="line">            rc = EXIT_SUCCESS;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;none&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_NONE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;error&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_ERR;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;warning&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_WRN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;info&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_INF;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;debug&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_DBG;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">strlen</span>(optarg) == <span class="number">1</span>) &amp;&amp; (optarg[<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span>) &amp;&amp; (optarg[<span class="number">0</span>] &lt;= <span class="string">&#x27;4&#x27;</span>)) &#123;</span><br><span class="line">                log_level = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Invalid verbosity \&quot;%s\&quot;&quot;</span>, optarg);</span><br><span class="line">                <span class="keyword">goto</span> cleanup;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            debug = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Invalid option or missing argument: -%c&quot;</span>, optopt);</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* check for additional argument */</span></span><br><span class="line">    <span class="keyword">if</span> (optind &lt; argc) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Redundant parameters&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* load plugins：将所有的pluginl加载，这是整个main第一处核心点，这关系用户开发的plugin能否正确加载*/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">load_plugins</span>(&amp;plugins, &amp;plugin_count)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* daemonize, sysrepo-plugind no longer directly logs to stderr */</span></span><br><span class="line">    <span class="built_in">daemon_init</span>(debug, log_level);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create connection (after we have forked so that our PID is correct) */</span></span><br><span class="line">    <span class="comment">/*调用sysrepo API(sr_connect)创建与sysrepo的连接，并将返回创建连接的上下发*/</span></span><br><span class="line">    <span class="keyword">if</span> ((r = <span class="built_in">sr_connect</span>(<span class="number">0</span>, &amp;conn)) != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(r, <span class="string">&quot;Failed to connect&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create session */</span></span><br><span class="line">    <span class="comment">/*调用sysrepo API(sr_session_start)创建与sysrepo running库的会话，并启动该会话*/</span></span><br><span class="line">    <span class="keyword">if</span> ((r = <span class="built_in">sr_session_start</span>(conn, SR_DS_RUNNING, &amp;sess)) != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(r, <span class="string">&quot;Failed to start new session&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*sr_connect(), sr_session_start(),是连接sysrepo基础，这两点基础实现，在后面sysrepo源码 </span></span><br><span class="line"><span class="comment">     *分析做详细说明，不在sysrepo-plugin中说明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* init plugins */</span></span><br><span class="line">    <span class="comment">/*对所有已加载的plugin通过调用init_cb注册的回调初始化，这是整个main第二处核心点，与用户是强 </span></span><br><span class="line"><span class="comment">     *相关用户开发的插件，注册，订阅，初始化都通过init_cb，否则不能将sysrepol通信连接*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plugin_count; ++i) &#123;</span><br><span class="line">        r = plugins[i].<span class="built_in">init_cb</span>(sess, &amp;plugins[i].private_data);</span><br><span class="line">        <span class="keyword">if</span> (r != SR_ERR_OK) &#123;</span><br><span class="line">            <span class="built_in">SRP_LOG_ERR</span>(<span class="string">&quot;Plugin initialization failed (%s).&quot;</span>, <span class="built_in">sr_strerror</span>(r));</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* wait for a terminating signal */</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;lock);</span><br><span class="line">    <span class="keyword">while</span> (!loop_finish) &#123;</span><br><span class="line">        <span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;lock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;lock);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* cleanup plugins */</span></span><br><span class="line">    <span class="comment">/* sysrepo-plugindf正常结束后，回收plugin初始化时分配的资源*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plugin_count; ++i) &#123;</span><br><span class="line">        plugins[i].<span class="built_in">cleanup_cb</span>(sess, plugins[i].private_data);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* success */</span></span><br><span class="line">    rc = EXIT_SUCCESS;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*结束后，回收已分配的全部资源*/</span></span><br><span class="line">cleanup:</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plugin_count; ++i) &#123;</span><br><span class="line">        <span class="built_in">dlclose</span>(plugins[i].handle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(plugins);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">sr_disconnect</span>(conn);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-load-plugins"><a href="#3-3-load-plugins" class="headerlink" title="3.3 load_plugins"></a>3.3 load_plugins</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">load_plugins</span><span class="params">(<span class="keyword">struct</span> srpd_plugin_s **plugins, <span class="type">int</span> *plugin_count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span> *mem, *handle;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dirent</span> *ent;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *plugins_dir;</span><br><span class="line">    <span class="type">char</span> *path;</span><br><span class="line">    <span class="type">int</span> rc = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    *plugins = <span class="literal">NULL</span>;</span><br><span class="line">    *plugin_count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* get plugins dir from environment variable, or use default one */</span></span><br><span class="line">    <span class="comment">/* bin_common.h.in #define SRPD_PLUGINS_PATH &quot;@PLUGINS_PATH@&quot;</span></span><br><span class="line"><span class="comment">     * @PLUGINS_PATH@在CMakeList.txt中定义，在编译时也可以自定义</span></span><br><span class="line"><span class="comment">     * CMakeList.txt对其定义如下</span></span><br><span class="line"><span class="comment">     * if(NOT PLUGINS_PATH)</span></span><br><span class="line"><span class="comment">     * set(PLUGINS_PATH             </span></span><br><span class="line"><span class="comment">     *    &quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/$&#123;CMAKE_INSTALL_LIBDIR&#125;/sysrepo/plugins/&quot; CACHE PATH</span></span><br><span class="line"><span class="comment">     *   &quot;Sysrepo plugin daemon plugins path.&quot;)</span></span><br><span class="line"><span class="comment">     *   endif()</span></span><br><span class="line"><span class="comment">     *  用户不指定plugin的路径时，debian系统默认将plugin的动态库文件*.so安装 </span></span><br><span class="line"><span class="comment">     *    于/usr/lib/x86_64-linux-gnu/sysrepo/plugins/目录下，</span></span><br><span class="line"><span class="comment">     *  而Centos系统的默认安装路径为/usr/lib/sysrepo/plugins，在开发plugind时，安装路径也需要 </span></span><br><span class="line"><span class="comment">     *  指定到该路径下，否则，*.so找不到，则load不成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    plugins_dir = <span class="built_in">getenv</span>(<span class="string">&quot;SRPD_PLUGINS_PATH&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!plugins_dir) &#123;</span><br><span class="line">        plugins_dir = SRPD_PLUGINS_PATH;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create the directory if it does not exist */</span></span><br><span class="line">    <span class="comment">/* access函数，:检查调用进程是否可以对指定的文件执行某种操作， F_OK文件是否存在</span></span><br><span class="line"><span class="comment">     * 本段代码是检测SRPD_PLUGINS_PATH目录是否存在，如果不存在，调用sr_mkpath创建目录，并设置*            </span></span><br><span class="line"><span class="comment">     * 目录的访问权限000777。本段代码是安全性代码，确保指定的路径存在。对于实际开发中，是通过编 </span></span><br><span class="line"><span class="comment">     * 译是指定，不存在路径的动态库无法安装。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">access</span>(plugins_dir, F_OK) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != ENOENT) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Checking plugins dir existence failed (%s).&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sr_mkpath</span>(plugins_dir, <span class="number">00777</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Creating plugins dir \&quot;%s\&quot; failed (%s).&quot;</span>, plugins_dir, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* opendir函数，找开指定的目录文件，并返回DIR*形态的目录流，</span></span><br><span class="line"><span class="comment">     * 目录的读取与搜查也都需要此目录流 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dir = <span class="built_in">opendir</span>(plugins_dir);</span><br><span class="line">    <span class="keyword">if</span> (!dir) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Opening \&quot;%s\&quot; directory failed (%s).&quot;</span>, plugins_dir, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*readdir函数，读取目录，返回参数dir目录流的下个目录进入点</span></span><br><span class="line"><span class="comment">     * 返回的结果是struct dirent的内容*/</span></span><br><span class="line">    <span class="keyword">while</span> ((ent = <span class="built_in">readdir</span>(dir))) &#123;</span><br><span class="line">        <span class="comment">/*Linux系统中存在&quot;.&quot; &quot;..&quot;两类目录，这两类目录名结构，在实际是不需要使用，需要跳过。*/</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(ent-&gt;d_name, <span class="string">&quot;.&quot;</span>) || !<span class="built_in">strcmp</span>(ent-&gt;d_name, <span class="string">&quot;..&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* open the plugin */</span></span><br><span class="line">        <span class="comment">/*将SRPD_PLUGINS_PATH与也读取的目录文件名，组成一个完成的动态库路径，供后面操作。*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">asprintf</span>(&amp;path, <span class="string">&quot;%s/%s&quot;</span>, plugins_dir, ent-&gt;d_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;asprintf() failed (%s).&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*RTLD_LAZY:暂缓决定，等有需要时再解出符号 </span></span><br><span class="line"><span class="comment">         *以RTLD_LAZY模式打开动态库，返回一个句柄给调用进程，如果失败，则返回。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        handle = <span class="built_in">dlopen</span>(path, RTLD_LAZY);</span><br><span class="line">        <span class="keyword">if</span> (!handle) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Opening plugin \&quot;%s\&quot; failed (%s).&quot;</span>, path, <span class="built_in">dlerror</span>());</span><br><span class="line">            <span class="built_in">free</span>(path);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(path);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* allocate new plugin */</span></span><br><span class="line">        <span class="comment">/* 分配一个新的plugin空间，并将新分配的men挂载plugins结构下*/</span></span><br><span class="line">        mem = <span class="built_in">realloc</span>(*plugins, (*plugin_count + <span class="number">1</span>) * <span class="keyword">sizeof</span> **plugins);</span><br><span class="line">        <span class="keyword">if</span> (!mem) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;realloc() failed (%s).&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *plugins = mem;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* find required functions */</span></span><br><span class="line">        <span class="comment">/* plugins结构中有两个必须的回调函数，一个是init_cb,另一个是cleanup_cb</span></span><br><span class="line"><span class="comment">         * 通过 void *dlsym(void *handle, const char* symbol);，</span></span><br><span class="line"><span class="comment">         * handle是使用dlopen函数之后返回的句柄，</span></span><br><span class="line"><span class="comment">         * symbol是要求获取的函数的名称。</span></span><br><span class="line"><span class="comment">         * SRP_INIT_CB定义如下：#define SRP_INIT_CB     &quot;sr_plugin_init_cb&quot;</span></span><br><span class="line"><span class="comment">         * SRP_CLEANUP_CB定义下：#define SRP_CLEANUP_CB  &quot;sr_plugin_cleanup_cb&quot;</span></span><br><span class="line"><span class="comment">         * 此两个CB函数，也就是在开发插件中必须实现的两个入口函数，如果不存在，则加载失败。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        *(<span class="type">void</span> **)&amp;(*plugins)[*plugin_count].init_cb = <span class="built_in">dlsym</span>(handle, SRP_INIT_CB);</span><br><span class="line">        <span class="keyword">if</span> (!(*plugins)[*plugin_count].init_cb) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Failed to find function \&quot;%s\&quot; in plugin \&quot;%s\&quot;.&quot;</span>, SRP_INIT_CB, ent-&gt;d_name);</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        *(<span class="type">void</span> **)&amp;(*plugins)[*plugin_count].cleanup_cb = <span class="built_in">dlsym</span>(handle, SRP_CLEANUP_CB);</span><br><span class="line">        <span class="keyword">if</span> (!(*plugins)[*plugin_count].cleanup_cb) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Failed to find function \&quot;%s\&quot; in plugin \&quot;%s\&quot;.&quot;</span>, SRP_CLEANUP_CB, ent-&gt;d_name);</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* finally store the plugin */</span></span><br><span class="line">        <span class="comment">/*最后，本次so解析成功，保存本次so的解析结果，执行一下次目录文件的读取*/</span></span><br><span class="line">        (*plugins)[*plugin_count].handle = handle;</span><br><span class="line">        (*plugins)[*plugin_count].private_data = <span class="literal">NULL</span>;</span><br><span class="line">        ++(*plugin_count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*目录文件读取结束，关闭目录读取流，返回的参考中有插件结构plugins。*/</span></span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-init-cb"><a href="#3-4-init-cb" class="headerlink" title="3.4 init_cb"></a>3.4 init_cb</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// srpd_plugin_s 结构中定义了 init 的回调函数</span></span><br><span class="line"><span class="comment">// 如下：</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="type">srp_init_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> **private_data)</span></span>;</span><br><span class="line"><span class="comment">// 在 load plugin 时，</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRP_INIT_CB     <span class="string">&quot;sr_plugin_init_cb&quot;</span></span></span><br><span class="line">init_cb = <span class="built_in">dlsym</span>(handle, SRP_INIT_CB);</span><br><span class="line"><span class="comment">// 在 sysrepo-plugind 的 main 实现时，需要对 plugin 的初始化，实际就是需要用户对sr_plugin_init_cb() 实现，是完成该 plugin 的资源分配，用户感兴趣的事情做订阅，Ｍodule change RPC/Action, Notify, get——items 等操作，均在此处完成。有如下例子，请参考。</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sr_plugin_init_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> **private_ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">plugind_ctx</span> *ctx;</span><br><span class="line">    ctx = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span> *ctx);</span><br><span class="line">    <span class="keyword">if</span> (!ctx) </span><br><span class="line">    &#123;</span><br><span class="line">        rc = SR_ERR_NOMEM;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*在下面初始与之有关的操作，例如，本地数据结构的初始化，sysrepo的订阅初始化*/</span></span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">SRP_LOG_DBGMSG</span>(<span class="string">&quot;plugin initialized successfully.&quot;</span>);</span><br><span class="line">    ctx-&gt;session = session;</span><br><span class="line">    *private_ctx = ctx;</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line"> </span><br><span class="line">error:</span><br><span class="line">    <span class="built_in">SRP_LOG_ERR</span>(<span class="string">&quot;plugin initialization failed (%s).&quot;</span>, <span class="built_in">sr_strerror</span>(rc));</span><br><span class="line">    <span class="built_in">sr_unsubscribe</span>(ctx-&gt;subscription);</span><br><span class="line">    <span class="built_in">free</span>(ctx);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-cleanup-cb"><a href="#3-5-cleanup-cb" class="headerlink" title="3.5 cleanup_cb"></a>3.5 cleanup_cb</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// srpd_plugin_s 结构中定义了 cleanup 的回调函数</span></span><br><span class="line"><span class="comment">// 如下：</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="type">srp_cleanup_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> *private_data)</span></span>;</span><br><span class="line"><span class="comment">// 在 load plugin 时，</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRP_CLEANUP_CB  <span class="string">&quot;sr_plugin_cleanup_cb&quot;</span></span></span><br><span class="line">cleanup_cb = <span class="built_in">dlsym</span>(handle, SRP_CLEANUP_CB);</span><br><span class="line"><span class="comment">// 所以，对于用户来就，是需要对 sr_plugin_cleanup_cb() 实现，回收 plugin 在初始化时分配的资源。例如下面的 cleanup 实现，可以参考</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sr_plugin_cleanup_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> *private_ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="type">void</span>)session;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">plugind_ctx</span> *ctx = (<span class="keyword">struct</span> plugind_ctx *)private_ctx;</span><br><span class="line">    <span class="built_in">sr_unsubscribe</span>(ctx-&gt;subscription);</span><br><span class="line">    <span class="built_in">free</span>(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">nb_terminate</span>();</span><br><span class="line">    <span class="built_in">yang_terminate</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">SRP_LOG_DBGMSG</span>(<span class="string">&quot;plugin cleanup finished.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个 <code>sysrepo-plugind.c</code> 代码结构简单，注释丰富，没有使用复杂的语法，还是非常容易理解的。</p><h2 id="4-sysrepo-连接与会话"><a href="#4-sysrepo-连接与会话" class="headerlink" title="4. sysrepo 连接与会话"></a>4. sysrepo 连接与会话</h2><h3 id="4-1-何为连接与会话"><a href="#4-1-何为连接与会话" class="headerlink" title="4.1 何为连接与会话"></a>4.1 何为连接与会话</h3><p>开发者要开始使用 <code>sysrepo</code> ，首先必须创建一个连接。一个应用程序或者进程即使可以允许创建多个连接，但是一般情况只会创建一个连接。<code>sysrepo</code> 允许同时创建多个连接。简单的举个例子，通常情况下，<code>sysrepo-plugin</code> 在 <code>init_cb</code> 初始时就会创建一个连接，这是一个由 <code>sysrepo-plugin</code> 与 <code>sysrepo</code> 所创建的连接，只要发生异常不释放，该连接会一直存在整个 <code>sysrepo-plugin</code> 进程的生命周期，此外，例如用户通过 <code>sysrepoctl -l |grep ***</code>  看某个 <code>Yang</code> 模型是否已经加载，<code>sysrepoctl</code> 应用程序也创建一个短连接，该连接在命令执行结束后立即释放，假如是极端修改，不释放该连接，再使用 <code>sysrepocfg</code> 来配置 <code>runing</code> 库，这时有 3 个与 <code>sysrepo</code> 连接。并且 3 个连接不干扰，也不影响 <code>sysrepo</code> 的正常工作。</p><p>而会话，是建立在连接之下，一个连接下可以创建多个会话，每个会话都有一个唯一的标识，每个会话总是可以选择一个可随时更改的数据库，使用些会话的所有 API 调用都将在该数据库下操作。</p><p>连接与会话的关系如下所示，可能不是特别准备，但大概就是这个意思。</p><img data-src="/2020/09/23/Netconf/sysrepo-note/connect_session.png" class="" title="连接与会话关系"><h3 id="4-2-核心数据结构"><a href="#4-2-核心数据结构" class="headerlink" title="4.2 核心数据结构"></a>4.2 核心数据结构</h3><p><code>connection</code> 的数据结构主要是存储 <code>sysrepo</code> 连接与 <code>Libyang</code> 的上下文，该连接所创建的共享内存结构。数据结构定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Sysrepo connection.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_conn_ctx_s</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ly_ctx</span> *ly_ctx;          <span class="comment">/**&lt; Libyang context, also available to user. */</span></span><br><span class="line">    <span class="type">sr_conn_options_t</span> opts;         <span class="comment">/**&lt; Connection options. */</span></span><br><span class="line">    sr_diff_check_cb diff_check_cb; <span class="comment">/**&lt; Connection user diff check callback. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">pthread_mutex_t</span> ptr_lock;       <span class="comment">/**&lt; Session-shared lock for accessing pointers to sessions. */</span></span><br><span class="line">    <span class="type">sr_session_ctx_t</span> **sessions;    <span class="comment">/**&lt; Array of sessions for this connection. */</span></span><br><span class="line">    <span class="type">uint32_t</span> session_count;         <span class="comment">/**&lt; Session count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> main_create_lock;           <span class="comment">/**&lt; Process-shared file lock for creating main/ext SHM. */</span></span><br><span class="line">    <span class="type">sr_rwlock_t</span> ext_remap_lock;     <span class="comment">/**&lt; Session-shared lock for remapping ext SHM. */</span></span><br><span class="line">    <span class="type">sr_shm_t</span> main_shm;              <span class="comment">/**&lt; Main SHM structure. */</span></span><br><span class="line">    <span class="type">sr_shm_t</span> ext_shm;               <span class="comment">/**&lt; External SHM structure (all stored offsets point here). */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sr_mod_cache_s</span> &#123;</span><br><span class="line">        <span class="type">sr_rwlock_t</span> lock;           <span class="comment">/**&lt; Session-shared lock for accessing the module cache. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *data;      <span class="comment">/**&lt; Data of all cached modules, */</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">struct</span> &#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">lys_module</span> *ly_mod;    <span class="comment">/**&lt; Libyang module in the cache. */</span></span><br><span class="line">            <span class="type">uint32_t</span> ver;           <span class="comment">/**&lt; Version of the module data in the cache, 0 is not valid */</span></span><br><span class="line">        &#125; *mods;                    <span class="comment">/**&lt; Array of cached modules. */</span></span><br><span class="line">        <span class="type">uint32_t</span> mod_count;         <span class="comment">/**&lt; Cached modules count. */</span></span><br><span class="line">    &#125; mod_cache;                    <span class="comment">/**&lt; Module running data cache. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cache</code> 需要特别说明：如果一个会话工作在 <code>running</code> 的数据库下操作，并且该会话的连接使能 <code>cache</code> 功能，则不会每次都从 <code>sysrepo</code> 中加载数据，可以从 <code>cache</code> 中复制数据，这样，可以大幅度提高 <code>sysrepo</code> 的处理性能。</p><p><code>session</code> 的主要数据结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Sysrepo session.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_session_ctx_s</span> &#123;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn;            <span class="comment">/**&lt; Connection used for creating this session. */</span></span><br><span class="line">    <span class="type">sr_datastore_t</span> ds;              <span class="comment">/**&lt; Datastore of the session. */</span></span><br><span class="line">    <span class="type">sr_sub_event_t</span> ev;              <span class="comment">/**&lt; Event of a callback session. ::SR_EV_NONE for standard user sessions. */</span></span><br><span class="line">    <span class="type">sr_sid_t</span> sid;                   <span class="comment">/**&lt; Session information. */</span></span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info;      <span class="comment">/**&lt; Session error information. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">pthread_mutex_t</span> ptr_lock;       <span class="comment">/**&lt; Lock for accessing pointers to subscriptions. */</span></span><br><span class="line">    <span class="type">sr_subscription_ctx_t</span> **subscriptions;  <span class="comment">/**&lt; Array of subscriptions of this session. */</span></span><br><span class="line">    <span class="type">uint32_t</span> subscription_count;    <span class="comment">/**&lt; Subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *edit;      <span class="comment">/**&lt; Prepared edit data tree. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *diff;      <span class="comment">/**&lt; Diff data tree, used for module change iterator. */</span></span><br><span class="line">    &#125; dt[SR_DS_COUNT];              <span class="comment">/**&lt; Session-exclusive prepared changes. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf</span> &#123;</span><br><span class="line">        ATOMIC_T thread_running;    <span class="comment">/**&lt; Flag whether the notification buffering thread of this session is running. */</span></span><br><span class="line">        <span class="type">pthread_t</span> tid;              <span class="comment">/**&lt; Thread ID of the thread. */</span></span><br><span class="line">        <span class="type">sr_rwlock_t</span> lock;           <span class="comment">/**&lt; Lock for accessing thread_running and the notification buffer</span></span><br><span class="line"><span class="comment">                                         (READ-lock is not used). */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf_node</span> &#123;</span><br><span class="line">            <span class="type">char</span> *notif_lyb;        <span class="comment">/**&lt; Buffered notification to be stored in LYB format. */</span></span><br><span class="line">            <span class="type">time_t</span> notif_ts;        <span class="comment">/**&lt; Buffered notification timestamp. */</span></span><br><span class="line">            <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">lys_module</span> *notif_mod; <span class="comment">/**&lt; Buffered notification modules. */</span></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf_node</span> *next;    <span class="comment">/**&lt; Next stored notification buffer node. */</span></span><br><span class="line">        &#125; *first;                   <span class="comment">/**&lt; First stored notification buffer node. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf_node</span> *last;    <span class="comment">/**&lt; Last stored notification buffer node. */</span></span><br><span class="line">    &#125; notif_buf;                    <span class="comment">/**&lt; Notification buffering attributes. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 <code>session</code> 结构中主要是用于该次 <code>session</code> 的连接，该次 <code>session</code> 要连接的数据库类型（4种，<code>runing</code> , <code>startup</code> , <code>candidate</code> , <code>operation</code>），以及重中之重的 <code>sr_subscription_ctx_t **subscriptions</code>， <code>sysrepo</code> 的所支持操作的订阅都在该结构中定义，不多说，直接看数据结构定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Sysrepo subscription.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_subscription_ctx_s</span> &#123;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn;            <span class="comment">/**&lt; Connection of the subscription. */</span></span><br><span class="line">    <span class="type">uint32_t</span> evpipe_num;            <span class="comment">/**&lt; Event pipe number of this subscription structure. */</span></span><br><span class="line">    <span class="type">int</span> evpipe;                     <span class="comment">/**&lt; Event pipe opened for reading. */</span></span><br><span class="line">    ATOMIC_T thread_running;        <span class="comment">/**&lt; Flag whether the thread handling this subscription is running. */</span></span><br><span class="line">    <span class="type">pthread_t</span> tid;                  <span class="comment">/**&lt; Thread ID of the handler thread. */</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> subs_lock;      <span class="comment">/**&lt; Session-shared lock for accessing specific subscriptions. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">modsub_change_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *module_name;          <span class="comment">/**&lt; Module of the subscriptions. */</span></span><br><span class="line">        <span class="type">sr_datastore_t</span> ds;          <span class="comment">/**&lt; Datastore of the subscriptions. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">modsub_changesub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            <span class="type">uint32_t</span> priority;      <span class="comment">/**&lt; Subscription priority. */</span></span><br><span class="line">            <span class="type">sr_subscr_options_t</span> opts;   <span class="comment">/**&lt; Subscription options. */</span></span><br><span class="line">            sr_module_change_cb cb; <span class="comment">/**&lt; Subscription callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line"> </span><br><span class="line">            <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">            <span class="type">sr_sub_event_t</span> event;   <span class="comment">/**&lt; Type of the last processed event. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; Configuration change subscriptions for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; Configuration change module XPath subscription count. */</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">sr_shm_t</span> sub_shm;           <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">    &#125; *change_subs;                 <span class="comment">/**&lt; Change subscriptions for each module. */</span></span><br><span class="line">    <span class="type">uint32_t</span> change_sub_count;      <span class="comment">/**&lt; Change module subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">modsub_oper_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *module_name;          <span class="comment">/**&lt; Module of the subscriptions. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">modsub_opersub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            sr_oper_get_items_cb cb;    <span class="comment">/**&lt; Subscription callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line"> </span><br><span class="line">            <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">            <span class="type">sr_shm_t</span> sub_shm;       <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; Operational subscriptions for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; Operational module XPath subscription count. */</span></span><br><span class="line">    &#125; *oper_subs;                   <span class="comment">/**&lt; Operational subscriptions for each module. */</span></span><br><span class="line">    <span class="type">uint32_t</span> oper_sub_count;        <span class="comment">/**&lt; Operational module subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">modsub_notif_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *module_name;          <span class="comment">/**&lt; Module of the subscriptions. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">modsub_notifsub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            <span class="type">time_t</span> start_time;      <span class="comment">/**&lt; Subscription start time. */</span></span><br><span class="line">            <span class="type">int</span> replayed;           <span class="comment">/**&lt; Flag whether the subscription replay is finished. */</span></span><br><span class="line">            <span class="type">time_t</span> stop_time;       <span class="comment">/**&lt; Subscription stop time. */</span></span><br><span class="line">            sr_event_notif_cb cb;   <span class="comment">/**&lt; Subscription value callback. */</span></span><br><span class="line">            sr_event_notif_tree_cb tree_cb; <span class="comment">/**&lt; Subscription tree callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; Notification subscriptions for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; Notification module XPath subscription count. */</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">        <span class="type">sr_shm_t</span> sub_shm;           <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">    &#125; *notif_subs;                  <span class="comment">/**&lt; Notification subscriptions for each module. */</span></span><br><span class="line">    <span class="type">uint32_t</span> notif_sub_count;       <span class="comment">/**&lt; Notification module subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">opsub_rpc_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *op_path;              <span class="comment">/**&lt; Subscription RPC/action path. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">opsub_rpcsub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            <span class="type">uint32_t</span> priority;      <span class="comment">/**&lt; Subscription priority. */</span></span><br><span class="line">            sr_rpc_cb cb;           <span class="comment">/**&lt; Subscription value callback. */</span></span><br><span class="line">            sr_rpc_tree_cb tree_cb; <span class="comment">/**&lt; Subscription tree callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line"> </span><br><span class="line">            <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">            <span class="type">sr_sub_event_t</span> event;   <span class="comment">/**&lt; Type of the last processed event. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; RPC/action subscription for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; RPC/action XPath subscription count. */</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">sr_shm_t</span> sub_shm;           <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">    &#125; *rpc_subs;                    <span class="comment">/**&lt; RPC/action subscriptions for each operation. */</span></span><br><span class="line">    <span class="type">uint32_t</span> rpc_sub_count;         <span class="comment">/**&lt; RPC/action operation subscription count. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-connection-函数"><a href="#4-3-connection-函数" class="headerlink" title="4.3 connection 函数"></a>4.3 connection 函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*功能：连接sysrepo数据库</span></span><br><span class="line"><span class="comment"> *输入：默认的连接处理选项</span></span><br><span class="line"><span class="comment"> *输出：该连接的数据，用于该连接的后续的操作，最后由sr_disconnect释放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">API <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">sr_connect</span><span class="params">(<span class="type">const</span> <span class="type">sr_conn_options_t</span> opts, <span class="type">sr_conn_ctx_t</span> **conn_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *sr_mods = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> created = <span class="number">0</span>, changed;</span><br><span class="line">    <span class="type">sr_main_shm_t</span> *main_shm;</span><br><span class="line">    <span class="type">uint32_t</span> conn_count;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">SR_CHECK_ARG_APIRET</span>(!conn_p, <span class="literal">NULL</span>, err_info);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* check that all required directories exist */</span></span><br><span class="line">    <span class="comment">/* 路径包括startup库的存储路径，notify的路径，sysrepo加载的Yang的路径。</span></span><br><span class="line"><span class="comment">     * 并且获取以上路径的访问权限。与路径有关的，都在CMakeLists.txt中的定义</span></span><br><span class="line"><span class="comment">     * 使用者可以修改路径，也可以使用定义的默认路径。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_check_dirs</span>())) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create basic connection structure */</span></span><br><span class="line">    <span class="comment">/*创建一个基础连接结构，包括，分配连接的存储空间，初始化YANG的上下文，</span></span><br><span class="line"><span class="comment">     * 互斥信号量初始化，共享内存文件锁权限打开，读写锁的初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_conn_new</span>(opts, &amp;conn))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* CREATE LOCK */</span></span><br><span class="line">    <span class="comment">/*加锁*/</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_createlock</span>(conn-&gt;main_create_lock))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* open the main SHM */</span></span><br><span class="line">    <span class="comment">/*初始化主SHM，打开主SHM,为主SHM分配合适的空间,并对主SHM做相应的初始化*/</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_main_open</span>(&amp;conn-&gt;main_shm, &amp;created))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* open the ext SHM */</span></span><br><span class="line">     <span class="comment">/*初始化扩展SHM，打开扩展SHM,为扩展SHM分配合适的空间,并对扩展SHM做相应的初始化*/</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_ext_open</span>(&amp;conn-&gt;ext_shm, created))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ／*Sysrepo SHM使用主+扩展SHM机制,整体机制在后面细谈，此处主要是将连接的创建。先略过*／</span><br><span class="line">    <span class="comment">/*该行代码之前的操作,都是基本操作,权限获取,内存大小分配初始化.该行代码之后,需要将已加载的 </span></span><br><span class="line"><span class="comment">      YANG数据模型做解析，并更新存储到相应的结构中*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* update connection context based on stored lydmods data */</span></span><br><span class="line">    <span class="comment">/* 加载已经存储的YANG模型,并响应任意的调试变化,并要更新Connection的上下文</span></span><br><span class="line"><span class="comment">     * 根据前面所创建所保存的libyang的上下文ly_ctx,如果检测到lyd_node不存在,则为Sysrepo创建一 </span></span><br><span class="line"><span class="comment">     * 个新的YANG模型数据结构struct lyd_node,如果存在,则解析sysrepo Yang 模型数据.并对模块作上 </span></span><br><span class="line"><span class="comment">     * 下文件的更新.但是对于第一个连接,lyd_node一开始都是不存在的,所以,在完成创建与加载lyd_node </span></span><br><span class="line"><span class="comment">     *  后,需要将全部的YANG模型解析到lys_module-&gt;lyd_node中,一个YANG模型相当于lys_module- </span></span><br><span class="line"><span class="comment">     *  &gt;lyd_node下的一个节点,一个节点一个节点加载,挂载到lys_module的链表中.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_conn_lydmods_ctx_update</span>(conn, created || !(opts &amp; </span><br><span class="line">           SR_CONN_NO_SCHED_CHANGES), &amp;sr_mods, &amp;changed))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*这段代码不解读,看注释就能明白*/</span></span><br><span class="line">    <span class="keyword">if</span> (changed || created) &#123;</span><br><span class="line">        <span class="comment">/* clear all main SHM modules (if main SHM was just created, there aren&#x27;t any anyway) */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;main_shm, <span class="built_in">sizeof</span>(<span class="type">sr_main_shm_t</span>)))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">        main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">        main_shm-&gt;mod_count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* clear ext SHM (there can be no connections and no modules) */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;ext_shm, <span class="built_in">sizeof</span>(<span class="type">size_t</span>)))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* set wasted mem to 0 */</span></span><br><span class="line">        *((<span class="type">size_t</span> *)conn-&gt;ext_shm.addr) = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* add all the modules in lydmods data into main SHM */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_add</span>(conn, sr_mods-&gt;child))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* copy full datastore from &lt;startup&gt; to &lt;running&gt; */</span></span><br><span class="line">        <span class="comment">/*初始化时,完成将startup库的文件copy到running库中,常见的配置恢复是在此处完成*/</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_files_startup2running</span>(conn, created))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* check data file existence and owner/permissions of all installed modules */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_check_data_files</span>(conn))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remember connection count */</span></span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">    conn_count = main_shm-&gt;conn_state.conn_count;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* CREATE UNLOCK */</span></span><br><span class="line">    <span class="built_in">sr_shmmain_createunlock</span>(conn-&gt;main_create_lock);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* SHM LOCK (mainly to recover connections) */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (conn_count &amp;&amp; !(opts &amp; SR_CONN_NO_SCHED_CHANGES) &amp;&amp; !main_shm-&gt;conn_state.conn_count) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">        <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* all the connections were stale so we actually can apply scheduled changes, recreate the whole connection */</span></span><br><span class="line">        <span class="built_in">assert</span>(!err_info);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">lyd_free_withsiblings</span>(sr_mods);</span><br><span class="line">        <span class="built_in">sr_conn_free</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sr_connect</span>(opts, conn_p);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add connection into state */</span></span><br><span class="line">    err_info = <span class="built_in">sr_shmmain_conn_state_add</span>(conn);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">    <span class="comment">/*打开锁*/</span></span><br><span class="line">    <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line"> </span><br><span class="line">cleanup_unlock:</span><br><span class="line">    <span class="comment">/* CREATE UNLOCK */</span></span><br><span class="line">    <span class="built_in">sr_shmmain_createunlock</span>(conn-&gt;main_create_lock);</span><br><span class="line"> </span><br><span class="line">cleanup:</span><br><span class="line">    <span class="built_in">lyd_free_withsiblings</span>(sr_mods);</span><br><span class="line">    <span class="keyword">if</span> (err_info) &#123;</span><br><span class="line">        <span class="built_in">sr_conn_free</span>(conn);</span><br><span class="line">        <span class="keyword">if</span> (created) &#123;</span><br><span class="line">            <span class="comment">/* remove any created SHM so it is not considered properly created */</span></span><br><span class="line">            <span class="built_in">shm_unlink</span>(SR_MAIN_SHM);</span><br><span class="line">            <span class="built_in">shm_unlink</span>(SR_EXT_SHM);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *conn_p = conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 功能:清除与释放由sr_connect分配的的连接上下文,</span></span><br><span class="line"><span class="comment"> * 在该连接下的所有session与订阅将自动停止并清理回收</span></span><br><span class="line"><span class="comment"> * 输入: 调用sr_connect中创建的连接上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**其它不做解释,看注释,很清楚/</span></span><br><span class="line"><span class="comment">API int</span></span><br><span class="line"><span class="comment">sr_disconnect(sr_conn_ctx_t *conn)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    sr_error_info_t *err_info = NULL, *lock_err = NULL, *tmp_err;</span></span><br><span class="line"><span class="comment">    uint32_t i;</span></span><br><span class="line"><span class="comment">    int wr_lock = 0;</span></span><br><span class="line"><span class="comment">    sr_main_shm_t *main_shm;</span></span><br><span class="line"><span class="comment">    if (!conn) &#123;</span></span><br><span class="line"><span class="comment">        return sr_api_ret(NULL, NULL);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    /* stop all subscriptions */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conn-&gt;session_count; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (conn-&gt;sessions[i]-&gt;subscription_count &amp;&amp; conn-&gt;sessions[i]-&gt;subscriptions[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!wr_lock) &#123;</span><br><span class="line">                <span class="comment">/* SHM LOCK */</span></span><br><span class="line">                lock_err = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">                <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, lock_err);</span><br><span class="line"> </span><br><span class="line">                wr_lock = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            tmp_err = _sr_unsubscribe(conn-&gt;sessions[i]-&gt;subscriptions[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* we need just remap lock or even no lock (no other threads can use the mapping)</span></span><br><span class="line"><span class="comment">     * would be fine, but be robust */</span></span><br><span class="line">    <span class="keyword">if</span> (!wr_lock) &#123;</span><br><span class="line">        <span class="comment">/* SHM LOCK */</span></span><br><span class="line">        lock_err = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">        <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, lock_err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* stop all the sessions */</span></span><br><span class="line">    <span class="keyword">while</span> (conn-&gt;session_count) &#123;</span><br><span class="line">        tmp_err = _sr_session_stop(conn-&gt;sessions[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* free any stored operational data */</span></span><br><span class="line">    tmp_err = <span class="built_in">sr_shmmod_oper_stored_del_conn</span>(conn, conn, <span class="built_in">getpid</span>());</span><br><span class="line">    <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line"> </span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* CONN STATE LOCK */</span></span><br><span class="line">    tmp_err = <span class="built_in">sr_mlock</span>(&amp;main_shm-&gt;conn_state.lock, SR_CONN_STATE_LOCK_TIMEOUT, __func__);</span><br><span class="line">    <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remove from state */</span></span><br><span class="line">    <span class="built_in">sr_shmmain_conn_state_del</span>(main_shm, conn-&gt;ext_shm.addr, conn, <span class="built_in">getpid</span>());</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* CONN STATE UNLOCK */</span></span><br><span class="line">    <span class="built_in">sr_munlock</span>(&amp;main_shm-&gt;conn_state.lock);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!lock_err) &#123;</span><br><span class="line">        <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">        <span class="keyword">if</span> (wr_lock) &#123;</span><br><span class="line">            <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* free attributes */</span></span><br><span class="line">    <span class="built_in">sr_conn_free</span>(conn);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-session"><a href="#4-4-session" class="headerlink" title="4.4 session"></a>4.4 session</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*功能:开始一个新的session</span></span><br><span class="line"><span class="comment"> *输入:conn: 由sr_connect所创建的连接</span></span><br><span class="line"><span class="comment"> *     datastore: 连接的数据库类型</span></span><br><span class="line"><span class="comment"> *输出: 用于后续的API调用的session上下文件  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">API <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">sr_session_start</span><span class="params">(<span class="type">sr_conn_ctx_t</span> *conn, <span class="type">const</span> <span class="type">sr_datastore_t</span> datastore, <span class="type">sr_session_ctx_t</span> **session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">sr_main_shm_t</span> *main_shm;</span><br><span class="line">    <span class="type">uid_t</span> uid;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">SR_CHECK_ARG_APIRET</span>(!conn || !session, <span class="literal">NULL</span>, err_info);</span><br><span class="line">    <span class="comment">/*分配1个sizeof (**session)大小的内存空间,并初始化为0*/</span></span><br><span class="line">    *session = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span> **session);</span><br><span class="line">    <span class="keyword">if</span> (!*session) &#123;</span><br><span class="line">        <span class="built_in">SR_ERRINFO_MEM</span>(&amp;err_info);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* use new SR session ID and increment it (no lock needed, we are just reading and main SHM is never remapped) */</span></span><br><span class="line">    <span class="comment">/**使用了C++的atomic机制,在C中引入,需要增加编译选项,如何增加,参考CMakeFile.txt.*/</span></span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">    (*session)-&gt;sid.sr = <span class="built_in">ATOMIC_INC_RELAXED</span>(main_shm-&gt;new_sr_sid);</span><br><span class="line">    <span class="keyword">if</span> ((*session)-&gt;sid.sr == (<span class="type">uint32_t</span>)(ATOMIC_T_MAX - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">/* the value in the main SHM is actually ATOMIC_T_MAX and calling another INC would cause an overflow */</span></span><br><span class="line">        <span class="built_in">ATOMIC_STORE_RELAXED</span>(main_shm-&gt;new_sr_sid, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remember current real process owner */</span></span><br><span class="line">    uid = <span class="built_in">getuid</span>();</span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_get_pwd</span>(&amp;uid, &amp;(*session)-&gt;sid.user))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add the session into conn */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_ptr_add</span>(&amp;conn-&gt;ptr_lock, (<span class="type">void</span> ***)&amp;conn-&gt;sessions, &amp;conn-&gt;session_count, *session))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    (*session)-&gt;conn = conn;</span><br><span class="line">    (*session)-&gt;ds = datastore;</span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_mutex_init</span>(&amp;(*session)-&gt;ptr_lock, <span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_rwlock_init</span>(&amp;(*session)-&gt;notif_buf.lock, <span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">SR_LOG_INF</span>(<span class="string">&quot;Session %u (user \&quot;%s\&quot;) created.&quot;</span>, (*session)-&gt;sid.sr, (*session)-&gt;sid.user);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">error:</span><br><span class="line">    <span class="built_in">free</span>((*session)-&gt;sid.user);</span><br><span class="line">    <span class="built_in">free</span>(*session);</span><br><span class="line">    *session = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 功能:停止当前session并且释放与该session所维系的全部资源</span></span><br><span class="line"><span class="comment"> * 输入: sr_session_start中所创建的session上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">####函数清晰,简单,注释丰富,一看就懂,就不多废话.</span><br><span class="line"><span class="function">API <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">sr_session_stop</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>, *lock_err = <span class="literal">NULL</span>, *tmp_err;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn;</span><br><span class="line">    <span class="type">int</span> wr_lock = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    conn = session-&gt;conn;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* stop all subscriptions of this session */</span></span><br><span class="line">    <span class="keyword">while</span> (session-&gt;subscription_count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!wr_lock) &#123;</span><br><span class="line">            <span class="comment">/* SHM LOCK */</span></span><br><span class="line">            lock_err = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">            <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, lock_err);</span><br><span class="line"> </span><br><span class="line">            wr_lock = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        tmp_err = <span class="built_in">sr_subs_session_del</span>(session, session-&gt;subscriptions[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">    <span class="keyword">if</span> (wr_lock &amp;&amp; !lock_err) &#123;</span><br><span class="line">        <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* no lock needed, we are just reading main SHM */</span></span><br><span class="line">    tmp_err = _sr_session_stop(session);</span><br><span class="line">    <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接与会话核心处就是这 4 个 API 函数, 其它与连接与会话有关的 API 都是对相关的补充,想要进一步了解的.请阅读源码.</p><p>接下来会分析 <code>sysrepo</code> 的共享内存机制. <code>SHM</code> 机制是新 <code>sysrepo</code> 的核心，需要好好说道说道.</p><h2 id="5-sysrepo-共享内存机制"><a href="#5-sysrepo-共享内存机制" class="headerlink" title="5. sysrepo 共享内存机制"></a>5. sysrepo 共享内存机制</h2><h3 id="5-1-共享内存机制"><a href="#5-1-共享内存机制" class="headerlink" title="5.1 共享内存机制"></a>5.1 共享内存机制</h3><p><code>sysrepo0.X.X</code> 版本使用的进程间通信的机制，在实际的使用过程中，出现了诸如数据不同步、数据处理<code>TimeOut</code>、完成一次 <code>Get</code> 请求时，但实际处理的请求会较多，导致性能与规格上不去的各类问题。<code>sysrepo-devel</code> 分支开始引入共享机制后，合入到 <code>sysrepo</code> 的 <code>Master</code> 分支，也就是现在的 <code>sysrepo1.X.X</code> 版本。</p><p>简单说一说什么是共享内存，共享内存就是允许两个或多个进程共享一定的存储区，说白了，就是两个进程访问同一块内存区域，当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改，所以数据不需要在客户机和服务器端之间复制，数据直接写到内存，不用若干次数据拷贝，是一种最快的 <code>IPC</code> 。原理图如下所示，需要注意的是，共享内存本向并没有任何的同步与互斥机制，所以必须使用信号量来实现对共享内存的存取的同步。其它有关的共享内存的概念使用，网上有很多，可自行查阅理解。本处这分析与 <code>sysrepo</code> 相关的共享内存机制的使用。</p><img data-src="/2020/09/23/Netconf/sysrepo-note/shm.png" class="" title="共享内存原理"><h3 id="5-2-数据结构"><a href="#5-2-数据结构" class="headerlink" title="5.2 数据结构"></a>5.2 数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Generic shared memory information structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//sysrepo 共享内存数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sr_shm_s</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd;                         <span class="comment">/**&lt; Shared memory file desriptor. */</span></span><br><span class="line">    <span class="type">size_t</span> size;                    <span class="comment">/**&lt; Shared memory mapping current size. */</span></span><br><span class="line">    <span class="type">char</span> *addr;                     <span class="comment">/**&lt; Shared memory mapping address. */</span></span><br><span class="line">&#125; <span class="type">sr_shm_t</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// sysrepo 定义了两个 SHM 分段，一个是 main SHM 和 ext SHM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SR_MAIN_SHM <span class="string">&quot;/sr_main&quot;</span>              <span class="comment">/**&lt; Main SHM name. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SR_EXT_SHM <span class="string">&quot;/sr_ext&quot;</span>                <span class="comment">/**&lt; External SHM name. */</span></span></span><br><span class="line"><span class="comment">// 除了定义定义的 main 和 ext 分段之外，还有用于 subscriptions 和 running 数据文件的单个的 SHM 分段。</span></span><br><span class="line"><span class="comment">// main SHM 是以 sr_main_shm_t 结构开始，结构定义如下：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sr_main_shm_s</span> &#123;</span><br><span class="line">    <span class="type">sr_rwlock_t</span> lock;  <span class="comment">/**&lt; Process-shared lock for accessing main and ext SHM. It is </span></span><br><span class="line"><span class="comment">                        * required only when  accessing attributes that can be changed </span></span><br><span class="line"><span class="comment">                        * (subscriptions, replay support) and do not have their own lock </span></span><br><span class="line"><span class="comment">                        * (conn state), otherwise not needed. */</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> lydmods_lock; <span class="comment">/**&lt; Process-shared lock for accessing sysrepo module </span></span><br><span class="line"><span class="comment">                                    *data. */</span></span><br><span class="line">    <span class="type">uint32_t</span> mod_count;  <span class="comment">/**&lt; Number of installed modules stored after this structure. */</span></span><br><span class="line">    <span class="type">off_t</span> rpc_subs;             <span class="comment">/**&lt; Array of RPC/action subscriptions. */</span></span><br><span class="line">    <span class="type">uint16_t</span> rpc_sub_count;     <span class="comment">/**&lt; Number of RPC/action subscriptions. */</span></span><br><span class="line">    ATOMIC_T new_sr_sid;        <span class="comment">/**&lt; SID for a new session. */</span></span><br><span class="line">    ATOMIC_T new_evpipe_num;    <span class="comment">/**&lt; Event pipe number for a new subscription. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">pthread_mutex_t</span> lock; <span class="comment">/**&lt; Process-shared lock for accessing connection state. */</span></span><br><span class="line">        <span class="type">off_t</span> conns;            <span class="comment">/**&lt; Array of existing connections. */</span></span><br><span class="line">        <span class="type">uint32_t</span> conn_count;    <span class="comment">/**&lt; Number of existing connections. */</span></span><br><span class="line">    &#125; conn_state;               <span class="comment">/**&lt; Information about connection state. */</span></span><br><span class="line">&#125; <span class="type">sr_main_shm_t</span>;</span><br><span class="line"><span class="comment">// 后面是是所有安装的模块，每个安装的模块都会带 sr_mod_t 结构直接到 main SHM 的定义结构。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sr_mod_s</span> <span class="type">sr_mod_t</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Main SHM module.</span></span><br><span class="line"><span class="comment"> * (typedef sr_mod_t)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_mod_s</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sr_mod_lock_s</span> &#123;</span><br><span class="line">        <span class="type">sr_rwlock_t</span> lock; <span class="comment">/**&lt; Process-shared lock for accessing module instance data. */</span></span><br><span class="line">        <span class="type">uint8_t</span> write_locked;   <span class="comment">/**&lt; Whether module data are WRITE locked (lock itself may not be WRITE locked to allow data reading). */</span></span><br><span class="line">        <span class="type">uint8_t</span> ds_locked;      <span class="comment">/**&lt; Whether module data are datastore locked (NETCONF locks). */</span></span><br><span class="line">        <span class="type">sr_sid_t</span> sid;           <span class="comment">/**&lt; Session ID of the locking session (user is always NULL). */</span></span><br><span class="line">        <span class="type">time_t</span> ds_ts;           <span class="comment">/**&lt; Timestamp of the datastore lock. */</span></span><br><span class="line">    &#125; data_lock_info[SR_DS_COUNT]; <span class="comment">/**&lt; Module data lock information for each datastore. */</span></span><br><span class="line">    <span class="type">sr_rwlock_t</span> replay_lock;    <span class="comment">/**&lt; Process-shared lock for accessing stored notifications for replay. */</span></span><br><span class="line">    <span class="type">uint32_t</span> ver;               <span class="comment">/**&lt; Module data version (non-zero). */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> name;                 <span class="comment">/**&lt; Module name. */</span></span><br><span class="line">    <span class="type">char</span> rev[<span class="number">11</span>];               <span class="comment">/**&lt; Module revision. */</span></span><br><span class="line">    <span class="type">uint8_t</span> flags;              <span class="comment">/**&lt; Module flags. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> features;             <span class="comment">/**&lt; Array of enabled features (off_t *). */</span></span><br><span class="line">    <span class="type">uint16_t</span> feat_count;        <span class="comment">/**&lt; Number of enabled features. */</span></span><br><span class="line">    <span class="type">off_t</span> data_deps;            <span class="comment">/**&lt; Array of data dependencies. */</span></span><br><span class="line">    <span class="type">uint16_t</span> data_dep_count;    <span class="comment">/**&lt; Number of data dependencies. */</span></span><br><span class="line">    <span class="type">off_t</span> inv_data_deps;        <span class="comment">/**&lt; Array of inverse data dependencies (off_t *). */</span></span><br><span class="line">    <span class="type">uint16_t</span> inv_data_dep_count;    <span class="comment">/**&lt; Number of inverse data dependencies. */</span></span><br><span class="line">    <span class="type">off_t</span> op_deps;              <span class="comment">/**&lt; Array of operation dependencies. */</span></span><br><span class="line">    <span class="type">uint16_t</span> op_dep_count;      <span class="comment">/**&lt; Number of operation dependencies. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">off_t</span> subs;             <span class="comment">/**&lt; Array of change subscriptions. */</span></span><br><span class="line">        <span class="type">uint16_t</span> sub_count;     <span class="comment">/**&lt; Number of change subscriptions. */</span></span><br><span class="line">    &#125; change_sub[SR_DS_COUNT];  <span class="comment">/**&lt; Change subscriptions for each datastore. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> oper_subs;            <span class="comment">/**&lt; Array of operational subscriptions. */</span></span><br><span class="line">    <span class="type">uint16_t</span> oper_sub_count;    <span class="comment">/**&lt; Number of operational subscriptions. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> notif_subs;           <span class="comment">/**&lt; Array of notification subscriptions. */</span></span><br><span class="line">    <span class="type">uint16_t</span> notif_sub_count;   <span class="comment">/**&lt; Number of notification subscriptions. */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 全部的 off_t 标识这些结构是指向 ext SHM 的偏移指针。</span></span><br><span class="line"><span class="comment">// 所以，通过 install 将模块安装后，这结构就是初始化与注册上。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Ext shm 是以一个 size_t 单位开始，这值表示在该 SHM 分段使用的字节大小。它是由 main SHM 的 `off_t` 指所指向的数组和字符串表示。首先，在 sysrepo 有一个 sr_conn_state_t 结构，它是表示所有全部运行的连接状态，其次是 sr_mod_t 结构，它是包括安装的各个模块名，依赖，各类订阅，最后是 sr_rpc_t。</span></span><br></pre></td></tr></table></figure><h3 id="5-3-源码分析"><a href="#5-3-源码分析" class="headerlink" title="5.3 源码分析"></a>5.3 源码分析</h3><img data-src="/2020/09/23/Netconf/sysrepo-note/shmmain_add.png" class="" title="shmmain_add"><p>此添加 <code>shm main</code> 的入口代码，将全部模块以 <code>lydmod</code> 数据形式添加到 <code>main SHM</code> 中。参考前一章的 <code>sr_connect</code> 函数，这就是将在与 <code>sysrepo</code> 连接时，会将全部模块的加载到共享内存中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">sr_error_info_t</span> *</span></span><br><span class="line"><span class="function"><span class="title">sr_shmmain_add</span><span class="params">(<span class="type">sr_conn_ctx_t</span> *conn, <span class="keyword">struct</span> lyd_node *sr_mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *next;</span><br><span class="line">    <span class="type">sr_mod_t</span> *shm_mod;</span><br><span class="line">    <span class="type">sr_main_shm_t</span> *main_shm;</span><br><span class="line">    <span class="type">off_t</span> main_end, ext_end;</span><br><span class="line">    <span class="type">size_t</span> *wasted_ext, new_ext_size, new_mod_count;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* count how many modules are we going to add */</span></span><br><span class="line">    <span class="comment">//计算有多少个新的模块需要添加，如果模块在其它的连接已经添加过，该不会计算的/</span></span><br><span class="line">    new_mod_count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">LY_TREE_FOR</span>(sr_mod, next) &#123;</span><br><span class="line">        ++new_mod_count;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remember current SHM and ext SHM end (size) */</span></span><br><span class="line">    <span class="comment">//记录main SHM与ext SHM的大小 </span></span><br><span class="line">    main_end = conn-&gt;main_shm.size;</span><br><span class="line">    ext_end = conn-&gt;ext_shm.size;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* enlarge main SHM for the new modules */</span></span><br><span class="line">    <span class="comment">//为新的模块扩大man SHM的空间，这部分很棒，算的是一种自扩大袜。</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;main_shm, conn-&gt;main_shm.size + new_mod_count * <span class="keyword">sizeof</span> *shm_mod))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* enlarge ext SHM */</span></span><br><span class="line">    <span class="comment">//为新的模块扩大ext SHM 空间</span></span><br><span class="line">    wasted_ext = (<span class="type">size_t</span> *)conn-&gt;ext_shm.addr; <span class="comment">//已使用的空间</span></span><br><span class="line">    new_ext_size = <span class="built_in">sizeof</span>(<span class="type">size_t</span>) + <span class="built_in">sr_shmmain_ext_get_size_main_shm</span>(&amp;conn-&gt;main_shm, conn-&gt;ext_shm.addr) +</span><br><span class="line">            <span class="built_in">sr_shmmain_ext_get_lydmods_size</span>(sr_mod-&gt;parent);  <span class="comment">//需要扩大的空间大小</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;ext_shm, new_ext_size + *wasted_ext))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sr_shm_remap，将空间映射到连接的SHM分段上。</span></span><br><span class="line">    wasted_ext = (<span class="type">size_t</span> *)conn-&gt;ext_shm.addr;  <span class="comment">//新扩大的空间大小。</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add all newly implemented modules into SHM */</span></span><br><span class="line">    <span class="comment">//添加所有的新的需要实现的模块到SHM中的地址中</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_add_modules</span>(conn-&gt;ext_shm.addr, sr_mod, (<span class="type">sr_mod_t</span> *)(conn-&gt;main_shm.addr + main_end),</span><br><span class="line">                &amp;ext_end))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add the new modules number */</span></span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">    main_shm-&gt;mod_count += new_mod_count;</span><br><span class="line">    <span class="built_in">assert</span>(main_shm-&gt;mod_count == (conn-&gt;main_shm.size - <span class="keyword">sizeof</span> *main_shm) / <span class="keyword">sizeof</span> *shm_mod);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Dependencies of old modules are rebuild because of possible</span></span><br><span class="line"><span class="comment">     * 1) new inverse dependencies when new modules depend on the old ones;</span></span><br><span class="line"><span class="comment">     * 2) new dependencies in the old modules in case they were added by foreign augments in the new modules.</span></span><br><span class="line"><span class="comment">     * Checking these cases would probably be more costly than just always rebuilding all dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remove all dependencies of all modules from SHM */</span></span><br><span class="line">    <span class="comment">//处理模块间的依赖，要重构各模块间的依赖，先将之前的依赖关系解除，</span></span><br><span class="line">    <span class="comment">//然后，为新的模块计算并扩大ext SHM 空间计算</span></span><br><span class="line">    <span class="comment">//最后，在SHM中为所有的模块添加建立新的依赖。</span></span><br><span class="line">    <span class="comment">//经过这个处理，各模块间的依赖建立成功。</span></span><br><span class="line">    <span class="built_in">sr_shmmain_del_modules_deps</span>(&amp;conn-&gt;main_shm, conn-&gt;ext_shm.addr, <span class="built_in">SR_FIRST_SHM_MOD</span>(conn-&gt;main_shm.addr));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* enlarge ext SHM to account for the newly wasted memory */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;ext_shm, new_ext_size + *wasted_ext))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line">    wasted_ext = (<span class="type">size_t</span> *)conn-&gt;ext_shm.addr;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add all dependencies for all modules in SHM */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_add_modules_deps</span>(&amp;conn-&gt;main_shm, conn-&gt;ext_shm.addr, sr_mod-&gt;parent-&gt;child,</span><br><span class="line">                <span class="built_in">SR_FIRST_SHM_MOD</span>(conn-&gt;main_shm.addr), &amp;ext_end))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* check expected size */</span></span><br><span class="line">    <span class="built_in">SR_CHECK_INT_RET</span>((<span class="type">unsigned</span>)ext_end != new_ext_size + *wasted_ext, err_info);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 还有两个核心函数:</span></span><br><span class="line"><span class="built_in">sr_shmmain_add_modules</span>(<span class="type">char</span> *ext_shm_addr, <span class="keyword">struct</span> lyd_node *first_sr_mod, <span class="type">sr_mod_t</span> *first_shm_mod, <span class="type">off_t</span> *ext_end)</span><br><span class="line"><span class="comment">//实现将全部的模块以及模块的全部特性都保存于main SHM中。这个函数不会添加data/op/inverse三类依赖</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">sr_shmmain_add_modules_deps</span>(<span class="type">sr_shm_t</span> *shm_main, <span class="type">char</span> *ext_shm_addr, <span class="keyword">struct</span> lyd_node </span><br><span class="line">          *first_sr_mod, <span class="type">sr_mod_t</span> *first_shm_mod,  <span class="type">off_t</span> *ext_end)</span><br><span class="line"><span class="comment">//该函数就是添加各模块间的data/op/inverse 依赖，并保存到manin SHM中。</span></span><br></pre></td></tr></table></figure><p>共享内存间在初始操作，包括信号的创建与初始化，也是在 <code>sr_connet</code> 函数中处理。&#96;&#96;sr_connet<code>是</code>plugind<code>与</code>sysrepo<code> 的连接入口，</code>SHM<code>是在入口中初始的一种机制，用来保证</code>sysrepo<code>与</code>plugind&#96; 的通信高效，快速。</p><p>先用 <code>sysrepo</code> 共享内存机制为后面的各类订阅打个底。先了解一下 <code>sysrepo</code> 的共享内存机理的实现。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://github.com/CESNET/libyang">libyang – GitHub</a></p><p><a href="https://github.com/CESNET/netopeer2">netopeer2 – GitHub</a></p><p><a href="https://github.com/sysrepo/sysrepo">sysrepo – GitHub</a></p><p><a href="https://github.com/mbj4668/pyang">pyang – GitHub</a></p></blockquote><blockquote><p><a href="https://netopeer.liberouter.org/doc/libyang/master/index.html">libyang – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/libnetconf2/devel/index.html">libnetconf2 – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/sysrepo/master/index.html">sysrepo – Doc</a></p><p><a href="http://66.218.245.39/doc/html/rn01re08.html">pyang – Doc</a></p><p><a href="https://www.runoob.com/xpath/xpath-tutorial.html">XPath 教程 – RUNOOB.COM</a></p><p><a href="https://www.yiibai.com/xpath">XPath教程 – 易百教程</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/xuguozheng110/article/details/104043039">netopeer2 + sysrepo研究总结</a></p><p><a href="https://blog.csdn.net/qq_27923047/article/details/108069409">sysrepo简单使用</a></p><p><a href="https://blog.csdn.net/m0_47413019/article/details/105867406">第三章 sysrepo-plugind源码分析</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sysrepo&quot;&gt;&lt;a href=&quot;#sysrepo&quot; class=&quot;headerlink&quot; title=&quot;sysrepo&quot;&gt;&lt;/a&gt;sysrepo&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;sysrepo - 1.4.2 笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-sysrepo-概述&quot;&gt;&lt;a href=&quot;#1-sysrepo-概述&quot; class=&quot;headerlink&quot; title=&quot;1. sysrepo 概述&quot;&gt;&lt;/a&gt;1. sysrepo 概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Sysrepo&lt;/code&gt; 是 &lt;code&gt;Linux/Unix&lt;/code&gt; 系统下一个基于 &lt;code&gt;YANG&lt;/code&gt; 模型的配置和操作数据库，为应用程序提供统一的操作数据的接口。应用程序使用 &lt;code&gt;YANG&lt;/code&gt; 模型来建模，通过利用 &lt;code&gt;YANG&lt;/code&gt; 模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件的一种数据管理方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/categories/Netconf/"/>
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>netopper2 note</title>
    <link href="http://miaopei.github.io/2020/09/22/Netconf/sysrepo-netconf-node/"/>
    <id>http://miaopei.github.io/2020/09/22/Netconf/sysrepo-netconf-node/</id>
    <published>2020-09-22T11:50:28.000Z</published>
    <updated>2024-06-11T05:35:03.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netopper2-安装"><a href="#Netopper2-安装" class="headerlink" title="Netopper2 安装"></a>Netopper2 安装</h1><ul><li>环境 centos</li></ul><h2 id="1-基础软件安装"><a href="#1-基础软件安装" class="headerlink" title="1. 基础软件安装"></a>1. 基础软件安装</h2><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y groupinstall <span class="string">&#x27;Development Tools&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install pcre-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install cmake</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install doxygen</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install valgrind</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install zlib-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install openssl-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install dnssec-trigger</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install autoconf libtool</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install libev-devel</span></span><br></pre></td></tr></table></figure><h2 id="2-Netopeer2-Requirements"><a href="#2-Netopeer2-Requirements" class="headerlink" title="2. Netopeer2 Requirements"></a>2. Netopeer2 Requirements</h2><ul><li><a href="https://github.com/CESNET/libyang">libyang</a></li><li><a href="https://github.com/CESNET/libnetconf2">libnetconf2</a></li><li><a href="https://github.com/sysrepo/sysrepo">sysrepo</a></li></ul><h3 id="2-1-安装-libyang"><a href="#2-1-安装-libyang" class="headerlink" title="2.1 安装 libyang"></a>2.1 安装 libyang</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/libyang.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libyang; <span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure><p><strong>Documentation：</strong></p><p>可以使用 Doxygen 工具直接从源代码生成库文档:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make doc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">google-chrome ../doc/html/index.html</span></span><br></pre></td></tr></table></figure><p><strong>更改扩展插件目录：</strong></p><p>至于 YANG 扩展，libyang 允许加载扩展插件。默认情况下，存储插件的目录是 LIBDIR&#x2F;libyang。要更改它，使用下面的 cmake 选项，该选项的值指定所需的目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DPLUGINS_DIR:PATH=`<span class="built_in">pwd</span>`<span class="string">&quot;/src/extensions/&quot;</span> ..</span></span><br></pre></td></tr></table></figure><p>目录路径也可以通过环境变量文件改变运行时，例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=`<span class="built_in">pwd</span>`/my/relative/path yanglint</span></span><br></pre></td></tr></table></figure><p><strong>yanglint：</strong></p><p>Libyang 项目包括一个名为 yanglint (1)的功能丰富的工具，用于验证和转换模式和 YANG 模型数据。源代码位于&#x2F;tools&#x2F;lint，可用于探索应用程序如何使用 libyang 库。Yanglint (1)二进制文件及其手册页与库本身一起安装。</p><p>There is also <a href="https://github.com/CESNET/libyang/blob/master/tools/lint/examples/README.md">README</a> describing some examples of using <code>yanglint</code>.</p><p>还有自述文件，描述了使用阳光棉的一些例子。</p><p>Libyang 通过插件机制支持 YANG 扩展。一些插件(针对 NACM 或 Metadata)可以开箱即用，并与 libyang 一起安装。但是，如果没有安装 libyang，而是从构建目录中使用 yanglint (1) ，那么这些插件就不可用。有两种选择:</p><ol><li>安装 libyang</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure><ol><li>设置环境变量 <code>LIBYANG_EXTENSIONS_PLUGINS_DIR</code> 包含路径到构建的扩展插件(从构建目录 <code>./src/extensions</code> )</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=<span class="string">&quot;`pwd`/src/extensions&quot;</span> ./yanglint</span></span><br></pre></td></tr></table></figure><h3 id="2-2-安装-libnetconf2"><a href="#2-2-安装-libnetconf2" class="headerlink" title="2.2 安装 libnetconf2"></a>2.2 安装 libnetconf2</h3><p>依赖：</p><ul><li><a href="https://github.com/CESNET/libyang">libyang</a></li><li><a href="https://git.libssh.org/projects/libssh.git">libssh</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> http://git.libssh.org/projects/libssh.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libssh; <span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://git.libssh.org/projects/libssh.git/snapshot/libssh-0.7.5.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -xzf libssh-0.7.5.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> libssh-0.7.5/build &amp;&amp; <span class="built_in">cd</span> libssh-0.7.5/build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local .. &amp;&amp; make &amp;&amp; sudo make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ../..</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git://git.cryptomilk.org/projects/cmocka.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> cmocka</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout tags/cmocka-1.0.1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/libnetconf2.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make doc</span> </span><br></pre></td></tr></table></figure><h3 id="2-3-安装-sysrepo"><a href="#2-3-安装-sysrepo" class="headerlink" title="2.3 安装 sysrepo"></a>2.3 安装 sysrepo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/sysrepo/sysrepo.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DCMAKE_BUILD_TYPE=Debug ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make doc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">google-chrome ../doc/html/index.html</span></span><br></pre></td></tr></table></figure><h2 id="3-netopper2-安装"><a href="#3-netopper2-安装" class="headerlink" title="3. netopper2 安装"></a>3. netopper2 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/Netopeer2.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> Netopeer2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><h1 id="libyang-简介"><a href="#libyang-简介" class="headerlink" title="libyang 简介"></a>libyang 简介</h1><blockquote><p><a href="https://netopeer.liberouter.org/doc/libyang/master/index.html">libyang doc</a></p></blockquote><h2 id="1-About"><a href="#1-About" class="headerlink" title="1. About"></a>1. About</h2><p>libyang is a library implementing processing of the YANG schemas and data modeled by the YANG language. The library is implemented in C for GNU&#x2F;Linux and provides C API.</p><p>Libyang 是一个用 YANG 语言实现 YANG 模式和数据处理的库。该库是用 c 语言为 GNU&#x2F;Linux 实现的，并提供了 c API。</p><h2 id="2-Main-Features"><a href="#2-Main-Features" class="headerlink" title="2. Main Features"></a>2. Main Features</h2><ul><li>YANG 格式模式的解析(和验证)。</li><li>YIN 格式模式的解析(和验证)。</li><li>解析、验证和打印 XML 格式的实例数据。</li><li>解析、验证和打印 JSON 格式的实例数据 (RFC 7951)。</li><li>操作实例数据。</li><li>支持实例数据中的默认值 (RFC 6243)。</li><li>支持 YANG 扩展和用户类型。</li><li>支持 YANG 元数据 (RFC 7952)。</li><li>yanglint - 特征丰富的 YANG 工具</li></ul><p>当前的实现包括 YANG 1.0 (RFC 6020) 和 YANG 1.1 (RFC 7950)。</p><h2 id="3-Extra-side-effect-Features"><a href="#3-Extra-side-effect-Features" class="headerlink" title="3. Extra (side-effect) Features"></a>3. Extra (side-effect) Features</h2><ul><li>XML 解析器。</li><li>优化字符串存储 (字典)。</li></ul><h1 id="libnetconf2-简介"><a href="#libnetconf2-简介" class="headerlink" title="libnetconf2 简介"></a>libnetconf2 简介</h1><h2 id="1-About-1"><a href="#1-About-1" class="headerlink" title="1. About"></a>1. About</h2><p>libnetconf2 is a NETCONF library in C handling NETCONF authentication and all NETCONF RPC communication both server and client-side. Note that NETCONF datastore implementation is not a part of this library. The library supports both NETCONF 1.0 (<a href="https://tools.ietf.org/html/rfc4741">RFC 4741</a>) as well as NETCONF 1.1 (<a href="https://tools.ietf.org/html/rfc6241">RFC 6241</a>).</p><p>libnetconf2 是一个 C 语言的 NETCONF 库，处理 NETCONF 认证和所有 NETCONF RPC 通信服务器和客户端。注意，NETCONF 数据存储实现不是这个库的一部分。这个库同时支持 NETCONF 1.0 (RFC 4741) 和 NETCONF 1.1 (RFC 6241)。</p><h2 id="2-Main-Features-1"><a href="#2-Main-Features-1" class="headerlink" title="2. Main Features"></a>2. Main Features</h2><ul><li>使用 libssh 创建 SSH (RFC 4742、RFC 6242)，或使用 OpenSSL、经过身份验证的 NETCONF 会话创建 TLS (RFC 7589)。</li><li>使用预先建立的传输协议创建 NETCONF 会话(例如，使用这种机制可以通过 sshd(8) 进行隧道通信)。</li><li>创建 NETCONF 呼叫家庭会话(RFC 8071)。</li><li>创建、发送、接收和回复 RPC (RFC 4741，RFC 6241)。</li><li>创建、发送和接收 NETCONF 事件通知(RFC 5277)</li></ul><h1 id="libyang-学习总结"><a href="#libyang-学习总结" class="headerlink" title="libyang 学习总结"></a>libyang 学习总结</h1><h2 id="YANG-模型"><a href="#YANG-模型" class="headerlink" title="YANG 模型"></a>YANG 模型</h2><p><code>YANG</code>是最初设计用于为<code>NETCONF</code>协议建模的语言。 <code>YANG</code>模块定义了可用于基于<code>NETCONF</code>的操作（包括配置，状态数据，<code>RPC</code>和通知）的数据层次结构。这允许在<code>NETCONF</code>客户端和服务器之间发送的所有数据的完整描述。虽然不在本规范的范围之内，但是也可以使用除<code>NETCONF</code>以外的协议。</p><p><code>YANG</code>将数据的分层组织模型化为一个树，其中每个节点都有一个名称，或者一个值或一组子节点。<code>YANG</code>提供了对节点的清晰简洁的描述，以及这些节点之间的交互。</p><p><code>YANG</code>将数据模型组织成模块和子模块。模块可以从其他外部模块导入定义，并可以包含子模块的定义。可以增加层次结构，允许一个模块将数据节点添加到另一个模块中定义的层次结构中。这种增加可以是有条件的，只有在满足某些条件的情况下才会出现新的节点。</p><p>一个<strong>模块</strong>包含三种类型的语句：</p><ul><li><p>模块头(<code>module header</code>)语句，</p></li><li><p>“修订”(<code>revision</code>)语句</p></li><li><p>定义(<code>definition</code>)语句。</p><p>  模块头部语句<strong>描述模块并提供关于模块本身的信息</strong>，“修订”语句提供<strong>关于模块历史的信息</strong>，定义语句是<strong>定义数据模型的模块的主体</strong>。</p></li></ul><p>**数据模型(<code>data model</code>)**：</p><ul><li>数据模型描述如何表示和访问数据。</li></ul><p>**数据节点(<code>data node</code>)**：</p><ul><li>模式树中可以在数据树中实例化的节点。<code>container</code>，<code>leaf</code>，<code>leaf-list</code>，<code>list</code>，<code>anydata</code>和<code>anyxml</code>之一。</li></ul><p>**数据树(<code>data tree</code>)**：</p><ul><li>用<code>YANG</code>建模的任何数据的实例化树，例如配置数据，状态数据，组合配置和状态数据，<code>RPC</code>或操作输入，<code>RPC</code>或操作输出或通知。</li></ul><p>**叶节点(<code>leaf</code>)**：</p><ul><li>数据树中至多存在一个实例的数据节点。叶子有一个值，但没有子节点。</li></ul><p>**叶列表(<code>leaf-list</code>)**：</p><ul><li>与叶节点类似，但定义了一组唯一可识别的节点，而不是单个节点。每个节点都有一个值，但没有子节点。</li></ul><p>**<code>RPC</code>操作(<code>RPC operation</code>)**：</p><ul><li>特定的远程过程调用。</li></ul><p>**模式节点(<code>schema node</code>)**：</p><ul><li>模式树中的节点。 <code>action</code>，<code>container</code>，<code>leaf</code>，<code>leaf-list</code>，<code>list</code>，<code>choice</code>，<code>case</code>，<code>rpc</code>，<code>input</code>，<code>output</code>，<code>notification</code>，<code>anydata</code>和<code>anyxml</code>中的一个。</li></ul><p>**模式树(<code>schema tree</code>)**：</p><ul><li>模块中指定的定义层次结构。</li></ul><h3 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h3><p>叶节点（Leaf Nodes）</p><p>“<code>leaf</code>”语句用于在模式树中定义叶节点。 它需要一个参数，它是一个标识符，后面是一个包含详细叶子信息的子状态块。一个<code>leaf node</code>包含且只包含一个<code>value</code>，可以是数字或是字符串，具体是什么，看关键字”type”后面跟什么。<code>leaf node</code>下面不能挂子节点。如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line">    <span class="string">leaf</span> <span class="string">host-name</span> &#123;</span><br><span class="line">    <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">    <span class="string">description</span> <span class="string">&quot;Hostname for this system&quot;</span><span class="string">;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line"><span class="string">&lt;host-name&gt;my.example.com&lt;/host-name&gt;</span></span><br></pre></td></tr></table></figure><p>叶列表节点（Leaf-List Nodes）</p><p>可以认为Leaf-List Nodes表示的是一个“数组”，“数组”中的元素的值的type必须保持一致，可以有一系列同类型的值，而且不能重复。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line"><span class="string">leaf-list</span> <span class="string">domain-search</span> &#123;</span><br><span class="line"><span class="string">type</span> <span class="string">string;</span></span><br><span class="line"><span class="string">description</span> <span class="string">&quot;List of domain names to search&quot;</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line">    <span class="string">&lt;domain-search&gt;high.example.com&lt;/domain-search&gt;</span></span><br><span class="line">    <span class="string">&lt;domain-search&gt;low.example.com&lt;/domain-search&gt;</span></span><br><span class="line">    <span class="string">&lt;domain-search&gt;everywhere.example.com&lt;/domain-search&gt;</span></span><br></pre></td></tr></table></figure><p>容器节点（Container Nodes）</p><p>一个容器用于分组子树中的相关节点。 一个容器只有子节点，没有值。 容器可以包含任何类型的任何数量的子节点（叶子，列表，容器，叶子列表，动作和通知）。只能装东西，本身不具有意义。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line">    <span class="string">container</span> <span class="string">system</span> &#123;</span><br><span class="line">        <span class="string">container</span> <span class="string">login</span> &#123;</span><br><span class="line">            <span class="string">leaf</span> <span class="string">message</span> &#123;</span><br><span class="line">            <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">            <span class="string">description</span></span><br><span class="line">            <span class="string">&quot;Message given at start of login session&quot;</span><span class="string">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line">    <span class="string">&lt;system&gt;</span></span><br><span class="line">        <span class="string">&lt;login&gt;</span></span><br><span class="line">        <span class="string">&lt;message&gt;Good</span> <span class="string">morning&lt;/message&gt;</span></span><br><span class="line">        <span class="string">&lt;/login&gt;</span></span><br><span class="line">    <span class="string">&lt;/system&gt;</span></span><br></pre></td></tr></table></figure><p>列表节点（List Nodes)</p><p>列表定义了一系列列表条目。每个条目就像一个容器，如果它定义了任何关键的叶子（指明一个叶子为 <code>key</code>），它就被其关键叶子的值唯一标识。列表可以定义多个关键叶子，并且可以包含任何类型的任何数量的子节点（包括树叶，列表，容器等）。实例化的时候，<code>key</code>的值(也就是”name”的值)是必须不同的，其它的值(full-name&#x2F;class)没有这个要求。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line">    <span class="string">list</span> <span class="string">user</span> &#123;</span><br><span class="line">        <span class="string">key</span> <span class="string">&quot;name&quot;</span><span class="string">;</span></span><br><span class="line">        <span class="string">leaf</span> <span class="string">name</span> &#123;</span><br><span class="line">        <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">leaf</span> <span class="string">full-name</span> &#123;</span><br><span class="line">        <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">leaf</span> <span class="string">class</span> &#123;</span><br><span class="line">        <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line">    <span class="string">&lt;user&gt;</span></span><br><span class="line">        <span class="string">&lt;name&gt;glocks&lt;/name&gt;</span></span><br><span class="line">        <span class="string">&lt;full-name&gt;Goldie</span> <span class="string">Locks&lt;/full-name&gt;</span></span><br><span class="line">        <span class="string">&lt;class&gt;intruder&lt;/class&gt;</span></span><br><span class="line">    <span class="string">&lt;/user&gt;</span></span><br><span class="line">    <span class="string">&lt;user&gt;</span></span><br><span class="line">        <span class="string">&lt;name&gt;snowey&lt;/name&gt;</span></span><br><span class="line">        <span class="string">&lt;full-name&gt;Snow</span> <span class="string">White&lt;/full-name&gt;</span></span><br><span class="line">        <span class="string">&lt;class&gt;free-loader&lt;/class&gt;</span></span><br><span class="line">    <span class="string">&lt;/user&gt;</span></span><br><span class="line">    <span class="string">&lt;user&gt;</span></span><br><span class="line">        <span class="string">&lt;name&gt;rzell&lt;/name&gt;</span></span><br><span class="line">        <span class="string">&lt;full-name&gt;Rapun</span> <span class="string">Zell&lt;/full-name&gt;</span></span><br><span class="line">        <span class="string">&lt;class&gt;tower&lt;/class&gt;</span></span><br><span class="line">    <span class="string">&lt;/user&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Libyang"><a href="#Libyang" class="headerlink" title="Libyang"></a>Libyang</h2><p><code>libyang</code>是一个实现<code>YANG</code>模式处理的<code>library</code>和由<code>YANG</code>语言建模的数据</p><p><strong>主要特点</strong>：</p><ol><li>以 <code>YANG</code> 格式解析（和验证） <code>schema</code></li><li>以 <code>YIN</code> 格式解析（和验证） <code>schema</code></li><li>以 <code>XML</code> 格式解析，验证和打印实例数据</li><li>以 <code>JSON</code> 格式解析，验证和打印实例数据</li><li>使用实例数据进行操作</li><li>支持示例数据中的默认值</li><li>支持 <code>YANG</code> 扩展和实例类型</li><li>支持 <code>YANG</code> 元数据</li><li><code>XML</code> 解析器</li><li>优化的字符串存储（字典）</li></ol><p><strong>过程：先创建一个context，解析yang文件生成schema tree（schema tree 相当于类型定义，指定生成的数据类型），然后根据文件读入，生成对应的data tree（相当于实例化的数据）</strong></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="context（上下文）"><a href="#context（上下文）" class="headerlink" title="context（上下文）"></a>context（上下文）</h4><p>上下文概念允许调用者在具有不同 <code>YANG</code> 模式集的环境中工作，具体工作流程（代码过程）见下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ly_ctx_new</span>()                                    <span class="comment">//创建新的上下文</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**************设置搜索路径****************/</span></span><br><span class="line"><span class="built_in">ly_ctx_set_searchdir</span>()                          <span class="comment">//设置搜索路径</span></span><br><span class="line"><span class="built_in">ly_ctx_unset_searchdirs</span>()                       <span class="comment">//不设置搜索路径</span></span><br><span class="line"><span class="built_in">ly_ctx_set_disable_searchdir_cwd</span>()              <span class="comment">//设置不在当前工作路径搜索</span></span><br><span class="line"><span class="built_in">ly_ctx_set_disable_searchdir</span>()                  <span class="comment">//避免在所有上下文的搜索目录搜索</span></span><br><span class="line"><span class="built_in">ly_ctx_set_module_imp_clb</span>()                     <span class="comment">//设置自定义模块搜索回调</span></span><br><span class="line"><span class="comment">/**************设置搜索路径****************/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**************解析器函数******************/</span></span><br><span class="line"><span class="comment">//使用解析器函数 lys_parse_*（） 将 schema / tree 加入到 context 中</span></span><br><span class="line"><span class="comment">//schema的函数都有lys_的前缀，实例数据的函数有lyd_的前缀。发生于在数据解析时，schema在context中并未找到或者schema只是被导入但并未实现</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">ly_ctx_load_module</span>()                            <span class="comment">//在ctx搜索路径中找到model并将其加载到其中 </span></span><br><span class="line"><span class="built_in">ly_ctx_set_module_data_clb</span>()                    <span class="comment">//设置回调函数</span></span><br><span class="line"><span class="comment">/**************解析器函数******************/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//imported的函数可以变成implemented，但是implemented的函数不能变回imported</span></span><br><span class="line"><span class="built_in">lys_set_implemented</span>()                           <span class="comment">//将imported函数变为implemented</span></span><br><span class="line"><span class="built_in">lys_set_allimplemented</span>()                        <span class="comment">//将所有imported函数变为implemented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************module********************/</span></span><br><span class="line"><span class="built_in">ly_ctx_get_module</span>()                             <span class="comment">//获得确切的model</span></span><br><span class="line"><span class="built_in">ly_ctx_get_submodule</span>()                          <span class="comment">//获得确切的submodel</span></span><br><span class="line"><span class="built_in">ly_ctx_get_module_iter</span>()                        <span class="comment">//对context中所有model进行某操作的迭代</span></span><br><span class="line"><span class="built_in">ly_ctx_info</span>()                                   <span class="comment">//获取有关context中模式的复杂信息</span></span><br><span class="line"><span class="built_in">ly_ctx_find_path</span>()                              <span class="comment">//获取上下文中模块中定义的特定节点</span></span><br><span class="line"><span class="built_in">ly_ctx_get_node</span>()                               <span class="comment">//获取上下文中模块中定义的特定节点</span></span><br><span class="line"><span class="built_in">ly_ctx_remove_module</span>()                          <span class="comment">//删除context保存的模块</span></span><br><span class="line"><span class="built_in">ly_ctx_disable</span>()                                <span class="comment">//禁用某模块</span></span><br><span class="line"><span class="built_in">ly_ctx_clean</span>()                                  <span class="comment">//清除所有已加载model的context</span></span><br><span class="line"><span class="built_in">ly_ctx_destroy</span>()                                <span class="comment">//删除上下文</span></span><br><span class="line"><span class="comment">/**************module********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********context dictionary*************/</span></span><br><span class="line"><span class="built_in">lydict_insert</span>()                                 <span class="comment">//将字符串插入字典</span></span><br><span class="line"><span class="built_in">lydict_remove</span>()                                 <span class="comment">//将字符串从字典中删除</span></span><br><span class="line"><span class="comment">/*********context dictionary*************/</span></span><br></pre></td></tr></table></figure><p>对于<code>context</code>，第一次请求<code>module</code>的最新版本时，将正确搜索并加载该<code>module</code>。但是，当第二次请求此<code>module</code>（没有修订）时，将返回先前找到的<code>module</code>。这样做的好处是不会反复搜索<code>module</code>，但缺点是如果稍后可以使用<code>module</code>的后续版本，则此<code>context</code>不会使用它。</p><p><code>context</code> 在内部保存所有<code>model</code>及其 <code>submodel</code></p><p><code>context</code> 包括更有效地存储字符串的字典。大多数字符串在 <code>schema</code> 和 <code>data tree</code> 经常重复。因此，<code>libyang</code> 不会在每次出现时分配这些字符串，而是将它们存储为字典中的记录。</p><h4 id="schema（架构）"><a href="#schema（架构）" class="headerlink" title="schema（架构）"></a>schema（架构）</h4><p><code>schema</code>是 <code>YANG</code> 数据模型在 <code>libyang</code> 中的内部表示，每个 <code>schema</code> 都与其 <code>context</code> 连接，并使用解析器函数加载，因此无法以编程方式创建（更改） <code>schema</code> 。在 <code>libyang</code> 中，<code>schema</code> 仅用于访问数据模型定义模式树节点能够保存调用者应用程序使用的私有对象（通过指向结构，函数，变量等的指针）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lys_set_private</span>()                <span class="comment">//将私有对象分配给特定节点</span></span><br></pre></td></tr></table></figure><p><code>schema</code> 解析器允许从特定格式读取 <code>schema</code>。<code>libyang</code> 支持以下架构格式：<code>YANG</code>，<code>YIN</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以lys_features_为前缀的函数组用于访问和操作模式的功能。</span></span><br><span class="line"><span class="built_in">lys_features_list</span>()              <span class="comment">//提供特定schema及其子schema中定义的所有功能的列表，或者提供有关所有功能状态的信息</span></span><br><span class="line"><span class="built_in">lys_features_state</span>()             <span class="comment">//获取一个特定特征的状态</span></span><br><span class="line"><span class="built_in">lys_features_</span>(dis)<span class="built_in">enable</span>()       <span class="comment">//启用/禁用特定功能</span></span><br></pre></td></tr></table></figure><h4 id="plugins（插件）"><a href="#plugins（插件）" class="headerlink" title="plugins（插件）"></a>plugins（插件）</h4><p><code>plugins</code> 形式支持扩展和用户类型。无论何时创建上下文，都会从 <code>plugins</code> 目录 <code>LIBDIR/libyang/</code> 加载它们。扩展 <code>plugins</code> 目录路径（默认 <code>LIBDIR/libyang/extensions/</code>）可以通过<code>LIBYANG_EXTENSIONS_PLUGINS_DIR</code> 环境变量更改，类似地通过用户类型目录（默认<code>LIBDIR/libyang/user_types/</code>）更改 <code>LIBYANG_USER_TYPES_PLUGINS_DIR</code>。请注意，不会删除不可用的<code>plugins</code>，只会加载任何新 <code>plugins</code>。另请注意，新 <code>plugins</code> 的可用性不会影响上下文中的当前 <code>schema</code>，它们仅应用于新解析的 <code>schema</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展 plugins 目录路径</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=LIBDIR/libyang/extensions/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户类型目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_USER_TYPES_PLUGINS_DIR=LIBDIR/libyang/user_types/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ly_load_plugins</span>()                <span class="comment">//手动刷新plugins列表</span></span><br><span class="line"><span class="built_in">ly_clean_plugins</span>()               <span class="comment">//清空plugins列表</span></span><br></pre></td></tr></table></figure><h4 id="Printing-Schemas（打印模式）"><a href="#Printing-Schemas（打印模式）" class="headerlink" title="Printing Schemas（打印模式）"></a>Printing Schemas（打印模式）</h4><p><code>schema printing</code> 允许以特定格式序列化模式 <code>schema</code> 的内部表示 ，包括：<code>YING</code>，<code>YANG</code>，<code>Tree</code></p><p>每个节点的模块的简单树结构被打印为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;status&gt; &lt;flags&gt; &lt;name&gt; &lt;opts&gt; &lt;type&gt; &lt;if-features&gt;</span><br><span class="line">&lt;status&gt;</span><br><span class="line">+ 对于当前</span><br><span class="line">x 不推荐使用</span><br><span class="line">o 过时的</span><br><span class="line">&lt;flags&gt;</span><br><span class="line">rw 用于配置数据</span><br><span class="line">    ro 用于状态数据</span><br><span class="line">    -x 对于RPC</span><br><span class="line">    -n 通知</span><br><span class="line">&lt;name&gt;</span><br><span class="line">    (&lt;name&gt;) 表示该节点是一个选择节点</span><br><span class="line">    :(&lt;name&gt;) 表示节点是案例节点</span><br><span class="line">    如果节点从另一个模块扩充到树中，则使用模块名称打印&lt;module-name&gt;:&lt;name&gt;</span><br><span class="line">&lt;opts&gt;</span><br><span class="line">    ? 对于可选的叶子或选择</span><br><span class="line">    ! 对于存在容器</span><br><span class="line">    * 对于叶子列表或列表</span><br><span class="line">    [&lt;keys&gt;] 对于列表的键</span><br><span class="line">&lt;type&gt;</span><br><span class="line">    如果定义了默认值，则将其打印在尖括号内 &lt;default-value&gt;</span><br><span class="line">    如果类型是leafref，则类型打印为 - &gt; TARGET`</span><br><span class="line">&lt;if-features&gt;</span><br><span class="line">是此节点所依赖的功能列表，打印在大括号和问号内 &#123;...&#125;?</span><br></pre></td></tr></table></figure><h4 id="数据实例"><a href="#数据实例" class="headerlink" title="数据实例"></a>数据实例</h4><p><code>data tree</code> 中的所有 <code>data</code> 节点都和他们的 <code>schema</code> 节点相连</p><p>与 <code>schema</code> 解析器相反，如果根据 libyang 上下文中的 <code>schema</code>，这样的空数据树是有效的，则 <code>data</code> 解析器也接受空输入数据。</p><p>在创建&#x2F;插入节点时，该操作中的所有对象必须属于同一个上下文</p><p>创建数据：</p><ol><li><p>根据节点名称或其父节点逐个添加节点</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lyd_new</span>()</span><br><span class="line"><span class="built_in">lyd_new_leaf</span>()</span><br></pre></td></tr></table></figure></li><li><p>使用简单的 <code>XPath</code> 寻址</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lyd_new_path</span>()</span><br></pre></td></tr></table></figure></li></ol><h1 id="sysrepo-简介"><a href="#sysrepo-简介" class="headerlink" title="sysrepo 简介"></a>sysrepo 简介</h1><h2 id="1-sysrepo-引言"><a href="#1-sysrepo-引言" class="headerlink" title="1. sysrepo 引言"></a>1. sysrepo 引言</h2><p>Sysrepo 是一个基于 yang 的 Unix&#x2F;Linux 系统数据存储。使用 YANG 建模配置的应用程序可以使用 Sysrepo 进行管理。</p><p>申请使用 Sysrepo 的方法主要有两种。直接方法包括在需要配置数据时从应用程序本身调用 Sysrepo 函数，或者执行特定的回调以对配置更改做出反应。还可以实现一个独立的守护进程，将 Sysrepo 调用转换为应用程序特定的操作。对于现有的应用程序，这种间接方法通常比较容易使用，因为这样就不需要修改它们自己来利用 Sysrepo 数据存储，而代价是需要一个额外的中间进程(守护进程)。如果有几个这样的守护进程，它们可以作为插件编写，然后由一个进程管理。</p><img data-src="/2020/09/22/Netconf/sysrepo-netconf-node/sr_apps.png" class="" title="Sysrepo application approaches"><p>Sysrepo 是用于 Unix&#x2F;Linux 应用程序的基于 yang 的配置和操作状态数据存储。</p><p>Sysrepo是一个基于YANG模型的配置和操作数据库，为应用程序提供一致的操作数据的接口，解决了配置读写困难的问题。应用程序使用YANG模型来建模，这样就可以利用YANG模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件了。</p><p>目前，应用程序可以使用 sysrepo Client Library 的 c 语言 API 访问数据存储中的配置，但是对其他编程语言的支持也计划在以后使用(因为 sysrepo 使用 Google 协议缓冲作为数据存储和客户端库之间的接口，为任何支持 GPB 的编程语言编写本地客户端库是可能的)。</p><p>Sysrepo 可以很容易地与管理代理(如 NETCONF 或 RESTCONF 服务器)集成，使用应用程序用于访问其配置的相同的客户端库 API。到目前为止，sysrepo 已经与 Netopeer 2 NETCONF 服务器集成。这意味着使用 sysrepo 存储其配置的应用程序可以自动受益于通过 NETCONF 进行控制的能力。</p><img data-src="/2020/09/22/Netconf/sysrepo-netconf-node/high_level_architecture.png" class="" title="high_level_architecture"><p>SYSREPO数据库它提供了以下特性:</p><ul><li>模型配置文件和状态数据的集中存储</li><li>应用程序可以通过XPATH访问配置</li><li>支持启动、运行和临时数据存储</li><li>支持事务，符合ACID</li><li>根据YANG模型，进行数据一致性和约束的检查</li><li>没有单一故障点，应用程序不需要运行任何其他进程来访问其配置</li></ul><p>sysrepo 实际只是保存配置，并调用回调函数这两件事。</p><h2 id="2-命令行工具"><a href="#2-命令行工具" class="headerlink" title="2. 命令行工具"></a>2. 命令行工具</h2><p>有一些二进制文件是严格可选的，因为它们只使用Sysrepo API。但是，它们对于一些常见任务可能很有用，通过包含它们，每个用户不必从头开始编写它们。</p><h3 id="2-1-sysrepo-plugind"><a href="#2-1-sysrepo-plugind" class="headerlink" title="2.1 sysrepo-plugind"></a>2.1 sysrepo-plugind</h3><p>这个应用程序是一个简单的守护进程，它将所有可用的 Sysrepo 插件分组到一个单独的进程中。这个守护进程从插件路径目录加载插件，并支持一些选项， <code>--verbosity</code> 和 <code>--debug</code>，以避免进入守护进程模式，并保持将所有消息打印到 stderr。</p><p>Plugin 是一个共享对象，它必须公开两个函数: <code>sr_plugin_init_cb()</code> 和 <code>sr_plugin_cleanup_cb()</code>，这两个函数分别在 sysrepo-plugind 的开始和结束时被调用。初始化函数必须执行所有运行时任务，因为守护进程不会调用其他函数。它通常包括创建各种订阅，然后自己处理事件。清理通常会停止这些订阅。</p><p>插件路径，这是存储插件的唯一途径。默认路径可以在编译过程中修改(<code>PLUGINS_PATH</code> 选项) ，但是如果设置了 <code>$SRPD_PLUGINS_PATH</code> 环境变量，则总是会覆盖这个默认路径。</p><h3 id="2-2-sysrepoctl"><a href="#2-2-sysrepoctl" class="headerlink" title="2.2 sysrepoctl"></a>2.2 sysrepoctl</h3><p>它是一个实用工具，可以更改模式(模块)。具体来说，它可以列出、安装、卸载或更新它们。此外，还可以更改模块的特性、重播支持和权限。重要的是要记住哪些操作是立即执行的，哪些操作是延期的(模式中的详细信息)。</p><p><strong>-l，–list</strong></p><p>所有当前安装的模块都列在一个简明的表格中，其中包含有关它们的基本信息。还有关于任何准备好的更改的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --list</span></span><br></pre></td></tr></table></figure><p><strong>-i，–install &lt;path&gt;</strong></p><p>YANG 模块的安装只需要指定它们的路径(YANG 或者 YIN 格式)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install ~/Documents/modules/ietf-interfaces.yang</span></span><br></pre></td></tr></table></figure><p><strong>-u，–uninstall &lt;module&gt;</strong></p><p>要删除 YANG 模块，必须指定它的名称(而不是文件名)。所有可以移除的已安装模块都是通过 <code>--list</code> 打印的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --uninstall ietf-interfaces</span></span><br></pre></td></tr></table></figure><p><strong>-c，–change &lt;module&gt;</strong></p><p>已安装的模块可以通过多种方式进行更改，可以选择性地组合成一个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --(<span class="built_in">disable</span>|<span class="built_in">enable</span>)-feature</span></span><br></pre></td></tr></table></figure><p>然后，它们的重播支持(存储接收到的通知)可以被打开或关闭。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --replay on</span></span><br></pre></td></tr></table></figure><p>最后，可以调整文件系统权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --owner netconf --group netconf --permissions 660</span></span><br></pre></td></tr></table></figure><p><strong>-U，–update &lt;path&gt;</strong></p><p>已安装的 YANG 模块可以更新为更新的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --update ~/Documents/modules/ietf-netconf@2013-09-29.yang</span></span><br></pre></td></tr></table></figure><p><strong>-C，–connection-count</strong></p><p>获取当前连接的客户端的数量。可用于检查是否可以立即应用某些架构更改(如果没有连接)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --connection-count</span></span><br></pre></td></tr></table></figure><h3 id="2-3-sysrepocfg"><a href="#2-3-sysrepocfg" class="headerlink" title="2.3 sysrepocfg"></a>2.3 sysrepocfg</h3><p>这个二进制文件允许以多种方式处理配置，比如导入、导出、编辑和替换(从文件或数据存储中复制)。还可以发送 <code>rpc/action</code> 或通知。</p><p>所有操作都在 <code>--datastore</code> (默认运行、启动或操作)上执行，或者只在特定的 <code>--module</code> 上执行，并以支持的 <code>--format</code> (默认 xml、 json 或 lyb)处理数据。</p><p><strong>-I， –import[&#x3D;&lt;file-path&gt;]</strong></p><p>为了导入配置，通常会提供一个文件。它的格式将根据扩展自动检测。如果不适用(或者从 STDIN 读取数据) ，可以手动确定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=~/Documents/data/running.xml</span></span><br></pre></td></tr></table></figure><p>还可以导入模块的启动配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=~/Documents/data/ietf-interfaces_startup.json --datastore startup --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><p><strong>-X，–export[&#x3D;&lt;file-path&gt;]</strong></p><p>可以将导出的配置打印到文件中，也可以直接打印到 STDOUT。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span> --datastore operational</span></span><br></pre></td></tr></table></figure><p>此外，只能检索配置的特定部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span>=ietf-interfaces_running.lyb --format lyb --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><p>或者 XPath 选择。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span> --xpath /ietf-interfaces:interfaces/interface[name=<span class="string">&#x27;eth0&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>-E，–edit[&#x3D;&lt;file-path&gt;&#x2F;&lt;editor&gt;]</strong></p><p>可以在文件中或使用任意文本编辑器提供要合并的数据(作为编辑应用)。另外，在更改运行的数据时，可以锁定数据存储。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=candidate.xml --datastore candidate</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --lock</span></span><br></pre></td></tr></table></figure><p><strong>-R，–rpc[&#x3D;&lt;file-path&gt;&#x2F;&lt;editor&gt;]</strong></p><p>也可以从文件或使用编辑器发送 RPC 或操作。任何输出都打印到 STDOUT。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p><strong>-N，–notification[&#x3D;&lt;file-path&gt;&#x2F;&lt;editor&gt;]</strong></p><p>以类似的方式执行发送通知。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --notification=notif.xml</span></span><br></pre></td></tr></table></figure><p><strong>-C，–copy-from &lt;file-path&gt;&#x2F;&lt;source-datastore&gt;</strong></p><p>此操作可以用文件或其他数据存储的内容替换模块或数据存储数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --copy-from=ietf-interfaces_startup.xml --module ietf-interfaces --datastore startup</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --copy-from=candidate</span></span><br></pre></td></tr></table></figure><p>第二个命令实际上是 NETCONF <code>&lt;commit&gt;</code> ，因为它将候选数据存储复制到默认运行的数据存储中。</p><h2 id="3-插件示例"><a href="#3-插件示例" class="headerlink" title="3. 插件示例"></a>3. 插件示例</h2><p>这部分教你如何编写一个简单的 YANG 模块，然后让 Sysrepo 以插件或独立守护程序的形式处理数据。在继续之前，最好至少对 Sysrepo 有一个基本的了解。</p><h3 id="3-1-简单的-YANG-模块"><a href="#3-1-简单的-YANG-模块" class="headerlink" title="3.1 简单的 YANG 模块"></a>3.1 简单的 YANG 模块</h3><p>对于任何你想用 Sysrepo 管理的设备，你都需要一个设备的 YANG 模块。该语言非常丰富，几乎可以对任何系统进行描述。例如，一个烤箱将完全由 Sysrepo 管理。将介绍 YANG 的所有基本部分，即配置数据、状态数据、 rpc 和通知。</p><p>为了简化事情，我们的烤箱是一个便宜的型号，只有一个开关和滑块来设置温度。但是，它可以提供内部实际温度的信息，并且当内部温度达到设定温度时通知厨师。此外，生的食物可以预先准备好，如果有提示，烤箱可以自动将食物放入或取出。这样我们就得到了 YANG 模型:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">module oven &#123;</span><br><span class="line">    namespace &quot;urn:sysrepo:oven&quot;;</span><br><span class="line">    prefix ov;</span><br><span class="line">    revision 2018-01-19 &#123;</span><br><span class="line">        description &quot;Initial revision.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    typedef oven-temperature &#123;</span><br><span class="line">        description &quot;Temperature range that is accepted by the oven.&quot;;</span><br><span class="line">        type uint8 &#123;</span><br><span class="line">            range &quot;0..250&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container oven &#123;</span><br><span class="line">        description &quot;Configuration container of the oven.&quot;;</span><br><span class="line">        leaf turned-on &#123;</span><br><span class="line">            description &quot;Main switch determining whether the oven is on or off.&quot;;</span><br><span class="line">            type boolean;</span><br><span class="line">            default false;</span><br><span class="line">        &#125;</span><br><span class="line">        leaf temperature &#123;</span><br><span class="line">            description &quot;Slider for configuring the desired temperature.&quot;;</span><br><span class="line">            type oven-temperature;</span><br><span class="line">            default 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container oven-state &#123;</span><br><span class="line">        description &quot;State data container of the oven.&quot;;</span><br><span class="line">        config false;</span><br><span class="line">        leaf temperature &#123;</span><br><span class="line">            description &quot;Actual temperature inside the oven.&quot;;</span><br><span class="line">            type oven-temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        leaf food-inside &#123;</span><br><span class="line">            description &quot;Informs whether the food is inside the oven or not.&quot;;</span><br><span class="line">            type boolean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rpc insert-food &#123;</span><br><span class="line">        description &quot;Operation to order the oven to put the prepared food inside.&quot;;</span><br><span class="line">        input &#123;</span><br><span class="line">            leaf time &#123;</span><br><span class="line">                description &quot;Parameter determining when to perform the operation.&quot;;</span><br><span class="line">                type enumeration &#123;</span><br><span class="line">                    enum now &#123;</span><br><span class="line">                        description &quot;Put the food in the oven immediately.&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    enum on-oven-ready &#123;</span><br><span class="line">                        description</span><br><span class="line">                            &quot;Put the food in once the temperature inside</span><br><span class="line">                             the oven is at least the configured one. If it</span><br><span class="line">                             is already, the behaviour is similar to &#x27;now&#x27;.&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rpc remove-food &#123;</span><br><span class="line">        description &quot;Operation to order the oven to take the food out.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    notification oven-ready &#123;</span><br><span class="line">        description</span><br><span class="line">            &quot;Event of the configured temperature matching the actual</span><br><span class="line">             temperature inside the oven. If the configured temperature</span><br><span class="line">             is lower than the actual one, no notification is generated</span><br><span class="line">             when the oven cools down to the configured temperature.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-烤箱插件"><a href="#3-2-烤箱插件" class="headerlink" title="3.2 烤箱插件"></a>3.2 烤箱插件</h3><p>这里将一步一步地解释如何写一个合适的插件，将管理烤箱。所有代码片段都取自实际的实现。<a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__plugin__api.html">插件 API</a></p><p><strong>初始化</strong></p><p>在初始化函数中，通常必须初始化设备并创建对任何相关 YANG 节点的订阅。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">food_inside = <span class="number">0</span>;</span><br><span class="line">insert_food_on_ready = <span class="number">0</span>;</span><br><span class="line">oven_temperature = <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>首先，肯定要通知烤箱其配置参数的任何变化，这样最容易订阅整个模块。设置标志 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__subs__api.html#ggac91898627ad5aeb589e6a3993a697d14ac5b782dfbbfe74c8ff2b1642a8bb0afe">SR_SUBSCR_ENABLED</a>，以便在 sysrepo-plugind 启动时，独立于烤箱(设备)的状态，将当前存储的配置应用于设备并保持一致性。另一个标志 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__subs__api.html#ggac91898627ad5aeb589e6a3993a697d14a0530a7715e162ee90e298ce504239444">SR_SUBSCR_DONE_ONLY</a> 被使用，因此不会调用回调来验证任何挂起的更改。对于我们的示例，只要基于 YANG 限制的值有效，它就总是正确的。</p><p>还可以订阅任意的配置数据子树，但这个示例不需要这样做。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_module_change_subscribe(session, <span class="string">&quot;oven&quot;</span>, oven_config_change_cb, <span class="literal">NULL</span>, <span class="number">0</span>,</span><br><span class="line">        SR_SUBSCR_ENABLED | SR_SUBSCR_DONE_ONLY, &amp;subscription);</span><br></pre></td></tr></table></figure><p>然后，由于在 oven 模型中还有状态数据，将执行标记该插件为它们的(独占)提供者的订阅。当 Sysrepo 需要状态数据子树时，通常在客户机请求它们时调用它。</p><p>值得注意的是，使用了相同的订阅对象，因此必须指定标志 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__subs__api.html#ggac91898627ad5aeb589e6a3993a697d14a08c075b76b8299ea4b4ed0fbbcb5b9ae">SR_SUBSCR_CTX_REUSE</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_dp_get_items_subscribe(session, <span class="string">&quot;/oven:oven-state&quot;</span>, oven_state_cb, <span class="literal">NULL</span>, SR_SUBSCR_CTX_REUSE, &amp;subscription);</span><br></pre></td></tr></table></figure><p>最后，该插件还可以处理任何 RPC 调用，这些调用也需要副本。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_rpc_subscribe(session, <span class="string">&quot;/oven:insert-food&quot;</span>, oven_insert_food_cb, <span class="literal">NULL</span>, SR_SUBSCR_CTX_REUSE, &amp;subscription);</span><br><span class="line"></span><br><span class="line">rc = sr_rpc_subscribe(session, <span class="string">&quot;/oven:remove-food&quot;</span>, oven_remove_food_cb, <span class="literal">NULL</span>, SR_SUBSCR_CTX_REUSE, &amp;subscription);</span><br></pre></td></tr></table></figure><p>Sysrepo 为插件提供了能够以统一方式打印消息的宏，因此建议使用它们。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRP_LOG_DBGMSG(<span class="string">&quot;OVEN: Oven plugin initialized successfully.&quot;</span>);</span><br></pre></td></tr></table></figure><p>一般格式为 <code>SRP_LOG_(level)(MSG)</code> 。消息的严重性是由 DBG、 VRB、 WRN 或 ERR 之一编写的，而不是(级别)。在示例中，由于没有指定其他变量参数，因此使用了后缀 MSG。如果有，则省略此后缀。参数与 <code>printf ()</code>函数使用的参数相同。</p><h3 id="3-3-清除"><a href="#3-3-清除" class="headerlink" title="3.3 清除"></a>3.3 清除</h3><p>至于清理，所执行的任务差别很大，并且取决于设备。但是，总是需要适当地终止 init 函数中的订阅，这是本示例中所需的惟一工作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sr_unsubscribe(subscription);</span><br></pre></td></tr></table></figure><p>为了简化代码，subscription 被定义为一个全局变量，但是也可以使用 private_data，例如，也可以使用应用程序需要的任何附加数据来存储它。之前分配的所有其他回调都可以在需要时使用相同的机制传递附加数据。</p><h3 id="3-4-配置数据"><a href="#3-4-配置数据" class="headerlink" title="3.4 配置数据"></a>3.4 配置数据</h3><p>在示例中，它用 <code>oven_config_change_cb()</code> 订阅模块更改。这里看到的代码是实际代码的简化，但是更好地理解回调应该做什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_config_change_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">const</span> <span class="type">char</span> *module_name, <span class="type">sr_notif_event_t</span> event, <span class="type">void</span> *private_ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">sr_val_t</span> *val;</span><br><span class="line">    rc = sr_get_item(session, <span class="string">&quot;/oven:oven/temperature&quot;</span>, &amp;val);</span><br><span class="line">    <span class="keyword">if</span> (rc != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="keyword">goto</span> sr_error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//apply the temperature to the device</span></span><br><span class="line">    sr_free_val(val);</span><br><span class="line">    rc = sr_get_item(session, <span class="string">&quot;/oven:oven/turned-on&quot;</span>, &amp;val);</span><br><span class="line">    <span class="keyword">if</span> (rc != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="keyword">goto</span> sr_error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//apply the switch state to the device</span></span><br><span class="line">    sr_free_val(val);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">sr_error:</span><br><span class="line">    SRP_LOG_ERR(<span class="string">&quot;OVEN: Oven config change callback failed: %s.&quot;</span>, sr_strerror(rc));</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，可以观察到，事件变量被忽略。在我们的示例中，无论处理哪个事件，我们都执行相同的操作，由于订阅标志，它将不会是除 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__change__subs__api.html#ggaf5289764c79d867bab642997c23b355aa52e97346d4bf27ab64ad9233627ccf39">SR_EV_DONE</a> 之外的任何事件。</p><p>然后，读取并应用所有相关的数据节点。这种方法是最简单的方法，不能总是使用，但在这种情况下可以使用，因为可以重新应用更改而不会产生任何效果。更详细的机制(返回更改)是使用 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__change__subs__api.html#ga613064e7a7431a30eff2b99b87af5348">sr_get_changes_iter()</a> 和提供的会话，从而只获得特定的更改值。</p><h3 id="3-5-状态数据"><a href="#3-5-状态数据" class="headerlink" title="3.5 状态数据"></a>3.5 状态数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_state_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">const</span> <span class="type">char</span> *module_name, <span class="type">const</span> <span class="type">char</span> *path, <span class="keyword">struct</span> lyd_node **parent, <span class="type">void</span> *private_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(str, <span class="string">&quot;%u&quot;</span>, oven_temperature);</span><br><span class="line">    lyd_new_path(*parent, <span class="literal">NULL</span>, <span class="string">&quot;/oven:oven-state/temperature&quot;</span>, str, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    lyd_new_path(*parent, <span class="literal">NULL</span>, <span class="string">&quot;/oven:oven-state/food-inside&quot;</span>, food_inside ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态数据回调是自我解释的。由于订阅只针对一个有两片叶子的容器，因此路径只能有一个值。创建相应的子元素。</p><h3 id="3-6-RPC-订阅"><a href="#3-6-RPC-订阅" class="headerlink" title="3.6 RPC 订阅"></a>3.6 RPC 订阅</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_insert_food_cb</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">sr_val_t</span> *input, <span class="type">const</span> <span class="type">size_t</span> input_cnt, <span class="type">sr_val_t</span> **output, <span class="type">size_t</span> *output_cnt, <span class="type">void</span> *private_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (food_inside) &#123;</span><br><span class="line">        SRP_LOG_ERRMSG(<span class="string">&quot;OVEN: Food already in the oven.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SR_ERR_OPERATION_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(input[<span class="number">0</span>].data.enum_val, <span class="string">&quot;on-oven-ready&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (insert_food_on_ready) &#123;</span><br><span class="line">            SRP_LOG_ERRMSG(<span class="string">&quot;OVEN: Food already waiting for the oven to be ready.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> SR_ERR_OPERATION_FAILED;</span><br><span class="line">        &#125;</span><br><span class="line">        insert_food_on_ready = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    insert_food_on_ready = <span class="number">0</span>;</span><br><span class="line">    food_inside = <span class="number">1</span>;</span><br><span class="line">    SRP_LOG_DBGMSG(<span class="string">&quot;OVEN: Food put into the oven.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_remove_food_cb</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">sr_val_t</span> *input, <span class="type">const</span> <span class="type">size_t</span> input_cnt, <span class="type">sr_val_t</span> **output, <span class="type">size_t</span> *output_cnt, <span class="type">void</span> *private_ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!food_inside) &#123;</span><br><span class="line">        SRP_LOG_ERRMSG(<span class="string">&quot;OVEN: Food not in the oven.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SR_ERR_OPERATION_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line">    food_inside = <span class="number">0</span>;</span><br><span class="line">    SRP_LOG_DBGMSG(<span class="string">&quot;OVEN: Food taken out of the oven.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RPC 回调应该执行相应的 RPC。移除食物只能做到这一点。但是插入食物有一些定义的输入参数，所以它们需要被处理。同样，如果存在某些输出参数，则需要创建并返回这些参数，但这不是我们的情况。</p><h3 id="3-7-Notifications"><a href="#3-7-Notifications" class="headerlink" title="3.7 Notifications"></a>3.7 Notifications</h3><p>通知的提供者不需要订阅任何东西，只需在发生通知时生成任何通知即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_event_notif_send(sess, <span class="string">&quot;/oven:oven-ready&quot;</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>从这个例子中可以看出，这是相当简单的。此外，如果有通知的任何子节点，则需要创建它们，然后将其传递给函数。</p><h3 id="3-8-尝试一下"><a href="#3-8-尝试一下" class="headerlink" title="3.8 尝试一下"></a>3.8 尝试一下</h3><p>模型和完整的插件源可以在 <code>sysrepo/examples/plugin</code> 中找到。生成 Sysrepo 后，烤箱共享库存储在示例中，但不会自动安装。在安装和实际运行插件之前，最好仔细阅读源代码。它只是一个很小的文档化的文件，所以它不应该花费很长时间，而且人们应该了解实现的烤箱功能。此外，上面章节中所涉及的大多数信息只是对所有这些机制的基本和详细描述。</p><p>在考虑这个特定的插件之前，必须正确构建和安装 Sysrepo。完成之后，您必须首先安装模型，然后安装插件。为了安装模型，可以使用 sysrepoctl。然后，您必须将共享库放入 liboven。进入插件路径。</p><p>之后，您应该准备启动 <code>sysrepo-plugind</code>，它将加载插件。如果您启用了调试消息，您应该会看到烤箱插件已成功初始化。</p><p>现在您可以自由地使用烤箱配置、rpc和通知了。它应该像YANG模型中描述的那样工作，以及人们期望烤箱如何工作。下面是一个用例：</p><ol><li><p>作为第一步，使用 notif 订阅示例订阅烤箱通知</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notif_subscribe_example oven</span><br></pre></td></tr></table></figure></li><li><p>准备好待烤箱温度达到一定温度后放入的食物，稍后再进行配置。烤箱默认是关闭的。在NETCONF术语中，执行插入-食物 RPC。您可以使用 sysrepocfg 实现这一点</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p> 和输入：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert-food</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:sysrepo:oven&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span>&gt;</span>on-oven-ready<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert-food</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 作为 RPC 内容。您应该会看到一些信息 sysrepo-plugind 输出。</p></li><li><p>现在你要打开烤箱，期待当它达到设定的温度时得到通知。同时，食物应该在那个时候插入。所以,你执行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --datastore running</span></span><br></pre></td></tr></table></figure><p> 与内容</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">oven</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:sysrepo:oven&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">turned-on</span>&gt;</span>true<span class="tag">&lt;/<span class="name">turned-on</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">temperature</span>&gt;</span>200<span class="tag">&lt;/<span class="name">temperature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">oven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在~4秒后，你应该收到通知。您还可以验证是否一切正常</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span> --xpath /oven:*</span></span><br></pre></td></tr></table></figure><p> 食物应该放在烤箱里。</p></li><li><p>一旦你认为食物烤得恰到好处，就用另一个RPC移走它</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p> 和</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">remove-food</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:sysrepo:oven&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-9-Oven-Daemon"><a href="#3-9-Oven-Daemon" class="headerlink" title="3.9 Oven Daemon"></a>3.9 Oven Daemon</h3><p>如果您希望您的设备有一个独立的守护进程，它将作为独立的进程运行，而不使用 sysrepo-plugind，那么您不需要开发插件。拥有一个独立的守护进程实际上只有上一句中提到的几个区别。</p><p>至于代码本身，不需要特定的函数，因为代码将编译为可执行二进制文件而不是共享库。但是，如果要将插件转换为应用程序，没有什么可以阻止重用整个代码。</p><p>所需要的只是一个 <code>main()</code> 函数，该函数将在开始处调用 <code>sr_plugin_init_cb()</code> 并在终止之前调用<code>sr_plugin_cleanup_cb()</code>。 此外，这些功能需要 Sysrepo 会话。 要创建一个，我们首先需要一个连接。 因此，使用 <code>sr_connect()</code> 创建连接，如果成功，则使用 <code>sr_session_start()</code> 创建会话。 现在，可以通过调用清除函数并释放会话和连接来调用 init 函数并在守护程序终止时正确地进行清理。 此外，在编译此类应用程序之前，必须更改打印宏，因为将不再有处理打印消息的主守护程序。 完成这些更改后，烤箱守护程序应已准备就绪。</p><h1 id="B4860-环境编译-libyang"><a href="#B4860-环境编译-libyang" class="headerlink" title="B4860 环境编译 libyang"></a>B4860 环境编译 libyang</h1><p>下载：<a href="https://github.com/CESNET/libyang/releases">libyang release</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -zxvf libyang-1.0.184.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libyang-1.0.184</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DCMAKE_INSTALL_PREFIX:PATH=`<span class="built_in">pwd</span>`/4860lib -DCMAKE_BUILD_TYPE:String=<span class="string">&quot;Release&quot;</span> ..</span></span><br><span class="line"><span class="meta prompt_">$ </span></span><br></pre></td></tr></table></figure><p>更改扩展插件目录</p><p>对于 YANG 扩展，libyang 允许加载扩展插件。 默认情况下，存储插件的目录是 <code>libdir/libyang</code>。 要更改它，使用env环境更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=`<span class="built_in">pwd</span>`/my/relative/path yanglint</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_USER_TYPES_PLUGINS_DIR=`<span class="built_in">pwd</span>`/my/relative/path yanglint</span></span><br></pre></td></tr></table></figure><h1 id="netopeer2-sysrepo研究总结"><a href="#netopeer2-sysrepo研究总结" class="headerlink" title="netopeer2 + sysrepo研究总结"></a>netopeer2 + sysrepo研究总结</h1><blockquote><p><a href="https://blog.csdn.net/xuguozheng110/article/details/104043039">netopeer2 + sysrepo研究总结</a></p></blockquote><h2 id="sysrepo是干什么的"><a href="#sysrepo是干什么的" class="headerlink" title="sysrepo是干什么的"></a>sysrepo是干什么的</h2><p>sysrepo是一个数据库。可以用来保存可读可写的配置，例如 IP,netmask。你可以坐在家里，给远端的设备的sysrepo下修改配置命令。另外远端设备还有一些只读的状态，也可以读回来，例如温度。</p><h2 id="sysrepo的订阅功能"><a href="#sysrepo的订阅功能" class="headerlink" title="sysrepo的订阅功能"></a>sysrepo的订阅功能</h2><p>订阅实际上就是回调函数。</p><p>例如我们的程序告诉sysrepo，我们要订阅 &#x2F;net&#x2F;eth0&#x2F;ip 这个 xml 地址，当有人发消息给 sysrepo，写这个路径时，sysrepo就会告诉我们这个 xml 发生变化了，我们就执行实际的操作。</p><h2 id="sysrepo的修改配置"><a href="#sysrepo的修改配置" class="headerlink" title="sysrepo的修改配置"></a>sysrepo的修改配置</h2><p>修改配置用写xml路径的方法, 例如写xml路径&#x2F;net&#x2F;eth0&#x2F;ip，那么sysrepo就会把修改的信息写到此路径中，保存到sysrepo的数据库中。</p><p>但是sysrepo并没有去做修改ip的实际工作，这个实际工作是怎么完成的呢？sysrepo提供了一个回调函数，我们只要把这个回调函数写好就行。当写xml路径时，sysrepo就会调用回调函数，完成实际的工作。sysrepo实际只是保存配置，并调用回调函数这两件事。</p><p>完成一个修改配置的操作，共需要3个程序，一个是发命令的程序，一个收命令的sysrepo，另外我们自己还要写个程序，接收sysrepo发过来的修改配置的路径，我们自己的程序发现是要修改ip的路径，那么就改ip了。</p><h2 id="sysrepo返回状态"><a href="#sysrepo返回状态" class="headerlink" title="sysrepo返回状态"></a>sysrepo返回状态</h2><p>和 2 类似，我们的程序收到读某个路径的消息，就把数据写到指定路径中就可以</p><h2 id="如何下载安装"><a href="#如何下载安装" class="headerlink" title="如何下载安装"></a>如何下载安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/sysrepo/sysrepo.git</span></span><br></pre></td></tr></table></figure><p>Sysrepo&#x2F;Netopeer2 tools and programs:</p><ul><li>sysrepoctl</li><li>sysrepocfg</li><li>sysrepod</li><li>sysrepo-plugind</li><li>netopeer2-cli</li><li>netopeer2-server</li></ul><img data-src="/2020/09/22/Netconf/sysrepo-netconf-node/syarepo-install.png" class="" title="syarepo-install"><h2 id="基于YANG模型的数据库sysrepo介绍"><a href="#基于YANG模型的数据库sysrepo介绍" class="headerlink" title="基于YANG模型的数据库sysrepo介绍"></a>基于YANG模型的数据库sysrepo介绍</h2><p>多数linux的应用程序需要有配置，配置文件的保存和读写通常的实现方式是通过操作文件来完成的。各应用程序都自定配置文件的格式，格式风格存在诸多差异。</p><p>Sysrepo是一个基于YANG模型的配置和操作数据库，为应用程序提供一致的操作数据的接口，解决了配置读写困难的问题。应用程序使用YANG模型来建模，这样就可以利用YANG模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件了。</p><img data-src="/2020/09/22/Netconf/sysrepo-netconf-node/high_level_architecture.png" class="" title="high_level_architecture"><p>SYSREPO数据库它提供了以下特性:</p><ul><li>模型配置文件和状态数据的集中存储</li><li>应用程序可以通过XPATH访问配置</li><li>支持启动、运行和临时数据存储</li><li>支持事务，符合ACID</li><li>根据YANG模型，进行数据一致性和约束的检查</li><li>没有单一故障点，应用程序不需要运行任何其他进程来访问其配置</li></ul><h1 id="Sysrepo-常用操作"><a href="#Sysrepo-常用操作" class="headerlink" title="Sysrepo 常用操作"></a>Sysrepo 常用操作</h1><p>sysrepo 提供两个独立的，非常实用的程序。方便开发者便捷地使用 sysrepo 来开发与调试自己的应用。</p><h2 id="sysrepoctl"><a href="#sysrepoctl" class="headerlink" title="sysrepoctl"></a>sysrepoctl</h2><p>sysrepoctl，它用于列出，安装，卸载或更新 sysrepo 模块，也能用于修改一个 sysrepo 模块的特性，权限等。开发过程中经常使用的命令如下</p><ol><li>列出全部已经安装在 sysrepo 中的 Yang 模块，并包含模块的基本信息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -l, --list</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装指定Yang模型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -i， --install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang  <span class="comment"># 以默认权限安装ietf-interfaces模型</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang --owner=admin:admin --permissions=644   <span class="comment"># 为特定admin用户安装可访问权限为644的ietf-interfaces.yang模型</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>卸载已安装的 Yang 模型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -u, --uninstall</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --uninstall ietf-interfaces</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改 Yang 模型，常用的是设置模型支持的特性</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -c, --chang</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --(<span class="built_in">disable</span>|<span class="built_in">enable</span>)-feature if-mib</span></span><br></pre></td></tr></table></figure><ol start="5"><li>更新 Yang 模型，如果已安装的 Yang 模型有更新，可以执行该命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -U, --update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --update /root/ietf-netconf@2013-09-29.yang</span></span><br></pre></td></tr></table></figure><h2 id="sysrepocfg"><a href="#sysrepocfg" class="headerlink" title="sysrepocfg"></a>sysrepocfg</h2><p>sysrepocfg 是用于 importing，exporting，exporting，replacing 配置到指定的数据库中。命令默认是操作running 库，也支持多种数据格式：json, xml, lyb，除非通过 <code>–format</code> 特定指出，默认的采用 xml 格式。常用的命令如下:</p><ol><li>导入一个配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -I, --import[=]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces.xml   <span class="comment"># 将ietf-interfaces配置导入默认running下的ietf-interfaces模块</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces_startup.json --datastore startup --module ietf-interfaces  <span class="comment"># 将json格式的ietf-interfaces配置导入startup的ietf-interfaces模块</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>导出一个配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -X, --<span class="built_in">export</span>[=]</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span>=ietf-interfaces_running.xml --format xml --module ietf-interfaces <span class="comment"># 将running库ietf-interfaces 的配置xml的格式导出，并以ietf-interfaces_running.xml名字命令配置文件</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>编辑或修改配置文件，应用到指定的数据库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -E, --edit[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=candidate.xml --datastore candidate   <span class="comment"># 如果是修改running库，需要加相应的锁</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --lock</span></span><br></pre></td></tr></table></figure><ol start="4"><li>发一个RPC请求，RPC返回的结果直接输出于终端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -R, --rpc[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p>更多sysrepocfg的使用，请参考sysrepocfg -h。</p><h1 id="o-hub-netconf-相关开发"><a href="#o-hub-netconf-相关开发" class="headerlink" title="o-hub netconf 相关开发"></a>o-hub netconf 相关开发</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> /tmp/o-ran-software-management.so /usr/lib/sysrepo/plugins/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepo-plugind -d -v 4</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer2-server -d -v 3</span></span><br></pre></td></tr></table></figure><p>o-hub software download xml fotmat:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* sftp://<span class="tag">&lt;<span class="name">username</span>&gt;</span>@<span class="tag">&lt;<span class="name">host</span>&gt;</span>[:<span class="tag">&lt;<span class="name">port</span>&gt;</span>]/path */ </span><br><span class="line"><span class="tag">&lt;<span class="name">software-download</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:o-ran:software-management:1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remote-file-path</span>&gt;</span>sftp://sftp-admin@192.168.2.76:sysupgrade-BaiHub_1.0.4.bin<span class="tag">&lt;/<span class="name">remote-file-path</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">software-download</span>&gt;</span></span><br></pre></td></tr></table></figure><p>o-hub software install xml fotmat：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">software-install</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:o-ran:software-management:1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-name</span>&gt;</span>system_slot<span class="tag">&lt;/<span class="name">slot-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file-names</span>&gt;</span>test_file<span class="tag">&lt;/<span class="name">file-names</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">software-install</span>&gt;</span></span><br></pre></td></tr></table></figure><p>o-hub software activate xml fotmat：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">software-activate</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:o-ran:software-management:1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-name</span>&gt;</span>system_slot<span class="tag">&lt;/<span class="name">slot-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">software-activate</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="B4860-4G-HUB-级连口-T14-测量问题查看方式"><a href="#B4860-4G-HUB-级连口-T14-测量问题查看方式" class="headerlink" title="B4860 4G HUB 级连口 T14 测量问题查看方式"></a>B4860 4G HUB 级连口 T14 测量问题查看方式</h1><h3 id="1-首先查看级联口是否存在链路闪断或者异常"><a href="#1-首先查看级联口是否存在链路闪断或者异常" class="headerlink" title="1) 首先查看级联口是否存在链路闪断或者异常"></a>1) 首先查看级联口是否存在链路闪断或者异常</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x1000 0x20  <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看 1002的 bit7~4，如果是4 ，表示是稳定的</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x1070 0x20  <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看1078 107a 107c 107e  4个寄存器是否有变化，没变化表示cpri状态ok的</span></span><br></pre></td></tr></table></figure><h3 id="2-若-1-状态ok，则开始读取-T14-的值"><a href="#2-若-1-状态ok，则开始读取-T14-的值" class="headerlink" title="2) 若 1) 状态ok，则开始读取 T14 的值"></a>2) 若 1) 状态ok，则开始读取 T14 的值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x1040 0x20  <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 1040 和 1042 ，这两个值就是 T14 测量的值</span></span><br></pre></td></tr></table></figure><h3 id="3-若-1-状态不-ok，则开始读取上联口的-CPRI-状态"><a href="#3-若-1-状态不-ok，则开始读取上联口的-CPRI-状态" class="headerlink" title="3) 若 1) 状态不 ok，则开始读取上联口的 CPRI 状态"></a>3) 若 1) 状态不 ok，则开始读取上联口的 CPRI 状态</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x0000 0x20   <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看 1002的 bit7~4，如果是4 ，表示是稳定的</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x0070 0x20   <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看1078 107a 107c 107e  4个寄存器是否有变化，没变化表示cpri状态ok的</span></span><br></pre></td></tr></table></figure><h3 id="4-若3-读取看到状态不正常，则需要去查看上联口的光纤连接情况。若-3-看到正常，则需要检测级联端口的连接情况以及下一级-rhub-的情况"><a href="#4-若3-读取看到状态不正常，则需要去查看上联口的光纤连接情况。若-3-看到正常，则需要检测级联端口的连接情况以及下一级-rhub-的情况" class="headerlink" title="4) 若3) 读取看到状态不正常，则需要去查看上联口的光纤连接情况。若 3) 看到正常，则需要检测级联端口的连接情况以及下一级 rhub 的情况"></a>4) 若3) 读取看到状态不正常，则需要去查看上联口的光纤连接情况。若 3) 看到正常，则需要检测级联端口的连接情况以及下一级 rhub 的情况</h3><h1 id="B4860-BU-TO-RU-时延计算"><a href="#B4860-BU-TO-RU-时延计算" class="headerlink" title="B4860 BU TO RU 时延计算"></a>B4860 BU TO RU 时延计算</h1><p>参数说明：</p><ul><li>HUB上联口 Toffset &#x3D; 2 * Cycle ，HUB 级联口 Toffset &#x3D; 3 * Cycle，  HUB下联口 Toffset &#x3D; 53 * Cycle</li><li>RU Toffset &#x3D; 6 * Cycle</li><li>Cycle &#x3D; 8.013ns</li></ul><p><strong>一级HUB BU 到 RU 时延值：</strong></p><p>环境：BU –&gt; HUB –&gt; RU</p><p>1） BU –&gt; HUB  T12</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" title="T12=\left ( T14 - Toffset * Cycle \right ) / 2" /></a></p><ul><li>T14 BBU侧测量值，单位ns</li><li>Toffset &#x3D; 2* Cycle （hub上联口 Toffset）</li></ul><p>2） TBdelayDL –&gt; HUB上联口到对应 RU接HUB下联口的时延值，单位Cycle</p><p>3）HUB –&gt; RU  T12_1</p><p><a href="https://www.codecogs.com/eqnedit.php?latex={T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?{T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" title="{T12}'= \left ( {T14}' - Toffset \right ) / 2 * Cycle" /></a></p><ul><li>T14_1 RU 接 HUB 下联口的 T14 测量值，HUB侧测量值，单位Cycle</li><li>Toffset &#x3D; 6 * Cycle （RU Toffset）</li></ul><p>4） T2a  RU 上报，单位Cycle</p><p>下行 BU 到 RU 时延值：</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=BBU->RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;T2a" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?BBU->RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;T2a" title="BBU->RU DL_{Delay} = T12 + TBdelayDL + {T12}' + T2a" /></a></p><p><strong>二级HUB BU 到 RU 时延值：</strong></p><p>环境：BU –&gt; HUB –&gt; HUB –&gt; RU</p><p>1） BU –&gt; HUB  T12</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" title="T12=\left ( T14 - Toffset * Cycle \right ) / 2" /></a></p><ul><li>T14  BBU侧测量值，单位ns</li><li>Toffset &#x3D; 2 * Cycle （HUB上联口 Toffset）</li></ul><p>2） TBdelayDL –&gt; 一级HUB 上联口到 一级HUB 级联口时延值，单位Cycle</p><p>3） HUB –&gt; HUB  T12_1</p><p><a href="https://www.codecogs.com/eqnedit.php?latex={T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?{T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" title="{T12}'= \left ( {T14}' - Toffset \right ) / 2 * Cycle" /></a></p><ul><li>T14_1  一级HUB 级联口 到 二级 HUB 上联口 T14，单位Cycle</li><li>Toffset &#x3D; 2 * Cycle （二级HUB上联口 Toffset）</li></ul><p>4）TBdelayDL_1 –&gt; 二级HUB上联口到对应 RU接 二级HUB下联口的时延值，单位Cycle</p><p>5）HUB –&gt; RU  T12_2</p><p><a href="https://www.codecogs.com/eqnedit.php?latex={T12}''&space;=&space;\left&space;(&space;{T14}''&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?{T12}''&space;=&space;\left&space;(&space;{T14}''&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" title="{T12}'' = \left ( {T14}'' - Toffset \right ) / 2 * Cycle" /></a></p><ul><li>T14_2  RU 接 二级HUB 下联口的 T14 测量值，二级HUB侧测量值，单位Cycle</li><li>Toffset &#x3D; 6 * Cycle （RU Toffset）</li></ul><p>6） T2a  RU 上报，单位Cycle</p><p>下行 BU 到 RU时延值：</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=BBU&space;->&space;RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;{TBdelayDL}'&space;&plus;&space;{T12}''&space;&plus;&space;T2a" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?BBU&space;->&space;RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;{TBdelayDL}'&space;&plus;&space;{T12}''&space;&plus;&space;T2a" title="BBU -> RU DL_{Delay} = T12 + TBdelayDL + {T12}' + {TBdelayDL}' + {T12}'' + T2a" /></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">snmptrap -v1 -c public 192.168.2.124 .1.3.6.1.4.1.1 192.168.2.125 6 10 100 1.3.6.1.9.9.44.1.2.1 i 12</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 版本 -c 共同体 TrapServerIP Enterprise-OID AgentIP 陷阱类型 oid 时间 被发送参数的OID  数据类型 值</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">i  整形 u  无符号型    c  COUNTER32    s  字符串   x  16进制字符串   d  10进制字符串  n  空对象 o  对象ID  t  计时器  a  IP地址 b  比特</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Generic Type包括7种, 分别是:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0  coldStart  1  warmStart  2  linkDown  3  linkUp 4  authenticationFailure          5  egpNeighborLoss        6  enterpriseSpecific</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://github.com/CESNET/libyang">libyang – GitHub</a></p><p><a href="https://github.com/CESNET/netopeer2">netopeer2 – GitHub</a></p><p><a href="https://github.com/sysrepo/sysrepo">sysrepo – GitHub</a></p></blockquote><blockquote><p><a href="https://netopeer.liberouter.org/doc/libyang/master/index.html">libyang – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/libnetconf2/devel/index.html">libnetconf2 – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/sysrepo/master/index.html">sysrepo – Doc</a></p><p><a href="https://www.runoob.com/xpath/xpath-tutorial.html">XPath 教程 – RUNOOB.COM</a></p><p><a href="https://www.yiibai.com/xpath">XPath教程 – 易百教程</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/xuguozheng110/article/details/104043039">netopeer2 + sysrepo研究总结</a></p><p><a href="https://blog.csdn.net/qq_27923047/article/details/108069409">sysrepo简单使用</a></p><p><a href="https://blog.csdn.net/m0_47413019/article/details/105867406">第三章 sysrepo-plugind源码分析</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Netopper2-安装&quot;&gt;&lt;a href=&quot;#Netopper2-安装&quot; class=&quot;headerlink&quot; title=&quot;Netopper2 安装&quot;&gt;&lt;/a&gt;Netopper2 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;环境 centos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-基础软件安装&quot;&gt;&lt;a href=&quot;#1-基础软件安装&quot; class=&quot;headerlink&quot; title=&quot;1. 基础软件安装&quot;&gt;&lt;/a&gt;1. 基础软件安装&lt;/h2&gt;</summary>
    
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/categories/Netconf/"/>
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>netconf note</title>
    <link href="http://miaopei.github.io/2020/09/21/Netconf/netconf-note/"/>
    <id>http://miaopei.github.io/2020/09/21/Netconf/netconf-note/</id>
    <published>2020-09-21T13:50:28.000Z</published>
    <updated>2024-06-11T05:28:51.912Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netconf-学习笔记"><a href="#Netconf-学习笔记" class="headerlink" title="Netconf 学习笔记"></a>Netconf 学习笔记</h1><h2 id="1-Netconf简介"><a href="#1-Netconf简介" class="headerlink" title="1. Netconf简介"></a>1. Netconf简介</h2><p>随着SDN的大热，一个诞生了十年之久的协议焕发了第二春，它就是NETCONF协议。如果你在两年前去搜索NETCONF协议，基本得到的信息都是“这个协议是一个网管协议，主要目的是弥补SNMP协议的不足，希望可以取代SNMP协议”。SNMP有哪些不足，而NETCONF是否真的能够弥补，这都不是重点，重点是NETCONF诞生至今SNMP依旧活的好好的。所以如果我们还是把NETCONF当做一个网管协议的话，估计它会在冷板凳上一直坐下去，而如果我们换一个角度去看待NETCONF协议，你会发现也许它是最适合SDN的一个协议。</p><span id="more"></span><p>NETCONF的自动化配置系统采用Client&#x2F;Server架构，而netopeer即实现了netconf的C&#x2F;S框架的开源项目。</p><p>Netopeer是基于开源项目libnetconf库完成的，已实现client和server端的代码。主要涉及的组件为netopeer-cli和netopeer-server；其中netopeer-cli为一个CLI程序，允许通过该程序连接到netconfserver，和操纵它的配置数据；netopeer-server为一个netconf服务器端的守护进程，允许与netconf client建立连接，接收配置数据等操作。除了这两个重要的模块，netopeer项目还包含了libnetconf transAPI模块举例，位于项目源码transAPI&#x2F;路径下，例如cfgsystem模块，实现的是一个ietf-system数据模型。</p><h2 id="2-Netconf架构"><a href="#2-Netconf架构" class="headerlink" title="2. Netconf架构"></a>2. Netconf架构</h2><p>NETCONF是一个基于XML的交换机配置接口，用于替代CLI、SNMP等配置交换机。</p><blockquote><p>本质上来说,NETCONF就是利用XML-RPC的通讯机制实现配置客户端和配置服务端之间的通信，实现对网络设备的配置和管理。</p></blockquote><p>NETCONF分为四个层：安全传输层、消息层、操作层、内容层。</p><img data-src="/2020/09/21/Netconf/netconf-note/netconf-layer-model-1.png" class="" title="NETCONF Layering Model And Examplel"><ul><li><p><strong>安全传输层</strong>：用于跟交换机安全通信，NETCONF并未规定具体使用哪种传输层协议，所以可以使用SSH、TLS、HTTP等各种协议</p></li><li><p><strong>消息层</strong>：提供一种传输无关的消息封装格式，用于RPC通信</p></li><li><p><strong>操作层</strong>：定义了一系列的RPC调用方法，并可以通过Capabilities来扩展</p></li><li><p><strong>内容层</strong>：定义RPC调用的数据内容</p></li></ul><p>NETCONF关键技术实现：</p><blockquote><p>关键的环节包括：安全认证、建立加密传输通道、rpc-xml消息收发、rpc-xml文件解析、rpc-reply消息的生成。</p></blockquote><h2 id="3-Netconf环境搭建"><a href="#3-Netconf环境搭建" class="headerlink" title="3. Netconf环境搭建"></a>3. Netconf环境搭建</h2><p>基于centos7搭建环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libtool</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libxml2-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libxslt-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libcurl-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install python-setuptools</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install pkg-config</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install readline-devel</span></span><br></pre></td></tr></table></figure><h3 id="pyang-编译安装"><a href="#pyang-编译安装" class="headerlink" title="pyang 编译安装"></a>pyang 编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/mbj4668/pyang.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> pyang</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python setup.py install</span></span><br></pre></td></tr></table></figure><h3 id="libssh-0-6-4-编译安装"><a href="#libssh-0-6-4-编译安装" class="headerlink" title="libssh (&gt;&#x3D;0.6.4) 编译安装"></a>libssh (&gt;&#x3D;0.6.4) 编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libssh-devel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://git.libssh.org/projects/libssh.git libssh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libssh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ..</span></span><br></pre></td></tr></table></figure><h3 id="libnetconf-编译安装"><a href="#libnetconf-编译安装" class="headerlink" title="libnetconf 编译安装"></a>libnetconf 编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/libnetconf.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libnetconf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><h3 id="netopeeran编译安装"><a href="#netopeeran编译安装" class="headerlink" title="netopeeran编译安装"></a>netopeeran编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/netopeer.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装netopeer-server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> netopeer/server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> netopeer/cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><h3 id="netopeer-启动与验证"><a href="#netopeer-启动与验证" class="headerlink" title="netopeer 启动与验证"></a>netopeer 启动与验证</h3><p>启动netopeer server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-server -d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认监听端口x.x.x.x:830，连接的用户名密码为系统用户</span></span><br></pre></td></tr></table></figure><p>验证 netopeer-cli 与 netopeer-server 连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">connect localhost</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config startup</span></span><br></pre></td></tr></table></figure><p>其它操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a) 配置netopeer server模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-configurator</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b) 检查默认启动的模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br></pre></td></tr></table></figure><h2 id="4-Netconf案例使用"><a href="#4-Netconf案例使用" class="headerlink" title="4. Netconf案例使用"></a>4. Netconf案例使用</h2><h3 id="工具lnctool"><a href="#工具lnctool" class="headerlink" title="工具lnctool"></a>工具lnctool</h3><p>假设经过第一步后成功编译出libnetconf和netopeer，这样我们就可以直接运行netopeer。netconf默认监听端口是830端口。</p><p>众所周知，netconf协议支持自定义rpc，因此此步骤需要做的是如何在现有netconf中增加自己的yang模型以及执行自己的rpc？？</p><p>这里就需要用到这个工 <code>lnctool</code>。这个工具是用python实现的，里面代码也比较简单，比如说调用其他应用程序（pyang）或者直接写文件。</p><img data-src="/2020/09/21/Netconf/netconf-note/lnctool%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.png" class="" title="lnctool工具使用"><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lnctool --model ./turing-machine.yang transapi --paths ./path</span></span><br></pre></td></tr></table></figure><p>另外一个重点是就是实现源文件中相关接口—rpc函数。当经过以上两个步骤之后，就可以进行编译，默认编译出动态库.so文件。</p><p>当我们把rpc函数实现之后，就可以通过另外一个工具，netopeer-manager安装自定义模型，使用命令行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name [module name]  --model  [model path]  --transapi  [model share library]  --datastore [module datastore file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name turing-machine --model /usr/local/etc/netopeer/turing-machine/turing-machine.yin --transapi /usr/local/lib/turing-machine.so --datastore /usr/local/etc/netopeer/turing-machine/datastore.xml</span></span><br></pre></td></tr></table></figure><h3 id="turing-machine-demo"><a href="#turing-machine-demo" class="headerlink" title="turing-machine demo"></a>turing-machine demo</h3><h4 id="1-编译-turing-machine"><a href="#1-编译-turing-machine" class="headerlink" title="1. 编译 turing-machine"></a>1. 编译 turing-machine</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">autoreconf --force --install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure><h4 id="2-检查-xml"><a href="#2-检查-xml" class="headerlink" title="2. 检查 xml"></a>2. 检查 xml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/etc/netopeer/cfgnetopeer/datastore.xml</span> </span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;datastores xmlns=&quot;urn:cesnet:tmc:datastores:file&quot;&gt;</span><br><span class="line">  &lt;running lock=&quot;&quot;&gt;</span><br><span class="line">    &lt;netopeer xmlns=&quot;urn:cesnet:tmc:netopeer:1.0&quot;&gt;</span><br><span class="line">      &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;</span><br><span class="line">          &lt;name&gt;turing-machine&lt;/name&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line">      &lt;/modules&gt;</span><br><span class="line">    &lt;/netopeer&gt;</span><br><span class="line">  &lt;/running&gt;</span><br><span class="line">  &lt;startup lock=&quot;&quot;&gt;</span><br><span class="line">    &lt;netopeer xmlns=&quot;urn:cesnet:tmc:netopeer:1.0&quot;&gt;</span><br><span class="line">      &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;</span><br><span class="line">          &lt;name&gt;turing-machine&lt;/name&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line">      &lt;/modules&gt;</span><br><span class="line">    &lt;/netopeer&gt;</span><br><span class="line">  &lt;/startup&gt;</span><br><span class="line">  &lt;candidate lock=&quot;&quot; modified=&quot;false&quot; locktime=&quot;&quot;&gt;</span><br><span class="line">    &lt;netopeer xmlns=&quot;urn:cesnet:tmc:netopeer:1.0&quot;&gt;</span><br><span class="line">      &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;</span><br><span class="line">          &lt;name&gt;turing-machine&lt;/name&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line">      &lt;/modules&gt;</span><br><span class="line">    &lt;/netopeer&gt;</span><br><span class="line">  &lt;/candidate&gt;</span><br><span class="line">&lt;/datastores&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/etc/netopeer/cfgnetopeer/datastore-server.xml</span> </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;datastores xmlns=&quot;urn:cesnet:tmc:datastores:file&quot;&gt;</span><br><span class="line">  &lt;running lock=&quot;&quot;/&gt;</span><br><span class="line">  &lt;startup lock=&quot;&quot;/&gt;</span><br><span class="line">  &lt;candidate modified=&quot;false&quot; lock=&quot;&quot; locktime=&quot;&quot;/&gt;</span><br><span class="line">&lt;/datastores&gt;</span><br></pre></td></tr></table></figure><h4 id="3-安装模块"><a href="#3-安装模块" class="headerlink" title="3. 安装模块"></a>3. 安装模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su root</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> turing-machine.yin /usr/local/etc/netopeer/turing-machine/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> .libs/turing-machine.so /usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> turing-machine.la /usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name turing-machine --model /usr/local/etc/netopeer/turing-machine/turing-machine.yin --transapi /usr/local/lib/turing-machine.so --datastore /usr/local/etc/netopeer/turing-machine/datastore.xml</span></span><br></pre></td></tr></table></figure><h4 id="4-netopeer-manager-list"><a href="#4-netopeer-manager-list" class="headerlink" title="4. netopeer-manager list"></a>4. netopeer-manager list</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br><span class="line">Reading the configuration from /usr/local/etc/netopeer/modules.conf.d/</span><br><span class="line">List of startup Netopeer modules:</span><br><span class="line">turing-machine (enabled)</span><br></pre></td></tr></table></figure><h4 id="5-启动-netopeer-server"><a href="#5-启动-netopeer-server" class="headerlink" title="5. 启动 netopeer-server"></a>5. 启动 netopeer-server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-server -v 3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="6-启动-netopeer-cli"><a href="#6-启动-netopeer-cli" class="headerlink" title="6. 启动 netopeer-cli"></a>6. 启动 netopeer-cli</h4><p>使用命令:</p><ul><li>connect 192.168.205.98 </li><li>get </li><li>lock candidate </li><li>edit-config candidate</li><li>commit </li><li>unlock candidate </li><li>get-config running Get-config </li><li>edit-config candidate</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">connect 192.168.205.98</span></span><br><span class="line">The authenticity of the host &#x27;192.168.205.98&#x27; cannot be established.</span><br><span class="line">ssh-rsa key fingerprint is 9f:c8:f9:13:7d:04:b8:18:e9:4d:4e:9c:cb:63:84:17:0b:d9:ad:6a.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">root@192.168.205.98 password: </span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get</span></span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">lock candidate</span></span><br><span class="line">  Result OK</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">debug</span></span><br><span class="line">Verbose level set to DEBUG</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=merge --config=/root/turing.xml candidate</span></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:34:38 Writing message (session 1): </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;3&quot;&gt;</span><br><span class="line">  &lt;edit-config&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;default-operation&gt;merge&lt;/default-operation&gt;</span><br><span class="line">    &lt;config&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot; xmlns:xc=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;&gt;</span><br><span class="line">        &lt;transition-function xc:operation=&quot;merge&quot;&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">  &lt;/edit-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:34:38 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;3&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Result OK</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">commit</span></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:35: 9 Writing message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;4&quot;&gt;</span><br><span class="line">  &lt;commit/&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:35: 9 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;4&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Result OK</span><br></pre></td></tr></table></figure><h4 id="7-check-datastore-xml"><a href="#7-check-datastore-xml" class="headerlink" title="7. check datastore.xml"></a>7. check datastore.xml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/etc/netopeer/turing-machine/datastore.xml</span> </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;datastores xmlns=&quot;urn:cesnet:tmc:datastores:file&quot;&gt;</span><br><span class="line">  &lt;running lock=&quot;&quot;&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/running&gt;</span><br><span class="line">  &lt;startup lock=&quot;&quot;/&gt;</span><br><span class="line">  &lt;candidate modified=&quot;true&quot; lock=&quot;1&quot; locktime=&quot;2018-01-26T06:33:55Z&quot;&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/candidate&gt;</span><br><span class="line">&lt;/datastores&gt;</span><br></pre></td></tr></table></figure><p>OK, unlock candidate:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">unlock candidate</span></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:38: 4 Writing message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;unlock&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">  &lt;/unlock&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:38: 4 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Result OK</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span></span><br></pre></td></tr></table></figure><p>unlock is successfully</p><p>server’s output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[4981]: 4981-D  1-26 14:38: 4 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;unlock&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">  &lt;/unlock&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line">netopeer-server[4981]: 4981-V  1-26 14:38: 4 Created dummy session 0 for user &#x27;root&#x27; (UID 0) - recovery session</span><br><span class="line">netopeer-server[4981]: 4981-V  1-26 14:38: 4 Created dummy session 0 for user &#x27;root&#x27; (UID 0) - recovery session</span><br><span class="line">netopeer-server[4981]: 4981-D  1-26 14:38: 4 Adding new event (0)</span><br><span class="line">netopeer-server[4981]: 4981-V  1-26 14:38: 4 Created dummy session 0 for user &#x27;root&#x27; (UID 0) - recovery session</span><br><span class="line">netopeer-server[4981]: 4981-D  1-26 14:38: 4 Writing message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="turing-machine-demo-get操作案例"><a href="#turing-machine-demo-get操作案例" class="headerlink" title="turing-machine demo get操作案例"></a>turing-machine demo get操作案例</h3><p>running datestore 内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">netconf&gt; get-config running</span><br><span class="line"></span><br><span class="line">  Result:</span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>end<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span><span class="tag">&lt;<span class="name">netopeer</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:cesnet:tmc:netopeer:1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>turing-machine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">netopeer</span>&gt;</span></span><br><span class="line">netconf&gt;</span><br></pre></td></tr></table></figure><p>准备get xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- turing-machine-get-test.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>netopeer-cli 命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">netconf&gt; get --filter=/turing-machine-get-test.xml</span><br><span class="line"></span><br><span class="line">  Result:</span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>netopeer-server log：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[127219]: Received message (session 4): <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rpc</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span> <span class="attr">message-id</span>=<span class="string">&quot;34&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">get</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">type</span>=<span class="string">&quot;subtree&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">get</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc</span>&gt;</span></span><br><span class="line">netopeer-server[127219]: Merging the node turing-machine (src/datastore/edit_config.c:2325)</span><br><span class="line">netopeer-server[127219]: Deleting the node turing-machine (src/datastore/edit_config.c:1003)</span><br><span class="line">netopeer-server[127219]: Writing message (session 4): <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rpc-reply</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span> <span class="attr">message-id</span>=<span class="string">&quot;34&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc-reply</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置netopeer服务器模块"><a href="#配置netopeer服务器模块" class="headerlink" title="配置netopeer服务器模块"></a>配置netopeer服务器模块</h3><p>要查找要添加YANG模块的默认位置，请运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /usr/bin/netopeer-configurator</span></span><br></pre></td></tr></table></figure><p>你可以在[Netopeer]一栏找到以下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Netopeer]     Using modules installed in path: /usr/local/etc/netopeer/modules.conf.d</span><br></pre></td></tr></table></figure><p>默认情况下，所有模块的XML实例数据(Netopeer调用这个数据存储，不幸的是，使用与NETCONF的运行&#x2F;候选&#x2F;启动数据存储相同的术语)存储在 <code>/usr/local/etc/Netopeer/modules.conf.d</code>中</p><p>当您使用 <code>netopier -manager</code> 添加模块时，<code>—datastore</code> 选项应该指向 <code>/usr/local/etc/netopeer/modules.conf.d</code></p><p>使用 <code>netopier -manager</code> 的例子:</p><p>首先检查哪些模块是默认启用的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br><span class="line">List of startup Netopeer modules:No module installed.</span><br></pre></td></tr></table></figure><p>没有安装模块。让我们添加一些模块。要添加模型，首先使用PyangNETCONFc转换 <code>.yang</code> 文件 <code>yin文件</code>。Netopeer内部使用 YIN 格式。例如，让我们添加 toaster 数据存储，这样您就可以使用NETCONFc来配置它。</p><p>Download toaster.yang from<a href="http://www.seguesoft.com/get-standard-yang-modules"> http://seguesoft.com/get-standard-yang-modules</a>. Then you can do:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f yin /home/bob/YANG_modules/toaster.yang -o /home/bob/YANG_modules/toaster.yin</span></span><br></pre></td></tr></table></figure><p>Then add toaster.yin’s datastore into Netopeer as follows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name toaster --model /home/bob/YANG_modules/toaster.yin --datastore /usr/local/etc/netopeer/modules.conf.d/toaster.xml</span></span><br></pre></td></tr></table></figure><p>对于命令引用类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --<span class="built_in">help</span></span>     </span><br><span class="line">To actually implement a model, see http://github.com/CESNET/netopeer/tree/master/transAPI/cfgsystem</span><br></pre></td></tr></table></figure><h3 id="操作过程："><a href="#操作过程：" class="headerlink" title="操作过程："></a>操作过程：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xml 生成</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f sample-xml-skeleton turing-machine.yang -o turing-machine.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 rpc 接口代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lnctool --model ./turing-machine.yang transapi --paths ./path</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netconf <span class="built_in">log</span> 接口</span> </span><br><span class="line">nc_verb_verbose(&quot;Miaow: Turing machine transapi_init...&quot;);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 rpc 模块代码，并安装模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">autoreconf --force --install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装的模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">man netopeer-manager</span></span><br></pre></td></tr></table></figure><p>启动服务测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /usr/local/bin/netopeer-server -v 3</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /usr/local/bin/netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash"><span class="built_in">help</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Available commands:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">help</span>            Display this text</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> connect         Connect to a NETCONF server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> listen          Listen <span class="keyword">for</span> a NETCONF Call Home</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> disconnect      Disconnect from a NETCONF server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> commit          NETCONF &lt;commit&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> copy-config     NETCONF &lt;copy-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> delete-config   NETCONF &lt;delete-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> discard-changes NETCONF &lt;discard-changes&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> edit-config     NETCONF &lt;edit-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> get             NETCONF &lt;get&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> get-config      NETCONF &lt;get-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> get-schema      NETCONF &lt;get-schema&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> kill-session    NETCONF &lt;kill-session&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> lock            NETCONF &lt;lock&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> unlock          NETCONF &lt;unlock&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> validate        NETCONF &lt;validate&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">test</span>            Run a specified <span class="built_in">test</span> <span class="keyword">case</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> subscribe       NETCONF Event Notifications &lt;create-subscription&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> time            Enable/disable measuring time of <span class="built_in">command</span> execution</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> knownhosts      Manage known hosts <span class="keyword">in</span> the <span class="string">&quot;~/.ssh/known_hosts&quot;</span> file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> status          Print information about the current NETCONF session</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> user-rpc        Send your own content <span class="keyword">in</span> an RPC envelope (<span class="keyword">for</span> DEBUG purposes)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> verbose         Enable/disable verbose messages</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> quit            Quit the program</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> auth            Manage SSH authentication options</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> capability      Add/remove capability to/from the list of supported capabilities</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> editor          Manage the editor to be used <span class="keyword">for</span> manual XML pasting/writing</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">connect 127.0.0.1</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get [--<span class="built_in">help</span>] [--defaults report-all|report-all-tagged|trim|explicit] [--filter [file]] [--out file]</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get --filter=/root/turing.xml</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get-config [--<span class="built_in">help</span>] [--defaults report-all|report-all-tagged|trim|explicit] [--filter [file]] [--out file] running|startup|candidate</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config --filter=/root/turing.xml candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit-config [--<span class="built_in">help</span>] [--defop &lt;merge|replace|none&gt;] [--error &lt;stop|<span class="built_in">continue</span>|rollback&gt;] [--<span class="built_in">test</span> &lt;<span class="built_in">set</span>|test-only|test-then-set&gt;] [--config &lt;file&gt; | --url &lt;url&gt;] running|startup|candidate</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If neither --config nor --url is specified, user is prompted to <span class="built_in">set</span> edit data manually.</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">lock candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">debug</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=merge --config=/root/turing.xml candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">commit</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">unlock candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">netconf&gt; user-rpc --file=/root/rpc-run.xml</span></span><br></pre></td></tr></table></figure><h2 id="5-turing-machine-操作层示例"><a href="#5-turing-machine-操作层示例" class="headerlink" title="5. turing-machine 操作层示例"></a>5. turing-machine 操作层示例</h2><p>安装好 turing-machine 之后，可以对模块做一些操作，以下为实际的操作过程以及对应的xml编写示例。</p><p><code>&lt;edit-config&gt;</code> 详解：</p><p><strong>描述：</strong></p><p>操作将全部或部分指定配置加载到指定的目标配置数据存储。此操作允许以多种方式表示新配置，例如使用本地文件，远程文件或内联。如果目标配置数据存储不存在，它将被创建。</p><p>如果一个<code>NETCONF</code>节点(<code>peer</code>)支持：<code>url</code>能力（<a href="https://tools.ietf.org/html/rfc6241#section-8.8">8.8节</a>），那么<code>元素可以出现而不是</code>参数。</p><p>设备分析源和目标配置并执行所请求的更改。目标配置不一定被替换，就像&#96;&#96;消息一样。而是根据源数据和请求的操作来更改目标配置。</p><p>如果<code>操作包含应用于基础数据模型中相同概念节点的多个子操作，则操作的结果是未定义的</code>（即，不在NETCONF协议的范围之内）。</p><p><strong>属性：</strong></p><ul><li><code>operation</code>：<code>子树中的元素可以包含一个“`operation`”属性，它属于[3.1](https://tools.ietf.org/html/rfc6241#section-3.1)节定义的`NETCONF`名称空间。该属性标识配置中的要执行该操作的点，并可以在整个</code>子树中的多个元素上出现。如果未指定“<code>operation</code>”属性，则配置将合并到配置数据存储中。 “<code>operation</code>”属性具有以下值之一：<ul><li><code>merge</code>：由包含此属性的元素标识的配置数据与由&#96;&#96;参数标识的配置数据存储中对应级别的配置合并。这是默认行为。</li><li><code>replace</code>：由包含此属性的元素标识的配置数据将替换由<code>参数标识的配置数据存储区中的任何相关配置。如果配置数据存储中不存在此类配置数据，则会创建它。与替换整个目标配置的</code>操作不同，只有实际存在于&#96;&#96;参数中的配置受到影响。</li><li><code>create</code>：当且仅当配置数据存在于配置数据存储中时，才将包含此属性的元素标识的配置数据添加到配置中。如果配置数据存在，则返回一个<code>值为“`data-exists`”的</code>元素。</li><li><code>delete</code>：当且仅当配置数据当前存在于配置数据存储中时，才从配置中删除由包含此属性的元素标识的配置数据。如果配置数据不存在，则返回一个<code>值为“`data-missing`”的</code>元素。</li><li><code>remove</code>：如果配置数据当前存在于配置数据存储中，则从配置中删除由包含此属性的元素标识的配置数据。如果配置数据不存在，服务器会自动忽略“<code>remove</code>”操作。</li></ul></li></ul><p><strong>参数：</strong></p><ul><li><code>target</code>：正在编辑的配置数据存储的名称，例如<code>或</code>。</li><li><code>default-operation</code>：选择此<code>请求的默认操作（如“`operation`”属性中所述）。 </code>参数的默认值是<code>“merge</code>”。参数是可选的，但是如果提供，它具有以下值之一：<ul><li><code>merge</code>：参数中的配置数据与目标数据存储中相应级别的配置合并。这是默认行为。</li><li><code>replace</code>：参数中的配置数据完全替换了目标数据存储中的配置。这对加载以前保存的配置数据很有用。</li><li><code>none</code>：目标数据存储不受<code>参数中的配置影响，除非和直到传入的配置数据使用“`operation`”属性请求不同的操作。如果</code>参数中的配置包含目标数据存储中没有相应级别的数据，则返回<code>，并带有</code>缺少数据的值。使用“<code>none</code>”允许像“<code>delete</code>”这样的操作避免无意中创建要删除的元素的父层次结构。</li></ul></li><li><code>test-option</code>：只有当设备公布支持<code>:validate:1.1</code>能力时才能指定<code>元素（[8.6节](https://tools.ietf.org/html/rfc6241#section-8.6)）。</code>元素具有以下值之一：<ul><li><code>test-then-set</code>：在尝试设置之前执行验证测试。 如果发生验证错误，请不要执行&#96;&#96;操作。 这是默认的测试选项。</li><li><code>set</code>：先执行一个没有验证测试的设置。</li><li><code>test-only</code>：仅执行验证测试，而不尝试设置。</li></ul></li><li><code>error-option</code>：元素具有以下值之一：<ul><li><code>stop-on-error</code>：停止第一个错误的&#96;&#96;操作。这是默认的错误选项。</li><li><code>continue-on-error</code>：继续处理错误的配置数据;记录错误，如果发生任何错误，则产生否定响应。</li><li><code>rollback-on-error</code>：如果发生错误情况，从而生成错误严重性<code>元素，则服务器将停止处理</code>操作，并在指定的开始时将指定的配置恢复到完整状态这个&#96;&#96;操作。该选项要求服务器支持<a href="https://tools.ietf.org/html/rfc6241#section-8.5">8.5节</a>中描述的错误回滚功能。</li></ul></li><li><code>config</code>：配置数据的层次结构，由设备的一个数据模型定义。内容必须放置在适当的命名空间中，以允许设备检测适当的数据模型，并且内容必须遵循该数据模型的约束，如其能力定义所定义。能力在<a href="https://tools.ietf.org/html/rfc6241#section-8">第8节</a>讨论。</li></ul><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p><code>turing.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>end<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为 turing-machine 创建实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=merge --config=/root/turing.xml candidate</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;8&quot;&gt;</span><br><span class="line">  &lt;edit-config&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;default-operation&gt;merge&lt;/default-operation&gt;</span><br><span class="line">    &lt;config&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">        &lt;transition-function&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;end&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol/&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;1&lt;/state&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">  &lt;/edit-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;8&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p><code>delete-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;remove&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除 delta 中的一项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/delete-delta.xml candidate</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;13&quot;&gt;</span><br><span class="line">  &lt;edit-config&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;default-operation&gt;none&lt;/default-operation&gt;</span><br><span class="line">    &lt;config&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot; xmlns:xc=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;&gt;</span><br><span class="line">        &lt;transition-function&gt;</span><br><span class="line">          &lt;delta xc:operation=&quot;remove&quot;&gt;</span><br><span class="line">            &lt;label&gt;1&lt;/label&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">  &lt;/edit-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;13&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config candidate</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;14&quot;&gt;</span><br><span class="line">  &lt;get-config&gt;</span><br><span class="line">    &lt;source&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/source&gt;</span><br><span class="line">  &lt;/get-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;14&quot;&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;end&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol/&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;1&lt;/state&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h3><p><code>create-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 delta 数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/create-delta.xml candidate</span></span><br></pre></td></tr></table></figure><h3 id="合并和替换数据"><a href="#合并和替换数据" class="headerlink" title="合并和替换数据"></a>合并和替换数据</h3><p><code>merge-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;merge&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>replace-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;replace&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>合并和替换 delta：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/merge-delta.xml candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/replace-delta.xml candidate</span></span><br></pre></td></tr></table></figure><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p><code>get-turing.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>get-delta-0.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取特定数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get --filter=/root/get-turing.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;17&quot;&gt;</span><br><span class="line">  &lt;get&gt;</span><br><span class="line">    &lt;filter type=&quot;subtree&quot;&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">&lt;/turing-machine&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">  &lt;/get&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;17&quot;&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;1&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;end&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol/&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;1&lt;/state&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">      &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">      &lt;head-position&gt;0&lt;/head-position&gt;</span><br><span class="line">      &lt;tape&gt;</span><br><span class="line">        &lt;cell&gt;</span><br><span class="line">          &lt;coord&gt;0&lt;/coord&gt;</span><br><span class="line">          &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">        &lt;/cell&gt;</span><br><span class="line">      &lt;/tape&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get --filter=/root/get-delta-0.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;18&quot;&gt;</span><br><span class="line">  &lt;get&gt;</span><br><span class="line">    &lt;filter type=&quot;subtree&quot;&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">        &lt;transition-function&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">  &lt;/get&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;18&quot;&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义-rpc-方法调用"><a href="#自定义-rpc-方法调用" class="headerlink" title="自定义 rpc 方法调用"></a>自定义 rpc 方法调用</h3><p><code>rpc-initialize.xml </code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">initialize</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tape-content</span>&gt;</span>0<span class="tag">&lt;/<span class="name">tape-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">initialize</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 rpc-initialize ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">user-rpc --file=/root/rpc-initialize.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;19&quot;&gt;</span><br><span class="line">  &lt;initialize xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">    &lt;tape-content&gt;0&lt;/tape-content&gt;</span><br><span class="line">  &lt;/initialize&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;19&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><p>server 响应内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[14444]: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;20&quot;&gt;</span><br><span class="line">  &lt;initialize xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">    &lt;tape-content&gt;0&lt;/tape-content&gt;</span><br><span class="line">  &lt;/initialize&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line">netopeer-server[14444]: Calling initialize RPC function</span><br><span class="line">netopeer-server[14444]: Miaow: Turing machine rpc_initialize...</span><br><span class="line">netopeer-server[14444]: Miaow: Turing machine get_rpc_node...</span><br><span class="line">netopeer-server[14444]: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;20&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><p><code>rpc-run.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 rpc-run ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">user-rpc --file=/root/rpc-run.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;run xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">&lt;/run&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><p>server 响应内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[14444]: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;run xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">&lt;/run&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line">netopeer-server[14444]: Calling run RPC function</span><br><span class="line">netopeer-server[14444]: Miaow: Turing machine rpc_run...</span><br><span class="line">netopeer-server[14444]: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line">netopeer-server[14444]: Adding new event (0)</span><br></pre></td></tr></table></figure><h3 id="notification-测试"><a href="#notification-测试" class="headerlink" title="notification 测试"></a>notification 测试</h3><p>TODO</p><h2 id="6-Netconf总结"><a href="#6-Netconf总结" class="headerlink" title="6. Netconf总结"></a>6. Netconf总结</h2><p>Netconf2</p><p>TODO</p><h1 id="Netconf-2-使用介绍"><a href="#Netconf-2-使用介绍" class="headerlink" title="Netconf 2 使用介绍"></a>Netconf 2 使用介绍</h1><h2 id="pyang-工具使用"><a href="#pyang-工具使用" class="headerlink" title="pyang 工具使用"></a>pyang 工具使用</h2><h3 id="yang建模语言及pyang背景简介"><a href="#yang建模语言及pyang背景简介" class="headerlink" title="yang建模语言及pyang背景简介"></a>yang建模语言及pyang背景简介</h3><blockquote><p>YANG（RFC 7950）是NETCONF（RFC 6241）的数据建模语言，由IETF NETMOD WG开发。</p><p>pyang是一个YANG验证器，转换器和代码生成器，用python编写。 它可用于验证YANG模块的正确性，将YANG模块转换为其他格式，以及从模块生成代码。</p></blockquote><p>sdn、nfv盛行的今天，yang建模语言变得越来越重要，它定义于netconf协议，但是却超越了netconf协议本身，在网络世界迸发自己的活力。</p><p>如今最大的开源sdn控制器-opendaylight以yang作为建模语言进行核心模型存储，netconf以及restconf纷纷依靠yang模型定义接口,定义南向模型、北向模型。最具sdn气息的openflow也有个伴侣协议of-config使用yang建模，借助netconf通道下发相关配置。</p><p>yang很重要，但是用好yang可以选择的工具却并不多，pyang就是其中很重要的一个，这是一个由python代码编写的yang语法验证器、转换器以及代码生成器，一些开源软件使用它构建模型校验语法，比如开源netconf agent netopeer，我们作为用户也可以使用它进行语法校验，生成tree、yin等其它格式模型、数据。它是一个命令行，是一个学习好yang之路的一个好用的工具。</p><h3 id="pyang工具特性"><a href="#pyang工具特性" class="headerlink" title="pyang工具特性"></a>pyang工具特性</h3><ul><li>Validate YANG modules.  校验yang模型；</li><li>Convert YANG modules to YIN, and YIN to YANG.  yang和yin模型相互转换</li><li>Translate YANG data models to DSDL schemas, which can be used for validating various XML instance documents. See <a href="https://github.com/mbj4668/pyang/wiki/InstanceValidation">InstanceValidation</a>.  yang模型与dsdl结构模型转化</li><li>Translate YANG data models to XSD.  yang与xsd转化；</li><li>Generate UML diagrams from YANG models. See <a href="https://github.com/mbj4668/pyang/wiki/UMLOutput">UMLOutput</a> for an example.  生成yang模型uml；</li><li>Generate compact tree representation of YANG models for quick visualization. See <a href="https://github.com/mbj4668/pyang/wiki/TreeOutput">TreeOutput</a> for an example.  生成tree来呈现yang的快速视图；</li><li>Generate a skeleton XML instance document from the data model.  生成xml骨架实例；</li><li>Schema-aware translation of instance documents encoded in XML to JSON and vice-versa. See <a href="https://github.com/mbj4668/pyang/wiki/XmlJson">XmlJson</a>.  xml、json实例转换</li><li>Plugin framework for simple development of other outputs, such as code generation.  其他开发输出的框架插件，例如代码生成；</li></ul><h3 id="pyang-命令行简介"><a href="#pyang-命令行简介" class="headerlink" title="pyang 命令行简介"></a>pyang 命令行简介</h3><p>pyang命令行的使用，提供了丰富的文档说明通过pyang –help或者man pyang都能看到非常详细的信息：</p><img data-src="/2020/09/21/Netconf/netconf-note/pyangCommad.png" class="" title="pyang 命令行简介"><p>普通用户模式转换主要关注如下几个即可：</p><ul><li>-f  输出格式，这里支持的格式包括tree、yang、yin等，用户可以根据需求灵活选择；</li><li>-o 输出文件名；</li><li>-p 输出路径；</li></ul><h3 id="pyang-的yin、yang-模型转化"><a href="#pyang-的yin、yang-模型转化" class="headerlink" title="pyang 的yin、yang 模型转化"></a>pyang 的yin、yang 模型转化</h3><p>pyang的格式 yin和yang转换很简单，按照下面命令完成即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f yin -o ietf-yang-types.yin ietf-yang-types.yang</span></span><br></pre></td></tr></table></figure><h3 id="pyang-生成-tree-文件"><a href="#pyang-生成-tree-文件" class="headerlink" title="pyang 生成 tree 文件"></a>pyang 生成 tree 文件</h3><p>tree 文件是 yang 独有的一个文件，主要功能就是为 yang 生成一个快速化的浏览视图.</p><p>如下所示为一个批量处理 yang 文件生成 tree 文件的命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f tree yangdir/*.yang -o ouputdir/output.tree</span></span><br></pre></td></tr></table></figure><h3 id="yang-语法校验"><a href="#yang-语法校验" class="headerlink" title="yang 语法校验"></a>yang 语法校验</h3><p>因为没有仔细理解功能，这里只是将功能简单尝试了以下，后续有机会再系统的梳理一下这个功能，此处只给出简单的说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang  --ietf  test.yang</span></span><br></pre></td></tr></table></figure><h3 id="pyang-小结"><a href="#pyang-小结" class="headerlink" title="pyang 小结"></a>pyang 小结</h3><p>总的来说pyang是我们使用yang的一个必不可少的命令行、工具和插件，这里给出的一只是笔者平时的一些使用经验，它还有许多强大的功能在这里没有一一详述。</p><h2 id="yang-explorer-一个开源的杨浏览器和-RPC-Builder"><a href="#yang-explorer-一个开源的杨浏览器和-RPC-Builder" class="headerlink" title="yang-explorer, 一个开源的杨浏览器和 RPC Builder"></a>yang-explorer, 一个开源的杨浏览器和 RPC Builder</h2><blockquote><p><a href="https://www.kutu66.com/GitHub/article_130134">yang-explorer, 一个开源的杨浏览器和 RPC Builder</a></p></blockquote><blockquote><p>An open-source Yang Browser and RPC Builder Application</p></blockquote><ul><li><p>源代码名称:<strong>yang-explorer</strong></p></li><li><p>源代码网址:<a href="http://www.github.com/CiscoDevNet/yang-explorer">http://www.github.com/CiscoDevNet/yang-explorer</a></p></li><li><p><a href="http://www.github.com/CiscoDevNet/yang-explorer/wiki">yang-explorer源代码文档</a></p></li><li><p><a href="http://www.github.com/CiscoDevNet/yang-explorer/releases">yang-explorer源代码下载</a></p></li></ul><p>Git URL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git://www.github.com/CiscoDevNet/yang-explorer.git</span></span><br></pre></td></tr></table></figure><p>Git Clone代码到本地:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> http://www.github.com/CiscoDevNet/yang-explorer</span></span><br></pre></td></tr></table></figure><p>Subversion代码到本地:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">svn co --depth empty http://www.github.com/CiscoDevNet/yang-explorer</span></span><br><span class="line">Checked out revision 1.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> repo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">svn up trunk</span></span><br></pre></td></tr></table></figure><h3 id="描述开源Yang浏览器和-RPC-Builder应用Yang数据模型实验"><a href="#描述开源Yang浏览器和-RPC-Builder应用Yang数据模型实验" class="headerlink" title="描述开源Yang浏览器和 RPC Builder应用Yang数据模型实验"></a>描述开源Yang浏览器和 RPC Builder应用Yang数据模型实验</h3><p><strong>功能</strong></p><ul><li>从用户界面或者 命令行 上传&#x2F;编译yang模型</li><li>生成 NetConf RPC</li><li>生成 python 示例代码 <strong>[new]</strong></li><li>搜索 yang <strong>[new]</strong></li><li>针对真正的netconf服务器执行 RPC</li><li>将创建的rpc保存到收藏集以便以后使用</li><li>建立模型的依赖关系图</li><li>浏览数据模型树并检查杨属性</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>MAC，Linux ( Windows 上不支持)</li><li>python 2.7</li><li>pip软件包管理器( <a href="https://pip.pypa.io/en/stable/installing/">https://pip.pypa.io/en/stable/installing/</a> )</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If already installed, make sure that pip/setuptools are upto date (commands may vary)</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">Ubuntu: sudo pip install --upgrade setuptools</span><br></pre></td></tr></table></figure><ul><li>virtualenv ( 推荐)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu: sudo apt-get install python-virtualenv</span><br><span class="line">Fedora: sudo dnf install python-virtualenv</span><br><span class="line">MAC: sudo pip install virtualenv</span><br></pre></td></tr></table></figure><ul><li>graphviz ( <a href="http://www.graphviz.org/Download.php">http://www.graphviz.org/Download.php</a> )</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu: sudo apt-get install graphviz</span><br><span class="line">Fedora: sudo dnf install graphviz</span><br><span class="line">MAC: brew install graphviz</span><br></pre></td></tr></table></figure><ul><li>带有最新 Flash 插件的浏览器( 通过 Google Chrome 测试)</li></ul><p>Download 和 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CiscoDevNet/yang-explorer.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> yang-explorer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash setup.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: sudo may be required <span class="keyword">if</span> you <span class="keyword">do</span> not use virtualenv.</span></span><br></pre></td></tr></table></figure><p>有关更多信息，请参见第 7节疑难解答：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you get installation error for missing python.h or xmlversion.h try installing</span><br><span class="line">dependency packages:</span><br><span class="line">Ubuntu: sudo apt-get install libxml2-dev libxslt1-dev python-dev zlib1g-dev</span><br><span class="line">Fedora: sudo dnf install libxml2-devel libxslt-devel python-devel zlib-devel</span><br></pre></td></tr></table></figure><p>更新 exising 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>&lt;install-root&gt;/yang-explorer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash (<span class="keyword">if</span> you have <span class="built_in">local</span> changes)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash apply (<span class="keyword">if</span> you have <span class="built_in">local</span> changes)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash setup.sh</span></span><br></pre></td></tr></table></figure><p>备份数据</p><p>可以从数据目录备份YangExplorer数据，并且可以移植到新服务器上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -r &lt;install-root&gt;/yang-explorer/server/data &lt;backup-location&gt;/data</span></span><br></pre></td></tr></table></figure><p>从备份位置还原</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>&lt;install-root&gt;/yang-explorer/server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">move current data to tmp location <span class="built_in">mv</span> data data_old</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">replace data from backup location <span class="built_in">cp</span> -r &lt;backup-location&gt;/data data</span></span><br></pre></td></tr></table></figure><p>运行 YangExplorer, localhost Start 服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>&lt;install-root&gt;/yang-explorer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">[sudo]./start.sh &amp;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: sudo may be required <span class="keyword">if</span> you did not use virtualenv during installation.</span></span><br></pre></td></tr></table></figure><p>Start 资源管理器：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/static/YangExplorer.html</span><br></pre></td></tr></table></figure><p>运行 ip 地址( 共享服务器)  Start 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Determine &lt;ip-address&gt; using if-config<span class="comment"># Add ip-address/port in YangExplorer.html after following line:cd&lt;install-root&gt;/yang-explorer/server/static</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi YangExplorer.html</span></span><br><span class="line"> var flashvars = &#123;&#125;; </span><br><span class="line">+ flashvars.host = &#x27;&lt;ip-address&gt;&#x27;;+ flashvars.port = &#x27;8088&#x27;; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save &amp; quit<span class="comment"># Update ip-address in startup scriptcd&lt;install-root&gt;/yang-explorer</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi start.sh</span></span><br><span class="line"> (update HOST variable with &lt;ip-address&gt;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save &amp; quit. /start.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: sudo may be required <span class="keyword">if</span> you did not use virtualenv during installation.</span></span><br></pre></td></tr></table></figure><p>Start 资源管理器：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;ip-address&gt;:8088/static/YangExplorer.html</span><br></pre></td></tr></table></figure><h2 id="virtual-python-env"><a href="#virtual-python-env" class="headerlink" title="virtual python env"></a>virtual python env</h2><blockquote><p><a href="https://www.readwithu.com/Article/advanced/Mac%E4%B8%AD%E4%BD%BF%E7%94%A8virtualenv%E5%92%8Cvirtualenvwrapper.html">创建 virtual python env</a></p><p><a href="https://segmentfault.com/a/1190000014935970">python环境神器virtualenvwrapper安装与使用</a></p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="模块下载地址"><a href="#模块下载地址" class="headerlink" title="模块下载地址"></a>模块下载地址</h3><ul><li><strong>[<a href="https://rawgit.com/CESNET/libnetconf/master/doc/doxygen/html/index.html"> Libnetconf文档网站 ]</a></strong></li><li><strong>[<a href="https://github.com/CESNET/Netopeer"> Netopeer项目 ]</a></strong></li><li><strong>[<a href="https://github.com/CESNET/libnetconf"> Libnetconf项目 ]</a></strong></li><li><strong>[<a href="https://github.com/mbj4668/pyang"> Pyang项目 ]</a></strong></li><li><strong>[<a href="https://git.libssh.org/projects/libssh.git"> Libssh项目 ]</a></strong></li></ul><h3 id="模块编译安装"><a href="#模块编译安装" class="headerlink" title="模块编译安装"></a>模块编译安装</h3><blockquote><p><a href="https://blog.csdn.net/rocson001/article/details/54575899">NETCONF协议netopeer软件安装与环境搭建</a></p><p><a href="http://www.seguesoft.com/index.php/how-to-set-up-netopeer-server-to-use-with-netconfc">Set up Netopeer Server to use with NETCONFc</a></p><p><a href="https://blog.csdn.net/baiqishijkh/article/details/74006878">NETCONF协议之netopeer软件安装</a></p></blockquote><h3 id="netconf学习资料"><a href="#netconf学习资料" class="headerlink" title="netconf学习资料"></a>netconf学习资料</h3><blockquote><p><a href="https://www.cnblogs.com/ssyfj/p/11651450.html">软件定义网络基础—NETCONF协议</a></p><p><a href="https://www.sdnlab.com/17786.html">Netconf配置及其RPC和Notification下发流程解析</a></p><p><a href="https://blog.csdn.net/CSND_PAN/article/details/79541868">NETCONF协议详解</a></p><p><a href="https://blog.csdn.net/haopeng123321/article/details/54934542">NETCONF模块设计介绍</a></p><p><a href="https://blog.csdn.net/mylifeyouwill/article/details/81539547">netopeer工具的使用</a></p><p><a href="https://blog.csdn.net/xinquanv1/article/details/88133803">【开源推介02-pyang】-你离yang模型只差一个pyang工具</a></p></blockquote><h3 id="netconf相关问题解决"><a href="#netconf相关问题解决" class="headerlink" title="netconf相关问题解决"></a>netconf相关问题解决</h3><blockquote><p><a href="https://github.com/CESNET/netopeer/issues/166">An error occurred after executing the ‘commit‘’ command</a></p><p><a href="https://github.com/CESNET/netopeer/issues/138">cannot execute lock&#x2F;unlock from netopeer-cli</a></p><p><a href="https://wiki.opendaylight.org/view/YANG_Tools:Yang1.1_Draft">YANG Tools:Yang1.1 Draft Yang Tools: Yang1.1 Draft</a></p><p><a href="https://github.com/CESNET/Netopeer2/issues/333">edit-config with delete&#x3D;”operation” not working</a></p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p><a href="https://tonydeng.github.io/rfc6241-zh/">关于RFC6241中文翻译</a></p><p><a href="https://www.bookstack.cn/read/rfc7950-zh/README.md">YANG 1.1 数据建模语言</a></p><p><a href="https://tonydeng.github.io/sdn-handbook/">网络基础</a></p><p><a href="https://tools.ietf.org/id/draft-ietf-netconf-netconf-event-notifications-05.html">NETCONF Support for Event Notifications</a></p><p><a href="https://tools.ietf.org/id/draft-ietf-netconf-subscribed-notifications-09.html">Custom Subscription to Event Streams</a></p><p><a href="https://wenku.baidu.com/view/6b812dbabe23482fb5da4c3f.html">YANG模型介绍及语法</a></p><p><a href="https://www.sdnlab.com/14932.html">SDN实战团分享（七）：YANG模型与OpenDaylight南北向接口</a></p><p><a href="http://rennesong.com/2019/07/13/yang-model-tuto/">深入浅出理解 YANG 模型</a></p><p><a href="https://www.cisco.com/c/zh_cn/support/docs/storage-networking/management/200933-YANG-NETCONF-Configuration-Validation.html">配置NETCONF&#x2F;YANG并且验证Cisco IOS XE 16.x平台的示例</a></p><p><a href="https://blog.csdn.net/csnd_pan/article/details/79542917">Yang解析</a></p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000074862?section=j006">CloudEngine 7800&amp;6800&amp;5800 V100R003C00 配置指南-网络管理与监控配置</a></p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100058323/d06526ed">NE20E-S2 V800R010C10SPC500 配置指南 - 系统管理 01</a></p><p><a href="https://kurisu.love/index.php/archives/155/">NETCONF 学习 – python</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Netconf-学习笔记&quot;&gt;&lt;a href=&quot;#Netconf-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Netconf 学习笔记&quot;&gt;&lt;/a&gt;Netconf 学习笔记&lt;/h1&gt;&lt;h2 id=&quot;1-Netconf简介&quot;&gt;&lt;a href=&quot;#1-Netconf简介&quot; class=&quot;headerlink&quot; title=&quot;1. Netconf简介&quot;&gt;&lt;/a&gt;1. Netconf简介&lt;/h2&gt;&lt;p&gt;随着SDN的大热，一个诞生了十年之久的协议焕发了第二春，它就是NETCONF协议。如果你在两年前去搜索NETCONF协议，基本得到的信息都是“这个协议是一个网管协议，主要目的是弥补SNMP协议的不足，希望可以取代SNMP协议”。SNMP有哪些不足，而NETCONF是否真的能够弥补，这都不是重点，重点是NETCONF诞生至今SNMP依旧活的好好的。所以如果我们还是把NETCONF当做一个网管协议的话，估计它会在冷板凳上一直坐下去，而如果我们换一个角度去看待NETCONF协议，你会发现也许它是最适合SDN的一个协议。&lt;/p&gt;</summary>
    
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/categories/Netconf/"/>
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>Android学习笔记</title>
    <link href="http://miaopei.github.io/2019/08/27/Android/android-learn-note/"/>
    <id>http://miaopei.github.io/2019/08/27/Android/android-learn-note/</id>
    <published>2019-08-27T10:04:02.000Z</published>
    <updated>2024-06-11T05:47:18.775Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Android-开发者文档"><a href="#1-Android-开发者文档" class="headerlink" title="1. Android 开发者文档"></a>1. Android 开发者文档</h2><blockquote><p><a href="https://developer.android.com/">Android 官方 开发者文档</a></p><p><a href="hukai.me/android-training-course-in-chinese/index.html">中文翻译项目</a></p></blockquote><h2 id="2-Progressive-Web-App"><a href="#2-Progressive-Web-App" class="headerlink" title="2. Progressive Web App"></a>2. Progressive Web App</h2><blockquote><p><a href="https://juejin.im/post/5a6c86e451882573505174e7">简单介绍一下Progressive Web App(PWA)</a></p><p><a href="https://huangxuan.me/2017/02/09/nextgen-web-pwa/">下一代 Web 应用模型 —— Progressive Web App</a></p><p><a href="https://lavas.baidu.com/">LAVAS 基于 Vue.js 的 PWA 解决方案</a></p><p><a href="https://juejin.im/post/5abba6a7f265da239706ec60">PWA超简单入门</a></p><p><a href="https://zhuanlan.zhihu.com/p/40236256">PWA，现代前端必会的黑科技</a></p></blockquote><h2 id="3-Java-知识汇总"><a href="#3-Java-知识汇总" class="headerlink" title="3. Java 知识汇总"></a>3. Java 知识汇总</h2><blockquote><p><a href="https://blog.csdn.net/zhandoushi1982/article/details/8458081">JAVA的abstract修饰符 &amp;&amp; 接口interface用法 &amp;&amp; 抽象类和interface的差别</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Android-开发者文档&quot;&gt;&lt;a href=&quot;#1-Android-开发者文档&quot; class=&quot;headerlink&quot; title=&quot;1. Android 开发者文档&quot;&gt;&lt;/a&gt;1. Android 开发者文档&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a </summary>
      
    
    
    
    <category term="Android" scheme="http://miaopei.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="http://miaopei.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>架构师之路</title>
    <link href="http://miaopei.github.io/2019/07/02/Architect/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF/"/>
    <id>http://miaopei.github.io/2019/07/02/Architect/%E6%9E%B6%E6%9E%84%E5%B8%88%E4%B9%8B%E8%B7%AF/</id>
    <published>2019-07-02T02:14:50.000Z</published>
    <updated>2024-06-11T05:58:20.075Z</updated>
    
    <content type="html"><![CDATA[<h2 id="架构师入门"><a href="#架构师入门" class="headerlink" title="架构师入门"></a>架构师入门</h2><blockquote><p><a href="https://www.jianshu.com/p/a79dc35f4597">我的职业是架构师：12年经验带你入门</a></p><p><a href="http://www.ruanyifeng.com/blog/2016/09/software-architecture.html">软件架构入门 – 阮一峰</a></p><p><a href="https://zhuanlan.zhihu.com/p/37078580">成为1个架构师的入门到进阶之路（学习路线图）</a></p></blockquote><blockquote><p><a href="https://mp.weixin.qq.com/s/RahJtAlTF9vkrsj4ZlqPig">架构师之路</a></p><p><a href="https://www.w3cschool.cn/architectroad/architectroad-awk.html">W3Cschool架构师之路</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;架构师入门&quot;&gt;&lt;a href=&quot;#架构师入门&quot; class=&quot;headerlink&quot; title=&quot;架构师入门&quot;&gt;&lt;/a&gt;架构师入门&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/a79dc35f45</summary>
      
    
    
    
    <category term="架构师" scheme="http://miaopei.github.io/categories/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
    
    <category term="架构师" scheme="http://miaopei.github.io/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg的H.264解码器源代码简单分析</title>
    <link href="http://miaopei.github.io/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/"/>
    <id>http://miaopei.github.io/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/</id>
    <published>2019-05-28T02:14:50.000Z</published>
    <updated>2024-06-13T07:11:48.614Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文章参考汇总至<a href="https://blog.csdn.net/leixiaohua1020/article/details/45536607">雷神笔记</a></p></blockquote><h1 id="编码-x264"><a href="#编码-x264" class="headerlink" title="编码 - x264"></a>编码 - x264</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>最近正在研究H.264和HEVC的编码方式，因此分析了一下最常见的H.264编码器——x264的源代码。本文简单梳理一下它的结构。X264的源代码量比较大而且涉及到很多的算法，目前还有很多不懂的地方，因此也不能保证分析的完全正确。目前打算先把已经理解的部分整理出来以作备忘。</p><h3 id="1-1-函数调用关系图"><a href="#1-1-函数调用关系图" class="headerlink" title="1.1 函数调用关系图"></a>1.1 函数调用关系图</h3><span id="more"></span><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/X264%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE.png" class="" title="X264的函数调用关系图"><p>下面解释一下图中关键标记的含义。</p><h4 id="1-1-1-函数背景色"><a href="#1-1-1-函数背景色" class="headerlink" title="1.1.1 函数背景色"></a>1.1.1 函数背景色</h4><p>函数在图中以方框的形式表现出来。不同的背景色标志了该函数不同的作用：</p><ul><li><p><strong>白色背景的函数</strong>：不加区分的普通内部函数。</p></li><li><p><strong>浅红背景的函数</strong>：libx264类库的接口函数（API）。</p></li><li><p><strong>粉红色背景函数</strong>：滤波函数（Filter）。用于环路滤波，半像素插值，SSIM&#x2F;PSNR的计算。</p></li><li><p><strong>黄色背景函数</strong>：分析函数（Analysis）。用于帧内预测模式的判断，或者帧间预测模式的判断。</p></li><li><p><strong>绿色背景的函数</strong>：宏块编码函数（Encode）。通过对残差的DCT变换、量化等方式对宏块进行编码。</p></li><li><p><strong>紫色背景的函数</strong>：熵编码函数（Entropy Coding）。对宏块编码后的数据进行CABAC或者CAVLC熵编码。</p></li><li><p><strong>蓝色背景函数</strong>：汇编函数（Assembly）。做过汇编优化的函数。图中主要画出了这些函数的C语言版本，此外这些函数还包含MMX版本、SSE版本、NEON版本等。</p></li><li><p><strong>浅蓝色背景函数</strong>：码率控制函数（Rate Control）。对码率进行控制的函数。具体的方法包括了ABR、CBR、CRF等。</p></li></ul><h4 id="1-1-2-区域"><a href="#1-1-2-区域" class="headerlink" title="1.1.2 区域"></a>1.1.2 区域</h4><p>整个关系图可以分为以下几个区域：</p><ul><li><strong>最左边区域</strong>——x264命令行程序函数区域。</li><li><strong>左边中间区域</strong>——libx264内部函数区域。</li><li><strong>右上方粉红色区域</strong>——滤波模块。其中包括了环路滤波，半像素插值，SSIM&#x2F;PSNR计算。</li><li><strong>右上方黄色区域</strong>——分析模块。其中包含了帧内预测模式分析以及帧间运动估计等。</li><li><strong>右中间绿色区域</strong>——宏块编码模块。其中包含了针对编码帧的DCT变换，量化，Hadamard变换等；以及针对重建帧的DCT反变换，反量化，Hadamard反变换等。</li><li><strong>右下方紫色区域</strong>——熵编码模块。其中包含了CABAC或者CAVLC熵编码。</li></ul><h4 id="1-1-3-箭头线"><a href="#1-1-3-箭头线" class="headerlink" title="1.1.3 箭头线"></a>1.1.3 箭头线</h4><p>箭头线标志了函数的调用关系：</p><ul><li><strong>黑色箭头线</strong>：不加区别的调用关系。</li><li><strong>粉红色的箭头线</strong>：滤波函数（Filter）之间的调用关系。</li><li><strong>黄色箭头线</strong>：分析函数（Analysis）之间的调用关系。</li><li><strong>绿色箭头线</strong>：宏块编码函数（Encode）之间的调用关系。</li><li><strong>紫色箭头线</strong>：熵编码函数（Entropy Coding）之间的调用关系。</li></ul><h4 id="1-1-4-函数所在的文件"><a href="#1-1-4-函数所在的文件" class="headerlink" title="1.1.4 函数所在的文件"></a>1.1.4 函数所在的文件</h4><p>每个函数标识了它所在的文件路径。</p><h3 id="1-2-几个关键的部分"><a href="#1-2-几个关键的部分" class="headerlink" title="1.2 几个关键的部分"></a>1.2 几个关键的部分</h3><p>下文简单记录图中几个关键的部分。</p><h4 id="1-2-1-x264命令行程序"><a href="#1-2-1-x264命令行程序" class="headerlink" title="1.2.1 x264命令行程序"></a>1.2.1 x264命令行程序</h4><p>x264命令行程序指的是x264项目提供的控制台程序。通过这个程序可以调用libx264编码YUV为H.264码流。该程序的入口函数为 <code>main()</code>。<code>main()</code> 函数首先调用 <code>parse()</code> 解析输入的参数，然后调用 <code>encode()</code> 编码YUV数据。</p><p><font style="color:red;"><strong>parse()</strong></font>首先调用 <code>x264_param_default()</code> 为保存参数的 <code>x264_param_t</code> 结构体赋默认值；然后在一个大循环中通过 <code>getopt_long()</code> 解析通过命令行传递来的存储在 <code>argv[]</code> 中的参数，并作相应的设置工作；最后调用 <code>select_input()</code> 和 <code>select_output()</code> 完成输入文件格式（yuv，y4m等）和输出文件格式（裸流，mp4，mkv，FLV等）的设置。</p><p><font style="color:red;"><strong>encode()</strong></font>首先调用 <code>x264_encoder_open()</code> 打开编码器；接着在一个循环中反复调用 <code>encode_frame()</code> 一帧一帧地进行编码；最后在编码完成后调用 <code>x264_encoder_close()</code> 关闭编码器。</p><p><font style="color:red;"><strong>encode_frame()</strong></font>则调用 <code>x264_encoder_encode()</code> 将存储YUV数据的 <code>x264_picture_t</code> 编码为存储H.264数据的 <code>x264_nal_t</code>。</p><h4 id="1-2-2-libx264类库的接口"><a href="#1-2-2-libx264类库的接口" class="headerlink" title="1.2.2 libx264类库的接口"></a>1.2.2 <font style="color:#ff6600;">libx264类库的接口</font></h4><p>在一个x264编码流程中，至少需要调用如下API函数（参考文章《<a href="http://blog.csdn.net/leixiaohua1020/article/details/42078645">最简单的视频编码器：基于libx264（编码YUV为H.264）</a>》）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x264_param_default() <span class="comment">// 设置参数集结构体x264_param_t的缺省值。</span></span><br><span class="line">x264_picture_alloc() <span class="comment">// 为图像结构体x264_picture_t分配内存。</span></span><br><span class="line">x264_encoder_open() <span class="comment">// 打开编码器。</span></span><br><span class="line">x264_encoder_encode()<span class="comment">// 编码一帧图像。</span></span><br><span class="line">x264_encoder_close()<span class="comment">// 关闭编码器。</span></span><br><span class="line">x264_picture_clean()<span class="comment">// 释放x264_picture_alloc()申请的资源。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-libx264主干函数"><a href="#1-2-3-libx264主干函数" class="headerlink" title="1.2.3 libx264主干函数"></a>1.2.3 libx264主干函数</h4><p>libx264主干函数指的是编码API之后，<code>x264_slice_write()</code> 之前的函数。这一部分函数较多，暂时不详细分析，仅仅举几个例子列一下它们的功能。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">x264_encoder_open() <span class="comment">// 调用了下面的函数：</span></span><br><span class="line">x264_validate_parameters()<span class="comment">// 检查输入参数（例如输入图像的宽高是否为正数）。</span></span><br><span class="line">x264_predict_16x16_init()<span class="comment">// 初始化Intra16x16帧内预测汇编函数。</span></span><br><span class="line">x264_predict_4x4_init()<span class="comment">// 初始化Intra4x4帧内预测汇编函数。</span></span><br><span class="line">x264_pixel_init()<span class="comment">// 初始化像素值计算相关的汇编函数（包括SAD、SATD、SSD等）。</span></span><br><span class="line">x264_dct_init()<span class="comment">// 初始化DCT变换和DCT反变换相关的汇编函数。</span></span><br><span class="line">x264_mc_init() <span class="comment">// 初始化运动补偿相关的汇编函数。</span></span><br><span class="line">x264_quant_init()<span class="comment">// 初始化量化和反量化相关的汇编函数。</span></span><br><span class="line">x264_deblock_init()<span class="comment">// 初始化去块效应滤波器相关的汇编函数。</span></span><br><span class="line">x264_lookahead_init()<span class="comment">// 初始化Lookahead相关的变量。</span></span><br><span class="line">x264_ratecontrol_new()<span class="comment">// 初始化码率控制模块。</span></span><br></pre></td></tr></table></figure><p><code>x264_encoder_headers()</code> 调用了下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x264_sps_write()<span class="comment">// 输出SPS</span></span><br><span class="line">x264_pps_write()<span class="comment">// 输出PPS</span></span><br><span class="line">x264_sei_version_write()<span class="comment">// 输出SEI</span></span><br></pre></td></tr></table></figure><p>x264_encoder_encode()调用了下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x264_frame_pop_unused()<span class="comment">// 获取1个x264_frame_t类型结构体fenc。如果frames.unused[]队列不为空，就调用x264_frame_pop()从unused[]队列取1个现成的；否则就调用x264_frame_new()创建一个新的。</span></span><br><span class="line">x264_frame_copy_picture()<span class="comment">// 将输入的图像数据拷贝至fenc。</span></span><br><span class="line">x264_lookahead_put_frame()<span class="comment">// 将fenc放入lookahead.next.list[]队列，等待确定帧类型。</span></span><br><span class="line">x264_lookahead_get_frames()<span class="comment">// 通过lookahead分析帧类型。该函数调用了x264_slicetype_decide()，x264_slicetype_analyse()和x264_slicetype_frame_cost()等函数。经过一些列分析之后，最终确定了帧类型信息，并且将帧放入frames.current[]队列。</span></span><br><span class="line">x264_frame_shift()<span class="comment">// 从frames.current[]队列取出一帧用于编码。</span></span><br><span class="line">x264_reference_update() <span class="comment">// 更新参考帧列表。</span></span><br><span class="line">x264_reference_reset() <span class="comment">// 如果为IDR帧，调用该函数清空参考帧列表。</span></span><br><span class="line">x264_reference_hierarchy_reset() <span class="comment">// 如果是I（非IDR帧）、P帧、B帧（可做为参考帧），调用该函数（还没研究）。</span></span><br><span class="line">x264_reference_build_list() <span class="comment">// 创建参考帧列表list0和list1。</span></span><br><span class="line">x264_ratecontrol_start() <span class="comment">// 开启码率控制。</span></span><br><span class="line">x264_slice_init() <span class="comment">// 创建 Slice Header。</span></span><br><span class="line">x264_slices_write() <span class="comment">// 编码数据（最关键的步骤）。其中调用了x264_slice_write()完成了编码的工作（注意“x264_slices_write()”和“x264_slice_write()”名字差了一个“s”）。</span></span><br><span class="line">x264_encoder_frame_end() <span class="comment">// 编码结束后做一些后续处理，例如释放一些中间变量以及打印输出一些统计信息。其中调用了x264_frame_push_unused()将fenc重新放回frames.unused[]队列，并且调用x264_ratecontrol_end()关闭码率控制。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-x264-slice-write"><a href="#1-2-4-x264-slice-write" class="headerlink" title="1.2.4 x264_slice_write()"></a>1.2.4 x264_slice_write()</h4><p><code>x264_slice_write()</code> 用于编码 Slice。该函数中包含了一个很长的 <code>for()</code> 循环。该循环每执行一遍编码一个宏块。<code>x264_slice_write()</code> 中以下几个函数比较重要：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x264_nal_start() <span class="comment">// 开始写一个NALU。</span></span><br><span class="line">x264_macroblock_thread_init() <span class="comment">// 初始化存储宏块的重建数据缓存fdec_buf[]和编码数据缓存fenc_buf[]。</span></span><br><span class="line">x264_slice_header_write() <span class="comment">// 输出 Slice Header。</span></span><br><span class="line">x264_fdec_filter_row() <span class="comment">// 滤波模块。该模块包含了环路滤波，半像素插值，SSIM/PSNR的计算。</span></span><br><span class="line">x264_macroblock_cache_load() <span class="comment">// 将要编码的宏块的周围的宏块的信息读进来。</span></span><br><span class="line">x264_macroblock_analyse()<span class="comment">// 分析模块。该模块包含了帧内预测模式分析以及帧间运动估计等。</span></span><br><span class="line">x264_macroblock_encode() <span class="comment">// 宏块编码模块。该模块通过对残差的DCT变换、量化等方式对宏块进行编码。</span></span><br><span class="line">x264_macroblock_write_cabac() <span class="comment">// CABAC熵编码模块。</span></span><br><span class="line">x264_macroblock_write_cavlc() <span class="comment">// CAVLC熵编码模块。</span></span><br><span class="line">x264_macroblock_cache_save() <span class="comment">// 保存当前宏块的信息。</span></span><br><span class="line">x264_ratecontrol_mb() <span class="comment">// 码率控制。</span></span><br><span class="line">x264_nal_end() <span class="comment">// 结束写一个NALU。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-滤波模块"><a href="#1-2-5-滤波模块" class="headerlink" title="1.2.5 滤波模块"></a>1.2.5 <font style="color:#ffcccc;">滤波模块</font></h4><p>滤波模块对应的函数是 <code>x264_fdec_filter_row()</code>。该函数完成了环路滤波，半像素插值，<code>SSIM/PSNR</code> 的计算的功能。该函数调用了以下及个比较重要的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x264_frame_deblock_row()<span class="comment">// 去块效应滤波器。</span></span><br><span class="line">x264_frame_filter()<span class="comment">// 半像素插值。</span></span><br><span class="line">x264_pixel_ssd_wxh()<span class="comment">// PSNR计算。</span></span><br><span class="line">x264_pixel_ssim_wxh()<span class="comment">// SSIM计算。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-6-分析模块"><a href="#1-2-6-分析模块" class="headerlink" title="1.2.6 分析模块"></a>1.2.6 <font style="color:#ffcc33;">分析模块</font></h4><p>分析模块对应的函数是 <code>x264_macroblock_analyse()</code>。该函数包含了帧内预测模式分析以及帧间运动估计等。该函数调用了以下比较重要的函数（只列举了几个有代表性的函数）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x264_mb_analyse_init()<span class="comment">// Analysis模块初始化。</span></span><br><span class="line">x264_mb_analyse_intra()<span class="comment">// I 宏块帧内预测模式分析。</span></span><br><span class="line">x264_macroblock_probe_pskip()<span class="comment">// 分析是否是skip模式。</span></span><br><span class="line">x264_mb_analyse_inter_p16x16()<span class="comment">// P16x16宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_p8x8()<span class="comment">// P8x8宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_p16x8()<span class="comment">// P16x8宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_b16x16()<span class="comment">// B16x16宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_b8x8()<span class="comment">// B8x8宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_b16x8()<span class="comment">// B16x8宏块帧间预测模式分析。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-7-宏块编码模块"><a href="#1-2-7-宏块编码模块" class="headerlink" title="1.2.7 宏块编码模块"></a>1.2.7 <font style="color:#33cc00;">宏块编码模块</font></h4><p>宏块编码模块对应的函数是 <code>x264_macroblock_encode()</code>。该模块通过对残差的 DCT 变换、量化等方式对宏块进行编码。对于 <code>Intra16x16</code> 宏块，调用 <code>x264_mb_encode_i16x16()</code> 进行编码，对于 <code>Intra4x4</code>，调用 <code>x264_mb_encode_i4x4()</code> 进行编码。对于Inter类型的宏块则直接在函数体里面编码。</p><h4 id="1-2-8-熵编码模块"><a href="#1-2-8-熵编码模块" class="headerlink" title="1.2.8 熵编码模块"></a>1.2.8 <font style="color:#cc33cc;">熵编码模块</font></h4><p>CABAC 熵编码对应的函数是 <code>x264_macroblock_write_cabac()</code>。CAVLC 熵编码对应的函数是 <code>x264_macroblock_write_cavlc()</code>。<code>x264_macroblock_write_cavlc()</code> 调用了以下几个比较重要的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x264_cavlc_mb_header_i()<span class="comment">// 写入I宏块MB Header数据。包含帧内预测模式等。</span></span><br><span class="line">x264_cavlc_mb_header_p()<span class="comment">// 写入P宏块MB Header数据。包含MVD、参考帧序号等。</span></span><br><span class="line">x264_cavlc_mb_header_b()<span class="comment">// 写入B宏块MB Header数据。包含MVD、参考帧序号等。</span></span><br><span class="line">x264_cavlc_qp_delta()<span class="comment">// 写入QP。</span></span><br><span class="line">x264_cavlc_block_residual()<span class="comment">// 写入残差数据。</span></span><br></pre></td></tr></table></figure><h4 id="1-2-9-码率控制模块"><a href="#1-2-9-码率控制模块" class="headerlink" title="1.2.9 码率控制模块"></a>1.2.9 <font style="color:#66cccc;">码率控制模块</font></h4><p>码率控制模块函数分布在x264源代码不同的地方，包含了以下几个比较重要的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x264_encoder_open() 中的 x264_ratecontrol_new()<span class="comment">// 创建码率控制。</span></span><br><span class="line">x264_encoder_encode() 中的 x264_ratecontrol_start()<span class="comment">// 开始码率控制。</span></span><br><span class="line">x264_slice_write()中的 x264_ratecontrol_mb()<span class="comment">// 码率控制算法。</span></span><br><span class="line">x264_encoder_encode()中的 x264_ratecontrol_end()<span class="comment">// 结束码率控制。</span></span><br><span class="line">x264_encoder_close()中的 x264_ratecontrol_summary()<span class="comment">// 码率控制信息。</span></span><br><span class="line">x264_encoder_close()中的 x264_ratecontrol_delete()<span class="comment">// 释放码率控制。</span></span><br></pre></td></tr></table></figure><h2 id="2-x264命令行工具"><a href="#2-x264命令行工具" class="headerlink" title="2. x264命令行工具"></a>2. x264命令行工具</h2><p>该命令行工具可以调用 libx264 将 YUV 格式像素数据编码为 H.264 码流。</p><h3 id="2-1-函数调用关系图"><a href="#2-1-函数调用关系图" class="headerlink" title="2.1 函数调用关系图"></a>2.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/X264%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="X264命令行工具的源代码的调用关系"><p>从图中可以看出，X264命令行工具调用了libx264的几个API完成了H.264编码工作。使用libx264的API进行编码可以参考《<a href="http://blog.csdn.net/leixiaohua1020/article/details/42078645">最简单的视频编码器：基于libx264（编码YUV为H.264）</a>》，这个流程中最关键的API包括：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x264_param_default()<span class="comment">// 设置参数集结构体x264_param_t的缺省值。</span></span><br><span class="line">x264_encoder_open()<span class="comment">// 打开编码器。</span></span><br><span class="line">x264_encoder_headers()<span class="comment">// 输出SPS，PPS，SEI等信息。</span></span><br><span class="line">x264_encoder_encode()<span class="comment">// 编码输出一帧图像。</span></span><br><span class="line">x264_encoder_close()<span class="comment">// 关闭编码器。</span></span><br></pre></td></tr></table></figure><p>在X264命令行工具中，<code>main()</code> 首先调用 <code>parse()</code> 解析输入的命令行参数，然后调用 <code>encode()</code> 进行编码。 </p><p><code>parse()</code> 首先调用 <code>x264_param_default()</code> 为存储参数的结构体 <code>x264_param_t</code> 赋默认值；然后在一个大循环中调用 <code>getopt_long()</code> 逐个解析输入的参数，并作相应的处理；最后调用 <code>select_input()</code> 和 <code>select_output()</code> 解析输入文件格式（例如yuv，y4m…）和输出文件格式（例如raw，flv，MP4…）。</p><p><code>encode()</code> 首先调用 <code>x264_encoder_open()</code> 打开H.264编码器，然后调用 <code>x264_encoder_headers()</code> 输出H.264码流的头信息（例如SPS、PPS、SEI），接着进入一个循环并且调用 <code>encode_frame()</code> 逐帧编码视频，最后调用 <code>x264_encoder_close()</code> 关闭解码器。其中 <code>encode_frame()</code> 中又调用了 <code>x264_encoder_encode()</code> 完成了具体的编码工作。下文将会对上述流程展开分析。</p><h4 id="2-1-1-main"><a href="#2-1-1-main" class="headerlink" title="2.1.1 main()"></a>2.1.1 main()</h4><p><code>main()</code> 的定义很简单，它主要调用了两个函数：<code>parse()</code> 和 <code>encode()</code> 。<code>main()</code> 首先调用 <code>parse()</code> 解析输入的命令行参数，然后调用 <code>encode()</code> 进行编码。下面分别分析这两个函数。</p><h4 id="2-1-2-parse"><a href="#2-1-2-parse" class="headerlink" title="2.1.2 parse()"></a>2.1.2 parse()</h4><p><code>parse()</code> 用于解析命令行输入的参数（存储于 <code>argv[]</code> 中）</p><p>下面简单梳理 <code>parse()</code> 的流程：</p><p>（1）调用 <code>x264_param_default()</code> 为存储参数的结构体 <code>x264_param_t</code> 赋默认值</p><p>（2）调用 <code>x264_param_default_preset()</code> 为 <code>x264_param_t</code> 赋值</p><p>（3）在一个大循环中调用 <code>getopt_long()</code> 逐个解析输入的参数，并作相应的处理。举几个例子：</p><ul><li>a) “-h”：调用 <code>help()</code> 打开帮助菜单。</li><li>b) “-V” 调用 <code>print_version_info()</code> 打印版本信息。</li><li>c)对于长选项，调用 <code>x264_param_parse()</code> 进行处理。</li></ul><p>（4）调用 <code>select_input()</code> 解析输出文件格式（例如raw，flv，MP4…）</p><p>（5）调用 <code>select_output()</code> 解析输入文件格式（例如yuv，y4m…）</p><p>下文按照顺序记录parse()中涉及到的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">x264_param_default()</span><br><span class="line">x264_param_default_preset()</span><br><span class="line">help()</span><br><span class="line">print_version_info()</span><br><span class="line">x264_param_parse()</span><br><span class="line">select_input()</span><br><span class="line">select_output()</span><br></pre></td></tr></table></figure><p><code>x264_param_default()</code> 是一个x264的API。该函数用于设置x264中 <code>x264_param_t</code> 结构体的默认值。</p><p><code>x264_param_default_preset()</code> 是一个 libx264 的 API，用于设置 x264 的 preset 和 tune。</p><p>从源代码可以看出，<code>x264_param_default_preset()</code> 调用 <code>x264_param_apply_preset()</code> 设置 preset，调用 <code>x264_param_apply_tune()</code> 设置 tune。记录一下这两个函数。</p><p><code>help()</code> 用于打印帮助菜单。在 x264 命令行程序中添加 “-h” 参数后会调用该函数。</p><p><code>print_version_info()</code> 用于打印 x264 的版本信息。在x264命令行程序中添加 “-V” 参数后会调用该函数。</p><p><code>x264_param_parse()</code> 是一个 x264 的 API。该函数以字符串键值对的方式设置 <code>x264_param_t</code> 结构体的一个成员变量。</p><p><code>x264_param_parse()</code> 中判断参数的宏 <code>OPT()</code> 和 <code>OPT2()</code> 实质上就是 <code>strcmp()</code>。由此可见该函数的流程首先是调用 <code>strcmp()</code> 判断当前输入参数的名称 name，然后再调用 <code>atoi()</code>，<code>atof()</code>，或者 <code>atobool()</code> 等将当前输入参数值 value 转换成相应类型的值并赋值给对应的参数。</p><p><code>x264_param_apply_profile()</code> 是一个 x264 的 API。该函数用于设置 x264 的 profile</p><p><code>select_output()</code> 用于设定输出的文件格式。</p><p><code>select_input()</code> 用于设定输入的文件格式。</p><h4 id="2-1-3-encode"><a href="#2-1-3-encode" class="headerlink" title="2.1.3 encode()"></a>2.1.3 encode()</h4><p><code>encode()</code> 编码 YUV 为 H.264 码流</p><p>从源代码可以梳理出来 <code>encode()</code> 的流程：</p><p>（1）调用 <code>x264_encoder_open()</code> 打开 H.264 编码器。</p><p>（2）调用 <code>x264_encoder_parameters()</code> 获得当前的参数集 <code>x264_param_t</code>，用于后续步骤中的一些配置。</p><p>（3）调用输出格式（H.264裸流、FLV、mp4等）对应 <code>cli_output_t</code> 结构体的 <code>set_param()</code> 方法，为输出格式的封装器设定参数。其中参数源自于上一步骤得到的 <code>x264_param_t</code>。</p><p>（4）如果不是在每个keyframe前面都增加 SPS&#x2F;PPS&#x2F;SEI 的话，就调用 <code>x264_encoder_headers()</code> 在整个码流前面加 SPS&#x2F;PPS&#x2F;SEI。</p><p>（5）进入一个循环中进行一帧一帧的将 YUV 编码为 H.264：</p><ul><li>a)调用输入格式（YUV、Y4M等）对应的 <code>cli_vid_filter_t</code> 结构体 <code>get_frame()</code> 方法，获取一帧YUV数据。</li><li>b)调用 <code>encode_frame()</code> 编码该帧YUV数据为H.264数据，并且输出出来。该函数内部调用<code>x264_encoder_encode()</code> 完成编码工作，调用输出格式对应 <code>cli_output_t</code> 结构体的 <code>write_frame()</code> 完成了输出工作。</li><li>c)调用输入格式（YUV、Y4M等）对应的 <code>cli_vid_filter_t</code> 结构体 <code>release_frame()</code> 方法，释放刚才获取的 YUV 数据。</li><li>d)调用 <code>print_status()</code> 输出一些统计信息。</li></ul><p>（6）编码即将结束的时候，进入另一个循环，输出编码器中缓存的视频帧：</p><ul><li>a)不再传递新的YUV数据，直接调用 <code>encode_frame()</code>，将编码器中缓存的剩余几帧数据编码输出出来。</li><li>b)调用 <code>print_status()</code> 输出一些统计信息。</li></ul><p>（7）调用 <code>x264_encoder_close()</code> 关闭 H.264 编码器。</p><p><code>encode()</code> 的流程中涉及到 libx264 的几个关键的 API：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x264_encoder_open()<span class="comment">// 打开H.264编码器。</span></span><br><span class="line">x264_encoder_headers()<span class="comment">// 输出SPS/PPS/SEI。</span></span><br><span class="line">x264_encoder_encode()<span class="comment">// 编码一帧数据。</span></span><br><span class="line">x264_encoder_close()<span class="comment">// 关闭H.264编码器。</span></span><br></pre></td></tr></table></figure><p>此外上述流程中涉及到两个比较简单的函数：<code>encode_frame()</code> 和 <code>print_status()</code>。其中 <code>encode_frame()</code> 用于编码一帧数据，而 <code>print_status()</code> 用于输出一帧数据编码后的统计信息。下文记录一下这两个函数的定义。</p><p><code>encode_frame()</code> 内部调用 <code>x264_encoder_encode()</code> 完成编码工作，调用输出格式对应 <code>cli_output_t</code> 结构体的 <code>write_frame() </code>完成了输出工作。</p><p>print_status()的代码不再详细记录，它的输出效果如下图中红框中的文字。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/print_status.png" class="" title="print_status"><h3 id="2-2-X264-控制台程序中和输入输出相关的结构体"><a href="#2-2-X264-控制台程序中和输入输出相关的结构体" class="headerlink" title="2.2 X264 控制台程序中和输入输出相关的结构体"></a>2.2 X264 控制台程序中和输入输出相关的结构体</h3><p>在x264控制台程序中有3个和输入输出相关的结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">cli_output_t</span><span class="comment">// 输出格式对应的结构体。输出格式一般为H.264裸流、FLV、MP4等。</span></span><br><span class="line"><span class="type">cli_input_t</span><span class="comment">// 输入格式对应的结构体。输入格式一般为纯YUV像素数据，Y4M格式数据等。</span></span><br><span class="line"><span class="type">cli_vid_filter_t</span><span class="comment">// 输入格式滤镜结构体。滤镜可以对输入数据做一些简单的处理，例如拉伸、裁剪等等（当然滤镜也可以不作任何处理，直接读取输入数据）。</span></span><br></pre></td></tr></table></figure><p>在 x264 的编码过程中，调用 <code>cli_vid_filter_t</code> 结构体的 <code>get_frame()</code> 读取 YUV 数据，调用 <code>cli_output_t</code> 的 <code>write_frame()</code> 写入数据。</p><h2 id="3-编码器主干部分"><a href="#3-编码器主干部分" class="headerlink" title="3. 编码器主干部分"></a>3. 编码器主干部分</h2><p>“主干部分”指的就是libx264中最核心的接口函数—— <code>x264_encoder_encode()</code> ，以及相关的几个接口函数<code>x264_encoder_open()</code>，<code>x264_encoder_headers()</code>，和 <code>x264_encoder_close()</code>。</p><h3 id="3-1-函数调用关系图"><a href="#3-1-函数调用关系图" class="headerlink" title="3.1 函数调用关系图"></a>3.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/X264%E7%BC%96%E7%A0%81%E5%99%A8%E4%B8%BB%E5%B9%B2%E9%83%A8%E5%88%86%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="X264编码器主干部分的函数调用关系"><p>从图中可以看出，x264 主干部分最复杂的函数就是 <code>x264_encoder_encode()</code>，该函数完成了编码一帧 YUV 为H.264 码流的工作。与之配合的还有打开编码器的函数 <code>x264_encoder_open()</code>，关闭编码器的函数 <code>x264_encoder_close()</code>，以及输出 SPS&#x2F;PPS&#x2F;SEI 这样的头信息的 <code>x264_encoder_headers()</code>。</p><p><code>x264_encoder_open()</code> 用于打开编码器，其中初始化了 libx264 编码所需要的各种变量。它调用了下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x264_validate_parameters()<span class="comment">// 检查输入参数（例如输入图像的宽高是否为正数）。</span></span><br><span class="line">x264_predict_16x16_init()<span class="comment">// 初始化Intra16x16帧内预测汇编函数。</span></span><br><span class="line">x264_predict_4x4_init()<span class="comment">// 初始化Intra4x4帧内预测汇编函数。</span></span><br><span class="line">x264_pixel_init()<span class="comment">// 初始化像素值计算相关的汇编函数（包括SAD、SATD、SSD等）。</span></span><br><span class="line">x264_dct_init()<span class="comment">// 初始化DCT变换和DCT反变换相关的汇编函数。</span></span><br><span class="line">x264_mc_init()<span class="comment">// 初始化运动补偿相关的汇编函数。</span></span><br><span class="line">x264_quant_init()<span class="comment">// 初始化量化和反量化相关的汇编函数。</span></span><br><span class="line">x264_deblock_init()<span class="comment">// 初始化去块效应滤波器相关的汇编函数。</span></span><br><span class="line">x264_lookahead_init()<span class="comment">// 初始化Lookahead相关的变量。</span></span><br><span class="line">x264_ratecontrol_new()<span class="comment">// 初始化码率控制相关的变量。</span></span><br></pre></td></tr></table></figure><p><code>x264_encoder_headers()</code> 输出 SPS&#x2F;PPS&#x2F;SEI 这些 H.264 码流的头信息。它调用了下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x264_sps_write()<span class="comment">// 输出SPS</span></span><br><span class="line">x264_pps_write()<span class="comment">// 输出PPS</span></span><br><span class="line">x264_sei_version_write()<span class="comment">// 输出SEI</span></span><br></pre></td></tr></table></figure><p><code>x264_encoder_encode()</code> 编码一帧 YUV 为 H.264 码流。它调用了下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">x264_frame_pop_unused()<span class="comment">// 获取1个x264_frame_t类型结构体fenc。如果frames.unused[]队列不为空，就调用x264_frame_pop()从unused[]队列取1个现成的；否则就调用x264_frame_new()创建一个新的。</span></span><br><span class="line">x264_frame_copy_picture() <span class="comment">// 将输入的图像数据拷贝至fenc。</span></span><br><span class="line">x264_lookahead_put_frame()  <span class="comment">// 将fenc放入lookahead.next.list[]队列，等待确定帧类型。</span></span><br><span class="line">x264_lookahead_get_frames() <span class="comment">// 通过lookahead分析帧类型。该函数调用了x264_slicetype_decide()，x264_slicetype_analyse()和x264_slicetype_frame_cost()等函数。经过一些列分析之后，最终确定了帧类型信息，并且将帧放入frames.current[]队列。</span></span><br><span class="line">x264_frame_shift() <span class="comment">// 从frames.current[]队列取出1帧用于编码。</span></span><br><span class="line">x264_reference_update() <span class="comment">// 更新参考帧列表。</span></span><br><span class="line">x264_reference_reset() <span class="comment">// 如果为IDR帧，调用该函数清空参考帧列表。</span></span><br><span class="line">x264_reference_hierarchy_reset() <span class="comment">// 如果是I（非IDR帧）、P帧、B帧（可做为参考帧），调用该函数。</span></span><br><span class="line">x264_reference_build_list() <span class="comment">// 创建参考帧列表list0和list1。</span></span><br><span class="line">x264_ratecontrol_start() <span class="comment">// 开启码率控制。</span></span><br><span class="line">x264_slice_init() <span class="comment">// 创建 Slice Header。</span></span><br><span class="line">x264_slices_write() <span class="comment">// 编码数据（最关键的步骤）。其中调用了x264_slice_write()完成了编码的工作（注意“x264_slices_write()”和“x264_slice_write()”名字差了一个“s”）。</span></span><br><span class="line">x264_encoder_frame_end() <span class="comment">// 编码结束后做一些后续处理，例如记录一些统计信息。其中调用了x264_frame_push_unused()将fenc重新放回frames.unused[]队列，并且调用x264_ratecontrol_end()关闭码率控制。</span></span><br></pre></td></tr></table></figure><p><code>x264_encoder_close()</code> 用于关闭解码器，同时输出一些统计信息。它调用了下面的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x264_lookahead_delete()<span class="comment">// 释放Lookahead相关的变量。</span></span><br><span class="line">x264_ratecontrol_summary()<span class="comment">// 汇总码率控制信息。</span></span><br><span class="line">x264_ratecontrol_delete()<span class="comment">// 关闭码率控制。</span></span><br></pre></td></tr></table></figure><h4 id="3-1-1-x264-encoder-open"><a href="#3-1-1-x264-encoder-open" class="headerlink" title="3.1.1 x264_encoder_open()"></a>3.1.1 x264_encoder_open()</h4><p><code>x264_encoder_open()</code> 是一个 libx264 的 API。该函数用于打开编码器，其中初始化了 libx264 编码所需要的各种变量。</p><p>根据函数调用的顺序，看一下 <code>x264_encoder_open()</code> 调用的下面几个函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">x264_sps_init()<span class="comment">// 根据输入参数生成H.264码流的SPS信息。</span></span><br><span class="line">x264_pps_init()<span class="comment">// 根据输入参数生成H.264码流的PPS信息。</span></span><br><span class="line">x264_predict_16x16_init()<span class="comment">// 初始化Intra16x16帧内预测汇编函数。</span></span><br><span class="line">x264_predict_4x4_init()<span class="comment">// 初始化Intra4x4帧内预测汇编函数。</span></span><br><span class="line">x264_pixel_init()<span class="comment">// 初始化像素值计算相关的汇编函数（包括SAD、SATD、SSD等）。</span></span><br><span class="line">x264_dct_init()<span class="comment">// 初始化DCT变换和DCT反变换相关的汇编函数。</span></span><br><span class="line">x264_mc_init()<span class="comment">// 初始化运动补偿相关的汇编函数。</span></span><br><span class="line">x264_quant_init()<span class="comment">// 初始化量化和反量化相关的汇编函数。</span></span><br><span class="line">x264_deblock_init()<span class="comment">// 初始化去块效应滤波器相关的汇编函数。</span></span><br><span class="line">mbcmp_init()<span class="comment">// 决定像素比较的时候使用SAD还是SATD。</span></span><br></pre></td></tr></table></figure><h4 id="3-1-2-相关知识简述"><a href="#3-1-2-相关知识简述" class="headerlink" title="3.1.2 相关知识简述"></a>3.1.2 相关知识简述</h4><p>简单记录一下帧内预测的方法。帧内预测根据宏块左边和上边的边界像素值推算宏块内部的像素值，帧内预测的效果如下图所示。其中左边的图为图像原始画面，右边的图为经过帧内预测后没有叠加残差的画面。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-01.png" class="" title="帧内预测-01"><p>H.264 中有两种帧内预测模式：<code>16x16</code> 亮度帧内预测模式和 <code>4x4</code> 亮度帧内预测模式。其中 <code>16x16</code> 帧内预测模式一共有 4 种，如下图所示。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-02.png" class="" title="帧内预测-02"><p>这 4 种模式列表如下。</p><table><thead><tr><th>模式</th><th>描述</th></tr></thead><tbody><tr><td>Vertical</td><td>由上边像素推出相应像素值</td></tr><tr><td>Horizontal</td><td>由左边像素推出相应像素值</td></tr><tr><td>DC</td><td>由上边和左边像素平均值推出相应像素值</td></tr><tr><td>Plane</td><td>由上边和左边像素推出相应像素值</td></tr></tbody></table><p><code>4x4</code> 帧内预测模式一共有 9 种，如下图所示。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-03.png" class="" title="帧内预测-03"><p>简单记录几个像素计算中的概念。SAD 和 SATD 主要用于帧内预测模式以及帧间预测模式的判断。有关 SAD、SATD、SSD 的定义如下：</p><blockquote><p>SAD（Sum of Absolute Difference）也可以称为SAE（Sum of Absolute Error），即绝对误差和。它的计算方法就是求出两个像素块对应像素点的差值，将这些差值分别求绝对值之后再进行累加。</p><p>SATD（Sum of Absolute Transformed Difference）即Hadamard变换后再绝对值求和。它和SAD的区别在于多了一个“变换”。</p><p>SSD（Sum of Squared Difference）也可以称为SSE（Sum of Squared Error），即差值的平方和。它和SAD的区别在于多了一个“平方”。</p></blockquote><p>H.264中使用SAD和SATD进行宏块预测模式的判断。早期的编码器使用SAD进行计算，近期的编码器多使用SATD进行计算。为什么使用SATD而不使用SAD呢？关键原因在于编码之后码流的大小是和图像块DCT变换后频域信息紧密相关的，而和变换前的时域信息关联性小一些。SAD只能反应时域信息；SATD却可以反映频域信息，而且计算复杂度也低于DCT变换，因此是比较合适的模式选择的依据。</p><p>使用SAD进行模式选择的示例如下所示。下面这张图代表了一个普通的 <code>Intra16x16</code> 的宏块的像素。它的下方包含了使用Vertical，Horizontal，DC和Plane四种帧内预测模式预测的像素。通过计算可以得到这几种预测像素和原始像素之间的SAD（SAE）分别为3985，5097，4991，2539。由于Plane模式的SAD取值最小，由此可以断定Plane模式对于这个宏块来说是最好的帧内预测模式。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-04.png" class="" title="帧内预测-04"><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-05.png" class="" title="帧内预测-05"><p>简单记录一下DCT相关的知识。DCT变换的核心理念就是把图像的低频信息（对应大面积平坦区域）变换到系数矩阵的左上角，而把高频信息变换到系数矩阵的右下角，这样就可以在压缩的时候（量化）去除掉人眼不敏感的高频信息（位于矩阵右下角的系数）从而达到压缩数据的目的。二维 <code>8x8</code> DCT变换常见的示意图如下所示。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-06.png" class="" title="帧内预测-06"><p>早期的DCT变换都使用了 <code>8x8</code> 的矩阵（变换系数为小数）。在 H.264 标准中新提出了一种 <code>4x4</code> 的矩阵。这种 <code>4x4</code> DCT变换的系数都是整数，一方面提高了运算的准确性，一方面也利于代码的优化。<code>4x4</code> 整数DCT变换的示意图如下所示（作为对比，右侧为 <code>4x4</code> 块的Hadamard变换的示意图）。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-07.png" class="" title="帧内预测-07"><p>简单记录一下半像素插值的知识。《H.264标准》中规定，运动估计为 <code>1/4</code> 像素精度。因此在H.264编码和解码的过程中，需要将画面中的像素进行插值——简单地说就是把原先的 1 个像素点拓展成 <code>4x4</code> 一共16个点。下图显示了H.264编码和解码过程中像素插值情况。可以看出原先的 G 点的右下方通过插值的方式产生了a、b、c、d等一共 16 个点。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-08.png" class="" title="帧内预测-08"><p>如图所示，<code>1/4</code> 像素内插一般分成两步：</p><p>（1）半像素内插。这一步通过 6 抽头滤波器获得 5 个半像素点。</p><p>（2）线性内插。这一步通过简单的线性内插获得剩余的 <code>1/4</code> 像素点。</p><p>图中半像素内插点为 b、m、h、s、j 五个点。半像素内插方法是对整像素点进行 6 抽头滤波得出，滤波器的权重为( <code>1/32, -5/32, 5/8, 5/8, -5/32, 1/32</code> )。例如 b 的计算公式为：</p><p><strong><code>b=round( (E - 5F + 20G + 20H - 5I + J ) / 32)</code></strong></p><p>剩下几个半像素点的计算关系如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">m：由B、D、H、N、S、U计算</span><br><span class="line">h：由A、C、G、M、R、T计算</span><br><span class="line">s：由K、L、M、N、P、Q计算</span><br><span class="line">j：由cc、dd、h、m、ee、ff计算。需要注意j点的运算量比较大，因为cc、dd、ee、ff都需要通过半像素内插方法进行计算。</span><br></pre></td></tr></table></figure><p>在获得半像素点之后，就可以通过简单的线性内插获得 <code>1/4</code> 像素内插点了。<code>1/4</code> 像素内插的方式如下图所示。例如图中 a 点的计算公式如下：</p><p><strong><code>A=round( (G+b)/2 )</code></strong></p><p>在这里有一点需要注意：位于 4 个角的e、g、p、r 四个点并不是通过 j 点计算计算的，而是通过b、h、s、m四个半像素点计算的。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%B8%A7%E5%86%85%E9%A2%84%E6%B5%8B-09.png" class="" title="帧内预测-09"><h4 id="3-1-3-x264-encoder-headers"><a href="#3-1-3-x264-encoder-headers" class="headerlink" title="3.1.3 x264_encoder_headers()"></a>3.1.3 x264_encoder_headers()</h4><p><code>x264_encoder_headers()</code> 是libx264的一个API函数，用于输出 SPS&#x2F;PPS&#x2F;SEI 这些 H.264 码流的头信息。</p><h4 id="3-1-4-x264-encoder-close"><a href="#3-1-4-x264-encoder-close" class="headerlink" title="3.1.4 x264_encoder_close()"></a>3.1.4 x264_encoder_close()</h4><p><code>x264_encoder_close()</code> 是libx264的一个API函数。该函数用于关闭编码器，同时输出一些统计信息。</p><h4 id="3-1-5-x264-encoder-encode"><a href="#3-1-5-x264-encoder-encode" class="headerlink" title="3.1.5 x264_encoder_encode()"></a>3.1.5 x264_encoder_encode()</h4><p><code>x264_encoder_encode()</code> 是libx264的API函数，用于编码一帧 YUV 为 H.264 码流。</p><p><code>x264_encoder_encode()</code> 的流程大致如下：</p><p>（1）调用 <code>x264_frame_pop_unused</code> 获取一个空的 <code>fenc</code>（x264_frame_t类型）用于存储一帧编码像素数据。</p><p>（2）调用 <code>x264_frame_copy_picture()</code> 将外部结构体的 <code>pic_in</code>（<code>x264_picture_t</code>类型）的数据拷贝给内部结构体的 <code>fenc</code>（<code>x264_frame_t</code> 类型）。</p><p>（3）调用 <code>x264_lookahead_put_frame()</code> 将 <code>fenc</code> 放入 Lookahead 模块的队列中，等待确定帧类型。</p><p>（4）调用 <code>x264_lookahead_get_frames()</code> 分析 Lookahead 模块中一个帧的帧类型。分析后的帧保存在<code>frames.current[]</code> 中。</p><p>（5）调用 <code>x264_frame_shift()</code> 从 <code>frames.current[]</code> 中取出分析帧类型之后的 <code>fenc</code>。</p><p>（6）调用 <code>x264_reference_update()</code> 更新参考帧队列 <code>frames.reference[]</code>。</p><p>（7）如果编码帧 <code>fenc</code> 是 <code>IDR</code> 帧，调用 <code>x264_reference_reset()</code> 清空参考帧队列 <code>frames.reference[]</code>。</p><p>（8）调用 <code>x264_reference_build_list()</code> 创建参考帧列表 <code>List0</code> 和 <code>List1</code>。</p><p>（9）根据选项做一些配置：</p><ul><li>a) 如果 <code>b_aud</code> 不为 0，输出 AUD 类型 NALU</li><li>b) 在当前帧是关键帧的情况下，如果 <code>b_repeat_headers</code> 不为 0，调用 <code>x264_sps_write()</code> 和 <code>x264_pps_write()</code> 输出 SPS 和 PPS。</li><li>c) 输出一些特殊的 SEI 信息，用于适配各种解码器。</li></ul><p>（10）调用 <code>x264_slice_init()</code> 初始化 Slice Header 信息。</p><p>（11）调用 <code>x264_slices_write()</code> 进行编码。该部分是 libx264 的核心，在后续文章中会详细分析。</p><p>（12）调用 <code>x264_encoder_frame_end()</code> 做一些编码后的后续处理。</p><p><code>x264_slice_write()</code> 是完成编码工作的函数。该函数中包含了去块效应滤波，运动估计，宏块编码，熵编码等模块。</p><h2 id="4-x264-slice-write"><a href="#4-x264-slice-write" class="headerlink" title="4. x264_slice_write()"></a>4. x264_slice_write()</h2><p><code>x264_slice_write()</code> 是 x264 项目的核心，它完成了编码了一个 Slice 的工作。根据功能的不同，该函数可以分为滤波（Filter），分析（Analysis），宏块编码（Encode）和熵编码（Entropy Encoding）几个子模块。</p><h3 id="4-1-函数调用关系图"><a href="#4-1-函数调用关系图" class="headerlink" title="4.1 函数调用关系图"></a>4.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264_slice_write.png" class="" title="x264_slice_write"><p>x264_slice_write()调用了如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x264_nal_start()<span class="comment">// 开始写一个NALU。</span></span><br><span class="line">x264_macroblock_thread_init() <span class="comment">// 初始化宏块重建数据缓存fdec_buf[]和编码数据缓存fenc_buf[]。</span></span><br><span class="line">x264_slice_header_write()<span class="comment">// 输出 Slice Header。</span></span><br><span class="line">x264_fdec_filter_row()<span class="comment">// 滤波模块。该模块包含了环路滤波，半像素插值，SSIM/PSNR的计算。</span></span><br><span class="line">x264_macroblock_cache_load() <span class="comment">// 将要编码的宏块的周围的宏块的信息读进来。</span></span><br><span class="line">x264_macroblock_analyse()<span class="comment">// 分析模块。该模块包含了帧内预测模式分析以及帧间运动估计等。</span></span><br><span class="line">x264_macroblock_encode()<span class="comment">// 宏块编码模块。该模块通过对残差的DCT变换、量化等方式对宏块进行编码。</span></span><br><span class="line">x264_macroblock_write_cabac()<span class="comment">// CABAC熵编码模块。</span></span><br><span class="line">x264_macroblock_write_cavlc()<span class="comment">// CAVLC熵编码模块。</span></span><br><span class="line">x264_macroblock_cache_save()<span class="comment">// 保存当前宏块的信息。</span></span><br><span class="line">x264_ratecontrol_mb()<span class="comment">// 码率控制。</span></span><br><span class="line">x264_nal_end() <span class="comment">// 结束写一个NALU。</span></span><br></pre></td></tr></table></figure><p>根据源代码简单梳理了 <code>x264_slice_write()</code> 的流程，如下所示：</p><p>（1）调用 <code>x264_nal_start()</code> 开始输出一个 NALU。</p><p>（2）<code>x264_macroblock_thread_init()</code>：初始化宏块重建像素缓存 <code>fdec_buf[]</code> 和编码像素缓存 <code>fenc_buf[]</code>。</p><p>（3）调用 <code>x264_slice_header_write()</code> 输出 Slice Header。</p><p>（4）进入一个循环，该循环每执行一遍编码一个宏块：</p><ul><li>a) 每处理一行宏块，调用一次 <code>x264_fdec_filter_row()</code> 执行滤波模块。</li><li>b) 调用 <code>x264_macroblock_cache_load_progressive()</code> 将要编码的宏块的周围的宏块的信息读进来。</li><li>c) 调用 <code>x264_macroblock_analyse()</code> 执行分析模块。</li><li>d) 调用 <code>x264_macroblock_encode()</code> 执行宏块编码模块。</li><li>e) 调用 <code>x264_macroblock_write_cabac()/x264_macroblock_write_cavlc()</code> 执行熵编码模块。</li><li>f) 调用 <code>x264_macroblock_cache_save()</code> 保存当前宏块的信息。</li><li>g) 调用 <code>x264_ratecontrol_mb()</code> 执行码率控制。</li><li>h) 准备处理下一个宏块。</li></ul><p>（5）调用 <code>x264_nal_end()</code> 结束输出一个 NALU。</p><h3 id="4-2-重要的数据结构"><a href="#4-2-重要的数据结构" class="headerlink" title="4.2 重要的数据结构"></a>4.2 重要的数据结构</h3><p>X264在宏块编码方面涉及到下面几个比较重要的结构体：</p><p>宏块像素存储缓存  <code>fenc_buf[]</code> 和 <code>fdec_buf[]</code> ——位于 <code>x264_t.mb.pic</code> 中，用于存储宏块的亮度和色度像素。<br>宏块各种信息的缓存 Cache——位于 <code>x264_t.mb.pic</code> 中，用于存储宏块的信息例如 <code>4x4</code> 帧内预测模式、DCT 的非 0 系数个数、运动矢量、参考帧序号等。</p><p>图像半像素点存储空间 <code>filtered[]</code> ——位于 <code>x264_frame_t</code> 中，用于存储半像素插值后的点。</p><h4 id="4-2-1-宏块像素存储缓存-fenc-buf-和-fdec-buf"><a href="#4-2-1-宏块像素存储缓存-fenc-buf-和-fdec-buf" class="headerlink" title="4.2.1 宏块像素存储缓存 fenc_buf[] 和 fdec_buf[]"></a>4.2.1 宏块像素存储缓存 fenc_buf[] 和 fdec_buf[]</h4><p><code>fenc_buf[]</code> 和 <code>fdec_buf[]</code> 为 <code>x264_t.mb.cache</code> 中的结构体，用于存储一个宏块的像素数据。其中 <code>fenc_buf[]</code> 用于存储宏块编码像素数据，而 <code>fdec_buf[]</code> 用于存储宏块重建像素数据。他们的定义如下所示。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* space for p_fenc and p_fdec */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FENC_STRIDE 16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FDEC_STRIDE 32</span></span><br><span class="line"><span class="comment">//存储编码宏块fenc和重建宏块fdec的内存</span></span><br><span class="line"><span class="type">uint8_t</span> fenc_buf[<span class="number">48</span>*FENC_STRIDE]</span><br><span class="line"><span class="type">uint8_t</span> fdec_buf[<span class="number">52</span>*FDEC_STRIDE]</span><br></pre></td></tr></table></figure><p>从定义可以看出，<code>fenc_buf[]</code> 每行 16 个数据；而 <code>fdec_buf[]</code> 每行 32 个数据。在 <code>x264_t.mb.cache</code> 中和 <code>fenc_buf[]</code> 和 <code>fdec_buf[]</code> 相关的指针数组还有 <code>p_fenc[3]</code> 和 <code>p_fdec[3]</code> ，它们中的 3 个元素 <code>[0]、[1]、[2]</code> 分别指向分别指向对应缓存 buf 的 Y、U、V 分量。下图画出了像素格式为 YUV420P 的时候 <code>fenc_buf[]</code> 的存储示意图。图中灰色区域存储 Y，蓝色区域存储 U，粉红区域存储 V。<code>p_fenc[0]</code> 指向 Y 的存储区域，<code>p_fenc[1]</code> 指向 U 的存储区域，<code>p_fenc[2]</code> 指向 V 的存储区域，在图中以方框的形式标注了出来。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264-01.png" class="" title="x264-01"><p>下图画出了像素格式为 YUV420P 的时候 <code>fdec_buf[]</code> 的存储示意图。图中灰色区域存储 Y，蓝色区域存储 U，粉红区域存储 V。<code>p_fenc[0]</code> 指向 Y 的存储区域，<code>p_fenc[1]</code> 指向 U 的存储区域，<code>p_fenc[2]</code> 指向 V 的存储区域，在图中以方框的形式标注了出来。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264-02.png" class="" title="x264-02"><p>从图中可以看出，<code>fdec_buf[]</code> 和 <code>fenc_buf[]</code> 主要的区别在于 <code>fdec_buf[]</code> 像素块的左边和上边包含了左上方相邻块用于预测的像素。</p><h3 id="4-3-宏块各种信息的缓存Cache"><a href="#4-3-宏块各种信息的缓存Cache" class="headerlink" title="4.3 宏块各种信息的缓存Cache"></a>4.3 宏块各种信息的缓存Cache</h3><p>在 x264 中 <code>x264_t.mb.cache</code> 结构体中包含了存储宏块信息的各种各样的缓存 Cache。例如：</p><ul><li><strong>intra4x4_pred_mode</strong>：<code>Intra4x4</code> 帧内预测模式的缓存</li><li><strong>non_zero_count</strong>：DCT 的非 0 系数个数的缓存</li><li><strong>mv</strong>：运动矢量缓存</li><li><strong>ref</strong>：运动矢量参考帧的缓存</li></ul><h2 id="5-滤波（Filter）部分"><a href="#5-滤波（Filter）部分" class="headerlink" title="5. 滤波（Filter）部分"></a>5. 滤波（Filter）部分</h2><p><code>x264_fdec_filter_row()</code> 对应着 x264 中的滤波模块。滤波模块主要完成了下面 3 个方面的功能：</p><p>（1）环路滤波（去块效应滤波）</p><p>（2）半像素内插</p><p>（3）视频质量指标PSNR和SSIM的计算</p><h3 id="5-1-函数调用关系图"><a href="#5-1-函数调用关系图" class="headerlink" title="5.1 函数调用关系图"></a>5.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264_fdec_filter_row.png" class="" title="x264_fdec_filter_row"><p>从图中可以看出，滤波模块对应的x264_fdec_filter_row()调用了如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x264_frame_deblock_row()<span class="comment">// 去块效应滤波器。</span></span><br><span class="line">x264_frame_filter()<span class="comment">// 半像素插值。</span></span><br><span class="line">x264_pixel_ssd_wxh()<span class="comment">// PSNR计算。</span></span><br><span class="line">x264_pixel_ssim_wxh()<span class="comment">// SSIM计算。</span></span><br></pre></td></tr></table></figure><p>从源代码可以看出，<code>x264_fdec_filter_row()</code> 完成了三步工作：</p><p>（1）环路滤波（去块效应滤波）。通过调用 <code>x264_frame_deblock_row()</code> 实现。</p><p>（2）半像素内插。通过调用 <code>x264_frame_filter()</code> 实现。</p><p>（3）视频质量 SSIM 和 PSNR 计算。PSNR在这里只计算了 SSD，通过调用 <code>x264_pixel_ssd_wxh()</code> 实现；SSIM 的计算则是通过 <code>x264_pixel_ssim_wxh()</code> 实现。</p><h2 id="6-宏块分析（Analysis）部分-帧内宏块（Intra）"><a href="#6-宏块分析（Analysis）部分-帧内宏块（Intra）" class="headerlink" title="6. 宏块分析（Analysis）部分-帧内宏块（Intra）"></a>6. 宏块分析（Analysis）部分-帧内宏块（Intra）</h2><p><code>x264_macroblock_analyse()</code> 对应着 x264 中的分析模块。分析模块主要完成了下面 2 个方面的功能：</p><p>（1）对于帧内宏块，分析帧内预测模式</p><p>（2）对于帧间宏块，进行运动估计，分析帧间预测模式</p><h3 id="6-1-函数调用关系图"><a href="#6-1-函数调用关系图" class="headerlink" title="6.1 函数调用关系图"></a>6.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264_macroblock_analyse.png" class="" title="x264_macroblock_analyse"><p>从图中可以看出，分析模块的 <code>x264_macroblock_analyse()</code> 调用了如下函数（只列举了几个有代表性的函数）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x264_mb_analyse_init()<span class="comment">// Analysis模块初始化。</span></span><br><span class="line">x264_mb_analyse_intra()<span class="comment">// Intra宏块帧内预测模式分析。</span></span><br><span class="line">x264_macroblock_probe_pskip()<span class="comment">// 分析是否是skip模式。</span></span><br><span class="line">x264_mb_analyse_inter_p16x16()<span class="comment">// P16x16宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_p8x8()<span class="comment">// P8x8宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_p16x8()<span class="comment">// P16x8宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_b16x16()<span class="comment">// B16x16宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_b8x8()<span class="comment">// B8x8宏块帧间预测模式分析。</span></span><br><span class="line">x264_mb_analyse_inter_b16x8()<span class="comment">// B16x8宏块帧间预测模式分析。</span></span><br></pre></td></tr></table></figure><p>尽管 <code>x264_macroblock_analyse()</code> 的源代码比较长，但是它的逻辑比较清晰，如下所示：</p><p>（1）如果当前是 <code>I</code> Slice，调用 <code>x264_mb_analyse_intra()</code> 进行 Intra 宏块的帧内预测模式分析。</p><p>（2）如果当前是 <code>P</code> Slice，则进行下面流程的分析：</p><ul><li>a)调用 <code>x264_macroblock_probe_pskip()</code> 分析是否为 Skip 宏块，如果是的话则不再进行下面分析。</li><li>b)调用 <code>x264_mb_analyse_inter_p16x16()</code> 分析 <code>P16x16</code> 帧间预测的代价。</li><li>c)调用 <code>x264_mb_analyse_inter_p8x8()</code> 分析 <code>P8x8</code> 帧间预测的代价。</li><li>d)如果 <code>P8x8</code> 代价值小于 <code>P16x16</code>，则依次对 4 个 <code>8x8</code> 的子宏块分割进行判断：<ul><li>i.调用 <code>x264_mb_analyse_inter_p4x4()</code> 分析 <code>P4x4</code> 帧间预测的代价。</li><li>ii.如果 <code>P4x4</code> 代价值小于 <code>P8x8</code> ，则调用 <code>x264_mb_analyse_inter_p8x4()</code> 和<code>x264_mb_analyse_inter_p4x8()</code> 分析 <code>P8x4</code> 和 <code>P4x8</code> 帧间预测的代价。</li></ul></li><li>e)如果 <code>P8x8</code> 代价值小于 <code>P16x16</code>，调用 <code>x264_mb_analyse_inter_p16x8()</code> 和<code>x264_mb_analyse_inter_p8x16()</code> 分析 <code>P16x8</code> 和 <code>P8x16</code> 帧间预测的代价。</li><li>f)此外还要调用 <code>x264_mb_analyse_intra()</code> ，检查当前宏块作为 Intra 宏块编码的代价是否小于作为 <code>P</code> 宏块编码的代价（<code>P</code> Slice中也允许有 Intra 宏块）。</li></ul><p>（3）如果当前是 <code>B</code> Slice，则进行和 <code>P</code> Slice类似的处理。</p><p>总体说来 <code>x264_mb_analyse_intra()</code> 通过计算 <code>Intra16x16</code>，<code>Intra8x8</code>（暂时没有研究），<code>Intra4x4</code> 这 3 中帧内预测模式的代价，比较后得到最佳的帧内预测模式。该函数的等流程大致如下：</p><p>（1）进行 <code>Intra16X16</code> 模式的预测</p><ul><li>a)调用 <code>predict_16x16_mode_available()</code> 根据周围宏块的情况判断其可用的预测模式（主要检查左边和上边的块是否可用）。</li><li>b)循环计算 4 种 <code>Intra16x16</code> 帧内预测模式：<ul><li>i.调用 <code>predict_16x16[]()</code> 汇编函数进行 <code>Intra16x16</code> 帧内预测</li><li>ii.调用 <code>x264_pixel_function_t</code> 中的 <code>mbcmp[]()</code> 计算编码代价（<code>mbcmp[]()</code> 指向 SAD 或者 SATD 汇编函数）。</li></ul></li><li>c)获取最小代价的 <code>Intra16x16</code> 模式。</li></ul><p>（2）进行 <code>Intra8x8</code> 模式的预测（未研究，流程应该类似）</p><p>（3）进行 <code>Intra4X4</code> 块模式的预测</p><ul><li>a)循环处理 16 个 <code>4x4</code> 的块：<ul><li>i.调用 <code>x264_mb_predict_intra4x4_mode()</code> 根据周围宏块情况判断该块可用的预测模式。</li><li>ii.循环计算 9 种 <code>Intra4x4</code> 的帧内预测模式：<ul><li>1)调用 <code>predict_4x4 []()</code> 汇编函数进行 <code>Intra4x4</code> 帧内预测</li><li>2)调用 <code>x264_pixel_function_t</code> 中的 <code>mbcmp[]()</code> 计算编码代价（<code>mbcmp[]()</code> 指向 SAD 或者 SATD 汇编函数）。</li></ul></li><li>iii.获取最小代价的 <code>Intra4x4</code> 模式。</li></ul></li><li>b)将 16 个 <code>4X4</code> 块的最小代价相加，得到总代价。</li></ul><p>（4）将上述 3 中模式的代价进行对比，取最小者为当前宏块的帧内预测模式。</p><h2 id="7-宏块分析（Analysis）部分-帧间宏块（Inter）"><a href="#7-宏块分析（Analysis）部分-帧间宏块（Inter）" class="headerlink" title="7. 宏块分析（Analysis）部分-帧间宏块（Inter）"></a>7. 宏块分析（Analysis）部分-帧间宏块（Inter）</h2><p><code>x264_macroblock_analyse()</code> 对应着 x264 中的分析模块。分析模块主要完成了下面 2 个方面的功能：</p><p>（1）对于帧内宏块，分析帧内预测模式</p><p>（2）对于帧间宏块，进行运动估计，分析帧间预测模式</p><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/45936267">详细功能说明</a></p></blockquote><h2 id="8-宏块编码（Encode）部分"><a href="#8-宏块编码（Encode）部分" class="headerlink" title="8. 宏块编码（Encode）部分"></a>8. 宏块编码（Encode）部分</h2><p><code>x264_macroblock_encode()</code> 对应着 x264 中的宏块编码模块。宏块编码模块主要完成了 DCT 变换和量化两个步骤。</p><h3 id="8-1-函数调用关系图"><a href="#8-1-函数调用关系图" class="headerlink" title="8.1 函数调用关系图"></a>8.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264_macroblock_encode.png" class="" title="x264_macroblock_encode"><p>从图中可以看出，宏块编码模块的 <code>x264_macroblock_encode()</code> 调用了 <code>x264_macroblock_encode_internal()</code> ，而 <code>x264_macroblock_encode_internal()</code> 完成了如下功能：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x264_macroblock_encode_skip()<span class="comment">// 编码Skip类型宏块。</span></span><br><span class="line">x264_mb_encode_i16x16()<span class="comment">// 编码Intra16x16类型的宏块。该函数除了进行DCT变换之外，还对16个小块的DC系数进行了Hadamard变换。</span></span><br><span class="line">x264_mb_encode_i4x4()<span class="comment">// 编码Intra4x4类型的宏块。</span></span><br><span class="line"><span class="comment">// 帧间宏块编码：这一部分代码直接写在了函数体里面。</span></span><br><span class="line">x264_mb_encode_chroma()<span class="comment">// 编码色度块。</span></span><br></pre></td></tr></table></figure><p><code>x264_macroblock_encode()</code> 用于编码宏块。该函数的定义位于 <code>encoder\macroblock.c</code></p><p><code>x264_macroblock_encode_internal()</code> 的流程大致如下：</p><p>（1）如果是 Skip 类型，调用 <code>x264_macroblock_encode_skip()</code> 编码宏块。</p><p>（2）如果是 <code>Intra16x16</code> 类型，调用 <code>x264_mb_encode_i16x16()</code> 编码宏块。</p><p>（3）如果是 <code>Intra4x4</code> 类型，循环 16 次调用 <code>x264_mb_encode_i4x4()</code> 编码宏块。</p><p>（4）如果是 Inter 类型，则不再调用子函数，而是直接进行编码：</p><ul><li>a)对 <code>16x16</code> 块调用 <code>x264_dct_function_t</code> 的 <code>sub16x16_dct()</code> 汇编函数，求得编码宏块数据 <code>p_fenc</code> 与重建宏块数据 <code>p_fdec</code> 之间的残差（“sub”），并对残差进行 DCT 变换。</li><li>b)分成 4 个 <code>8x8</code> 的块，对每个 <code>8x8</code> 块分别调用 <code>x264_quant_function_t</code> 的 <code>quant_4x4x4()</code> 汇编函数进行量化。</li><li>c)分成 16 个 <code>4x4</code> 的块，对每个 <code>4x4</code> 块分别调用 <code>x264_quant_function_t</code> 的 <code>dequant_4x4()</code> 汇编函数进行反量化（用于重建帧）。</li><li>d)分成 4 个 <code>8x8</code> 的块，对每个 <code>8x8</code> 块分别调用 <code>x264_dct_function_t</code> 的 <code>add8x8_idct()</code> 汇编函数，对残差进行 DCT 反变换，并将反变换后的数据叠加（“add”）至预测数据上（用于重建帧）。</li></ul><p>（5）如果对色度编码，调用 <code>x264_mb_encode_chroma()</code> 。</p><p>从 Inter 宏块编码的步骤可以看出，编码就是 “DCT变换+量化” 两步的组合。</p><p>简单整理一下 <code>x264_mb_encode_i16x16()</code> 的逻辑，如下所示：</p><p>（1）调用 <code>predict_16x16[]()</code> 汇编函数对重建宏块数据 <code>p_fdec</code> 进行帧内预测。</p><p>（2）调用 <code>x264_dct_function_t</code> 的 <code>sub16x16_dct()</code> 汇编函数，计算重建宏块数据 <code>p_fdec</code> 与编码宏块数据<code>p_fenc</code> 之间的残差，然后对残差做 DCT 变换。</p><p>（3）抽取出来 16 个 <code>4x4DCT</code> 小块的 DC 系数，存储于 <code>dct_dc4x4[]</code>。</p><p>（4）分成 4 个 <code>8x8</code> 的块，对每个 <code>8x8</code> 块分别调用 <code>x264_quant_function_t</code> 的 <code>quant_4x4x4()</code> 汇编函数进行量化。</p><p>（5）分成 16 个 <code>4x4</code> 的块，对每个 <code>4x4</code> 块分别调用 <code>x264_quant_function_t</code> 的 <code>dequant_4x4()</code> 汇编函数进行反量化（用于重建帧）。</p><p>（6）对于 <code>dct_dc4x4[]</code> 中 16 个小块的 DC 系数作如下处理：</p><ul><li>a)调用 <code>x264_dct_function_t</code> 的 <code>dct4x4dc()</code> 汇编函数进行 Hadamard 变换。</li><li>b)调用 <code>x264_quant_function_t</code> 的 <code>quant_4x4_dc()</code> 汇编函数进行 DC 系数的量化。</li><li>c)调用 <code>x264_dct_function_t</code> 的 <code>idct4x4dc()</code> 汇编函数进行 Hadamard 反变换。</li><li>d)调用 <code>x264_quant_function_t</code> 的 <code>dequant_4x4_dc()</code> 汇编函数进行 DC 系数的反量化。</li><li>e)将反量化后的 DC 系数重新放到 <code>16x16</code> 块对应的位置上。</li></ul><p>（7）调用 <code>x264_dct_function_t</code> 的 <code>add16x16_idct()</code> 汇编函数，对残差进行 DCT 反变换，并将反变换后的数据叠加（“add”）至预测数据上（用于重建帧）。</p><p>可以看出 <code>Intra16x16</code> 编码的过程就是一个 “DCT变换 + 量化 + Hadamard变换” 的流程。其中 “DCT变换 + 量化” 是一个通用的编码步骤，而 “Hadamard变换” 是专属于 <code>Intra16x16</code> 宏块的步骤。</p><p>简单整理一下 <code>x264_mb_encode_i4x4()</code> 的逻辑，如下所示：</p><p>（1）调用 <code>predict_4x4[]()</code> 汇编函数对重建宏块数据 <code>p_fdec</code> 进行帧内预测。</p><p>（2）调用 <code>x264_dct_function_t</code> 的 <code>sub4x4_dct ()</code> 汇编函数，计算重建宏块数据 <code>p_fdec</code> 与编码宏块数据 <code>p_fenc</code> 之间的残差，然后对残差做 DCT 变换。</p><p>（3）调用 <code>x264_quant_function_t</code> 的 <code>quant_4x4()</code> 汇编函数进行量化。</p><p>（4）调用 <code>x264_quant_function_t</code> 的 <code>dequant_4x4()</code> 汇编函数进行反量化（用于重建帧）。</p><p>（5）调用 <code>x264_dct_function_t</code> 的 <code>add4x4_idct()</code> 汇编函数，对残差进行 DCT 反变换，并将反变换后的数据叠加（“add”）至预测数据上（用于重建帧）。</p><p>可以看出 <code>Intra4x4</code> 编码的过程就是一个 “DCT变换 + 量化” 的流程。</p><h2 id="9-熵编码（Entropy-Encoding）部分"><a href="#9-熵编码（Entropy-Encoding）部分" class="headerlink" title="9. 熵编码（Entropy Encoding）部分"></a>9. 熵编码（Entropy Encoding）部分</h2><p><code>x264_macroblock_write_cavlc()</code> 对应着x264中的熵编码模块。熵编码模块主要完成了编码数据输出的功能。</p><h3 id="9-1-函数调用关系图"><a href="#9-1-函数调用关系图" class="headerlink" title="9.1 函数调用关系图"></a>9.1 函数调用关系图</h3><p>熵编码（Entropy Encoding）部分的函数调用关系：</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/x264_macroblock_write_cavlc.png" class="" title="x264_macroblock_write_cavlc"><p>从图中可以看出，熵编码模块包含两个函数 <code>x264_macroblock_write_cabac()</code> 和<code>x264_macroblock_write_cavlc()</code>。如果输出设置为 CABAC 编码，则会调用<code>x264_macroblock_write_cabac()</code>；如果输出设置为 CAVLC 编码，则会调用 <code>x264_macroblock_write_cavlc()</code> 。本文选择 CAVLC 编码输出函数 <code>x264_macroblock_write_cavlc()</code> 进行分析。该函数调用了如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x264_cavlc_mb_header_i()<span class="comment">// 写入I宏块MB Header数据。包含帧内预测模式等。</span></span><br><span class="line">x264_cavlc_mb_header_p()<span class="comment">// 写入P宏块MB Header数据。包含MVD、参考帧序号等。</span></span><br><span class="line">x264_cavlc_mb_header_b()<span class="comment">// 写入B宏块MB Header数据。包含MVD、参考帧序号等。</span></span><br><span class="line">x264_cavlc_qp_delta()<span class="comment">// 写入QP。</span></span><br><span class="line">x264_cavlc_block_residual()<span class="comment">// 写入残差数据。</span></span><br></pre></td></tr></table></figure><p>从源代码可以看出，<code>x264_macroblock_write_cavlc()</code> 的流程大致如下：</p><p>（1）根据 Slice 类型的不同，调用不同的函数输出宏块头（MB Header）：</p><ul><li>a)对于 <code>P Slice</code>，调用 <code>x264_cavlc_mb_header_p()</code></li><li>b)对于 <code>B Slice</code>，调用 <code>x264_cavlc_mb_header_b()</code></li><li>c)对于 <code>I Slice</code>，调用 <code>x264_cavlc_mb_header_i()</code></li></ul><p>（2）调用 <code>x264_cavlc_qp_delta()</code> 输出宏块 QP 值</p><p>（3）调用 <code>x264_cavlc_block_residual()</code> 输出 CAVLC 编码的残差数据</p><h2 id="10-FFmpeg与libx264接口源代码简单分析"><a href="#10-FFmpeg与libx264接口源代码简单分析" class="headerlink" title="10. FFmpeg与libx264接口源代码简单分析"></a>10. FFmpeg与libx264接口源代码简单分析</h2><p>本文简单记录一下 FFmpeg 的 libavcodec 中与 libx264 接口部分的源代码。该部分源代码位于 “libavcodec&#x2F;libx264.c” 中。正是有了这部分代码，使得 FFmpeg 可以调用 libx264 编码 H.264 视频。</p><h3 id="10-1-函数调用关系图"><a href="#10-1-函数调用关系图" class="headerlink" title="10.1 函数调用关系图"></a>10.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/FFmpeg%E7%9A%84libavcodec%E4%B8%AD%E7%9A%84libx264%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="FFmpeg的libavcodec中的libx264的函数调用关系"><p>从图中可以看出，libx264 对应的 AVCodec 结构体 <code>ff_libx264_encoder</code> 中设定编码器初始化函数是 <code>X264_init()</code>，编码一帧数据的函数是 <code>X264_frame()</code>，编码器关闭函数是 <code>X264_close()</code>。</p><p><code>X264_init()</code> 调用了如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[libx264 API] x264_param_default()<span class="comment">// 设置默认参数。</span></span><br><span class="line">[libx264 API] x264_param_default_preset()<span class="comment">// 设置默认preset。</span></span><br><span class="line">convert_pix_fmt() <span class="comment">// 将FFmpeg像素格式转换为libx264像素格式。</span></span><br><span class="line">[libx264 API] x264_param_apply_profile()<span class="comment">// 设置Profile。</span></span><br><span class="line">[libx264 API] x264_encoder_open()<span class="comment">// 打开编码器。</span></span><br><span class="line">[libx264 API] x264_encoder_headers()<span class="comment">// 需要全局头的时候，输出头信息。</span></span><br></pre></td></tr></table></figure><p>X264_frame()调用了如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[libx264 API] x264_encoder_encode()<span class="comment">// 编码一帧数据。</span></span><br><span class="line">[libx264 API] x264_encoder_delayed_frames()<span class="comment">// 输出编码器中缓存的数据。</span></span><br><span class="line">encode_nals() <span class="comment">// 将编码后得到的x264_nal_t转换为AVPacket。</span></span><br></pre></td></tr></table></figure><p><code>X264_close()</code> 调用了如下函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[libx264 API] x264_encoder_close()<span class="comment">// 关闭编码器。</span></span><br></pre></td></tr></table></figure><h1 id="解码-libavcodec-H-264-解码器"><a href="#解码-libavcodec-H-264-解码器" class="headerlink" title="解码 - libavcodec H.264 解码器"></a>解码 - libavcodec H.264 解码器</h1><h2 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>本文简单记录 FFmpeg 中 libavcodec 的 H.264 解码器（H.264 Decoder）的源代码。这个 H.264 解码器十分重要，可以说 FFmpeg 项目今天可以几乎“垄断”视音频编解码技术，很大一部分贡献就来自于这个 H.264 解码器。这个 H.264 解码器一方面功能强大，性能稳定；另一方面源代码也比较复杂，难以深入研究。本文打算梳理一下这个 H.264 解码器的源代码结构，以方便以后深入学习 H.264 使用。</p><blockquote><p>PS：这部分代码挺复杂的，还有不少地方还比较模糊，还需要慢慢学习……</p></blockquote><h3 id="1-1-函数调用关系图-1"><a href="#1-1-函数调用关系图-1" class="headerlink" title="1.1 函数调用关系图"></a>1.1 函数调用关系图</h3><p>H.264解码器的函数调用关系图如下所示。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E7%9A%84%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE.png" class="" title="H.264解码器的函数调用关系图"><p>下面解释一下图中关键标记的含义。</p><h4 id="1-1-1-作为接口的结构体"><a href="#1-1-1-作为接口的结构体" class="headerlink" title="1.1.1 作为接口的结构体"></a>1.1.1 作为接口的结构体</h4><p>FFmpeg和H.264解码器之间作为接口的结构体有2个：</p><ul><li><code>ff_h264_parser</code>：用于解析 H.264 码流的 AVCodecParser 结构体。</li><li><code>ff_h264_decoder</code>：用于解码 H.264 码流的 AVCodec 结构体。</li></ul><h4 id="1-1-2-函数背景色"><a href="#1-1-2-函数背景色" class="headerlink" title="1.1.2 函数背景色"></a>1.1.2 函数背景色</h4><p>函数在图中以方框的形式表现出来。不同的背景色标志了该函数不同的作用：</p><ul><li>白色背景的函数：普通内部函数。</li><li>粉红色背景函数：解析函数（Parser）。这些函数用于解析SPS、PPS等信息。</li><li>紫色背景的函数：熵解码函数（Entropy Decoding）。这些函数读取码流数据并且进行CABAC或者CAVLC熵解码。</li><li>绿色背景的函数：解码函数（Decode）。这些函数通过帧内预测、帧间预测、DCT反变换等方法解码压缩数据。</li><li>黄色背景的函数：环路滤波函数（Loop Filter）。这些函数对解码后的数据进行滤波，去除方块效应。</li><li>蓝色背景函数：汇编函数（Assembly）。这些函数是做过汇编优化的函数。图中主要画出了这些函数的C语言版本，此外这些函数还包含MMX版本、SSE版本、NEON版本等。</li></ul><h4 id="1-1-3-箭头线-1"><a href="#1-1-3-箭头线-1" class="headerlink" title="1.1.3 箭头线"></a>1.1.3 箭头线</h4><p>箭头线标志了函数的调用关系：</p><ul><li>黑色箭头线：不加区别的调用关系。</li><li>粉红色的箭头线：解析函数（Parser）之间的调用关系。</li><li>紫色箭头线：熵解码函数（Entropy Decoding）之间的调用关系。</li><li>绿色箭头线：解码函数（Decode）之间的调用关系。</li><li>黄色箭头线：环路滤波函数（Loop Filter）之间的调用关系。</li></ul><h4 id="1-1-4-函数所在的文件-1"><a href="#1-1-4-函数所在的文件-1" class="headerlink" title="1.1.4 函数所在的文件"></a>1.1.4 函数所在的文件</h4><p>每个函数标识了它所在的文件路径。</p><h3 id="1-2-几个关键部分"><a href="#1-2-几个关键部分" class="headerlink" title="1.2 几个关键部分"></a>1.2 几个关键部分</h3><p>下文简单记录几个关键的部分。</p><h4 id="1-2-1-FFmpeg和H-264解码器之间作为接口的结构体"><a href="#1-2-1-FFmpeg和H-264解码器之间作为接口的结构体" class="headerlink" title="1.2.1 FFmpeg和H.264解码器之间作为接口的结构体"></a>1.2.1 FFmpeg和H.264解码器之间作为接口的结构体</h4><p>FFmpeg和H.264解码器之间作为接口的结构体有2个：ff_h264_parser和ff_h264_decoder。</p><p><strong>ff_h264_parser</strong></p><p>ff_h264_parser是用于解析H.264码流的AVCodecParser结构体。AVCodecParser中包含了几个重要的函数指针：</p><ul><li><strong>parser_init()：初始化解析器。</strong></li><li><strong>parser_parse()：解析。</strong></li><li><strong>parser_close()：关闭解析器。</strong></li></ul><p>在ff_h264_parser结构体中，上述几个函数指针分别指向下面几个实现函数：</p><ul><li><strong>init()：初始化H.264解析器。</strong></li><li><strong>h264_parse()：解析H.264码流。</strong></li><li><strong>close()：关闭H.264解析器。</strong></li></ul><p><strong>ff_h264_decoder</strong></p><p>ff_h264_decoder是用于解码H.264码流的AVCodec结构体。AVCodec中包含了几个重要的函数指针：</p><ul><li><strong>init()：初始化解码器。</strong></li><li><strong>decode()：解码。</strong></li><li><strong>close()：关闭解码器。</strong></li></ul><p>在ff_h264_decoder结构体中，上述几个函数指针分别指向下面几个实现函数：</p><ul><li><p><strong>ff_h264_decode_init()：初始化H.264解码器。</strong></p></li><li><p><strong>h264_decode_frame()：解码H.264码流。</strong></p></li><li><p><strong>h264_decode_end()：关闭H.264解码器。</strong></p></li></ul><h4 id="1-2-2-普通内部函数"><a href="#1-2-2-普通内部函数" class="headerlink" title="1.2.2 普通内部函数"></a>1.2.2 普通内部函数</h4><p>普通内部函数指的是H.264解码器中还没有进行分类的函数。下面举几个例子。</p><p>ff_h264_decoder中ff_h264_decode_init()调用的初始化函数：</p><ul><li><strong>ff_h264dsp_init()：初始化DSP相关的函数。包含了IDCT、环路滤波函数等。</strong></li><li><strong>ff_h264qpel_init()：初始化四分之一像素运动补偿相关的函数。</strong></li><li><strong>ff_h264_pred_init()：初始化帧内预测相关的函数。</strong></li><li><strong>ff_h264_decode_extradata()：解析AVCodecContext中的extradata。</strong></li></ul><p>ff_h264_decoder中h264_decode_frame()逐层调用的和解码Slice相关的函数：</p><ul><li><strong>decode_nal_units()，ff_h264_execute_decode_slices()，decode_slice()等。</strong></li></ul><p>ff_h264_decoder中h264_decode_end()调用的清理函数：</p><ul><li><strong>ff_h264_remove_all_refs()：移除所有参考帧。</strong></li><li><strong>ff_h264_free_context()：释放在初始化H.264解码器的时候分配的内存。</strong></li></ul><p>ff_h264_parser中h264_parse()逐层调用的和解析Slice相关的函数：</p><ul><li><p><strong>h264_find_frame_end()：查找NALU的结尾。</strong></p></li><li><p><strong>parse_nal_units()：解析一个NALU。</strong></p></li></ul><h4 id="1-2-3-解析函数（Parser）"><a href="#1-2-3-解析函数（Parser）" class="headerlink" title="1.2.3 解析函数（Parser）"></a>1.2.3 <font style="color:rgb(255,153,255);">解析函数（Parser）</font></h4><p>解析函数（Parser）用于解析H.264码流中的一些信息（例如SPS、PPS、Slice Header等）。在parse_nal_units()和decode_nal_units()中都调用这些解析函数完成了解析。下面举几个解析函数的例子。</p><ul><li><strong>ff_h264_decode_nal()：解析NALU。这个函数是后几个解析函数的前提。</strong></li><li><strong>ff_h264_decode_slice_header()：解析Slice Header。</strong></li><li><strong>ff_h264_decode_sei()：解析SEI。</strong></li><li><strong>ff_h264_decode_seq_parameter_set()：解析SPS。</strong></li><li><strong>ff_h264_decode_picture_parameter_set()：解析PPS。</strong></li></ul><h4 id="1-2-4-熵解码函数（Entropy-Decoding）"><a href="#1-2-4-熵解码函数（Entropy-Decoding）" class="headerlink" title="1.2.4 熵解码函数（Entropy Decoding）"></a>1.2.4 <font style="color:#993399;">熵解码函数（Entropy Decoding）</font></h4><p>熵解码函数（Entropy Decoding）读取码流数据并且进行CABAC或者CAVLC熵解码。CABAC解码函数是ff_h264_decode_mb_cabac()，CAVLC解码函数是ff_h264_decode_mb_cavlc()。熵解码函数中包含了很多的读取指数哥伦布编码数据的函数，例如get_ue_golomb_long()，get_ue_golomb()，get_se_golomb()，get_ue_golomb_31()等等。</p><p>在获取残差数据的时候需要进行CAVLC&#x2F;CABAC解码。例如解码CAVLC的时候，会调用decode_residual()函数，而decode_residual()会调用get_vlc2()函数，get_vlc2()会调用OPEN_READER()，UPDATE_CACHE()，GET_VLC()，CLOSE_READER()几个函数读取CAVLC格式的数据。<br>此外，在获取运动矢量的时候，会调用pred_motion()以及类似的几个函数获取运动矢量相关的信息。</p><h4 id="1-2-5-解码函数（Decode）"><a href="#1-2-5-解码函数（Decode）" class="headerlink" title="1.2.5 解码函数（Decode）"></a>1.2.5 <font style="color:#009900;">解码函数（Decode）</font></h4><p>解码函数（Decode）通过帧内预测、帧间预测、DCT反变换等方法解码压缩数据。解码函数是<code>ff_h264_hl_decode_mb()</code>。其中跟宏块类型的不同，会调用几个不同的函数，最常见的就是调用<code>hl_decode_mb_simple_8()</code>。</p><p><code>hl_decode_mb_simple_8()</code> 的定义是无法在源代码中直接找到的，这是因为它实际代码的函数名称是使用宏的方式写的（以后再具体分析）。<code>hl_decode_mb_simple_8()</code>的源代码实际上就是 <code>FUNC(hl_decode_mb)()</code> 函数的源代码。</p><p><code>FUNC(hl_decode_mb)()</code>根据宏块类型的不同作不同的处理：如果宏块类型是INTRA，就会调用<code>hl_decode_mb_predict_luma()</code> 进行帧内预测；如果宏块类型不是INTRA，就会调用<code>FUNC(hl_motion_422)()</code> 或者 <code>FUNC(hl_motion_420)()</code> 进行四分之一像素运动补偿。</p><p>随后 <code>FUNC(hl_decode_mb)()</code> 会调用 <code>hl_decode_mb_idct_luma()</code> 等几个函数对数据进行DCT反变换工作。</p><h4 id="1-2-6-环路滤波函数（Loop-Filter）"><a href="#1-2-6-环路滤波函数（Loop-Filter）" class="headerlink" title="1.2.6 环路滤波函数（Loop Filter）"></a>1.2.6 <font style="color:#ffcc00;">环路滤波函数（Loop Filter）</font></h4><p>环路滤波函数（Loop Filter）对解码后的数据进行滤波，去除方块效应。环路滤波函数是loop_filter()。其中调用了ff_h264_filter_mb()和ff_h264_filter_mb_fast()。ff_h264_filter_mb_fast()中又调用了h264_filter_mb_fast_internal()。而h264_filter_mb_fast_internal()中又调用了下面几个函数进行滤波：</p><ul><li><p><strong>filter_mb_edgeh()：亮度水平滤波</strong></p></li><li><p><strong>filter_mb_edgev()：亮度垂直滤波</strong></p></li><li><p><strong>filter_mb_edgech()：色度水平滤波</strong></p></li><li><p><strong>filter_mb_edgecv()：色度垂直滤波</strong></p></li></ul><h4 id="1-2-7-汇编函数（Assembly）"><a href="#1-2-7-汇编函数（Assembly）" class="headerlink" title="1.2.7 汇编函数（Assembly）"></a>1.2.7 <font style="color:#3333ff;">汇编函数（Assembly）</font></h4><p>汇编函数（Assembly）是做过汇编优化的函数。为了提高效率，整个H.264解码器中（主要在解码部分和环路滤波部分）包含了大量的汇编函数。实际解码的过程中，FFmpeg会根据系统的特性调用相应的汇编函数（而不是C语言函数）以提高解码的效率。如果系统不支持汇编优化的话，FFmpeg才会调用C语言版本的函数。例如在帧内预测的时候，对于16x16亮度DC模式，有以下几个版本的函数：</p><ul><li>C语言版本的pred16x16_dc_8_c()</li><li>NEON版本的ff_pred16x16_dc_neon()</li><li>MMXEXT版本的ff_pred16x16_dc_8_mmxext()</li><li>SSE2版本的ff_pred16x16_dc_8_sse2()</li></ul><h3 id="1-3-附录"><a href="#1-3-附录" class="headerlink" title="1.3 附录"></a>1.3 附录</h3><p>在网上找到一张图（出处不详），分析了FFmpeg的H.264解码器每个函数运行的耗时情况，比较有参考意义，在这里附上。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%AF%8F%E4%B8%AA%E5%87%BD%E6%95%B0%E8%BF%90%E8%A1%8C%E7%9A%84%E8%80%97%E6%97%B6%E6%83%85%E5%86%B5.png" class="" title="H.264解码器每个函数运行的耗时情况"><p>从图中可以看出，熵解码、宏块解码、环路滤波耗时比例分别为：23.64%、51.85%、22.22%。</p><h2 id="2-解析器（Parser）部分"><a href="#2-解析器（Parser）部分" class="headerlink" title="2. 解析器（Parser）部分"></a>2. 解析器（Parser）部分</h2><p>本文继续分析FFmpeg中libavcodec的H.264解码器（H.264 Decoder）。上篇文章概述了FFmpeg中H.264解码器的结构；从这篇文章开始，具体研究H.264解码器的源代码。本文分析H.264解码器中解析器（Parser）部分的源代码。这部分的代码用于分割H.264的NALU，并且解析SPS、PPS、SEI等信息。解析H.264码流（对应AVCodecParser结构体中的函数）和解码H.264码流（对应AVCodec结构体中的函数）的时候都会调用该部分的代码完成相应的功能。</p><h3 id="2-1-函数调用关系图-1"><a href="#2-1-函数调用关系图-1" class="headerlink" title="2.1 函数调用关系图"></a>2.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E8%A7%A3%E6%9E%90%E5%99%A8%E9%83%A8%E5%88%86%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="解析器部分的源代码的调用关系"><p>从图中可以看出，H.264的解析器（Parser）在解析数据的时候调用 <code>h264_parse()</code>，<code>h264_parse()</code> 调用了<code>parse_nal_units()</code>，<code>parse_nal_units()</code> 则调用了一系列解析特定 NALU 的函数。H.264 的解码器（Decoder）在解码数据的时候调用 <code>h264_decode_frame()</code>，<code>h264_decode_frame()</code> 调用了<code>decode_nal_units()</code>，<code>decode_nal_units()</code> 也同样调用了一系列解析不同 NALU 的函数。</p><p>图中简单列举了几个解析特定 NALU 的函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ff_h264_decode_nal()<span class="comment">// 解析 NALU Header</span></span><br><span class="line">ff_h264_decode_seq_parameter_set()<span class="comment">// 解析 SPS</span></span><br><span class="line">ff_h264_decode_picture_parameter_set()<span class="comment">// 解析 PPS</span></span><br><span class="line">ff_h264_decode_sei()<span class="comment">// 解析 SEI</span></span><br></pre></td></tr></table></figure><p>H.264 解码器与 H.264 解析器最主要的不同的地方在于它调用了 <code>ff_h264_execute_decode_slices()</code> 函数进行了解码工作。这篇文章只分析 H.264 解析器的源代码，至于 H.264 解码器的源代码，则在后面几篇文章中再进行分析。</p><h4 id="2-1-1-h264-find-frame-end"><a href="#2-1-1-h264-find-frame-end" class="headerlink" title="2.1.1 h264_find_frame_end()"></a>2.1.1 h264_find_frame_end()</h4><p><code>h264_find_frame_end()</code> 用于查找 H.264 码流中的 “起始码”（start code）。在 H.264 码流中有两种起始码： <code>0x000001</code> 和 <code>0x00000001</code>。其中 4Byte 的长度的起始码最为常见。只有当一个完整的帧被编为多个 slice 的时候，包含这些 slice 的 NALU 才会使用 3Byte 的起始码。<code>h264_find_frame_end()</code> 的定义位于<code>libavcodec\h264_parser.c</code></p><p>从源代码可以看出，<code>h264_find_frame_end()</code> 使用了一种类似于状态机的方式查找起始码。函数中的 <code>for()</code> 循环每执行一遍，状态机的状态就会改变一次。该状态机主要包含以下几种状态：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">7 - 初始化状态</span><br><span class="line">2 - 找到1个0</span><br><span class="line">1 - 找到2个0</span><br><span class="line">0 - 找到大于等于3个0</span><br><span class="line">4 - 找到2个0和1个1，即001（即找到了起始码）</span><br><span class="line">5 - 找到至少3个0和1个1，即0001等等（即找到了起始码）</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">=8 - 找到2个Slice Header</span></span><br></pre></td></tr></table></figure><p>这些状态之间的状态转移图如下所示。图中粉红色代表初始状态，绿色代表找到“起始码”的状态。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/h264_find_frame_end%E7%8A%B6%E6%80%81%E8%BD%AC%E7%A7%BB.png" class="" title="h264_find_frame_end状态转移"><p>如图所示，<code>h264_find_frame_end()</code> 初始化时候位于状态 “7”；当找到 1 个 “0” 之后，状态从 “7” 变为 “2”；在状态 “2” 下，如果再次找到 1 个 “0”，则状态变为 “1”；在状态 “1” 下，如果找到 “1”，则状态变换为 “4”，表明找到了 “0x000001” 起始码；在状态 “1” 下，如果找到 “0”，则状态变换为 “0”；在状态 “0” 下，如果找到 “1”，则状态变换为 “5” ，表明找到了 “0x000001” 起始码。</p><p><code>parse_nal_units()</code> 主要做了以下几步处理：</p><p>（1）对于所有的 NALU，都调用 <code>ff_h264_decode_nal</code> 解析 NALU 的 Header，得到 nal_unit_type 等信息</p><p>（2）根据 nal_unit_type 的不同，调用不同的解析函数进行处理。例如：</p><ul><li><p>a)解析 SPS 的时候调用 <code>ff_h264_decode_seq_parameter_set()</code></p></li><li><p>b)解析 PPS 的时候调用 <code>ff_h264_decode_picture_parameter_set()</code></p></li><li><p>c)解析 SEI 的时候调用 <code>ff_h264_decode_sei()</code></p></li><li><p>d)解析 IDR Slice &#x2F; Slice 的时候，获取 slice_type 等一些信息。</p></li></ul><h2 id="3-解码器主干部分"><a href="#3-解码器主干部分" class="headerlink" title="3. 解码器主干部分"></a>3. 解码器主干部分</h2><p>本文分析FFmpeg的H.264解码器的主干部分。“主干部分” 是相对于 “熵解码”、“宏块解码”、“环路滤波” 这些细节部分而言的。它包含了 H.264 解码器直到 <code>decode_slice()</code> 前面的函数调用关系（<code>decode_slice()</code> 后面就是H.264解码器的细节部分，主要包含了 “熵解码”、“宏块解码”、“环路滤波” 3个部分）。</p><h3 id="3-1-函数调用关系图-1"><a href="#3-1-函数调用关系图-1" class="headerlink" title="3.1 函数调用关系图"></a>3.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E8%A7%A3%E7%A0%81%E5%99%A8%E4%B8%BB%E5%B9%B2%E9%83%A8%E5%88%86%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="解码器主干部分的源代码的调用关系"><p>从图中可以看出，H.264解码器（Decoder）在初始化的时候调用了 <code>ff_h264_decode_init()</code>，<code>ff_h264_decode_init()</code> 又调用了下面几个函数进行解码器汇编函数的初始化工作（仅举了几个例子）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ff_h264dsp_init()<span class="comment">// 初始化DSP相关的汇编函数。包含了IDCT、环路滤波函数等。</span></span><br><span class="line">ff_h264qpel_init()<span class="comment">// 初始化四分之一像素运动补偿相关的汇编函数。</span></span><br><span class="line">ff_h264_pred_init()<span class="comment">// 初始化帧内预测相关的汇编函数。</span></span><br></pre></td></tr></table></figure><p>H.264 解码器在关闭的时候调用了 <code>h264_decode_end()</code>，<code>h264_decode_end()</code> 又调用了<code>ff_h264_remove_all_refs()</code>，<code>ff_h264_free_context()</code> 等几个函数进行清理工作。<br>H.264 解码器在解码图像帧的时候调用了 <code>h264_decode_frame()</code>，<code>h264_decode_frame()</code> 调用了 <code>decode_nal_units()</code>，<code>decode_nal_units()</code> 调用了两类函数——解析函数和解码函数，如下所示。</p><p>（1）解析函数（获取信息）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ff_h264_decode_nal()<span class="comment">// 解析NALU Header。</span></span><br><span class="line">ff_h264_decode_seq_parameter_set()<span class="comment">// 解析SPS。</span></span><br><span class="line">ff_h264_decode_picture_parameter_set()<span class="comment">// 解析PPS。</span></span><br><span class="line">ff_h264_decode_sei()<span class="comment">// 解析SEI。</span></span><br><span class="line">ff_h264_decode_slice_header()<span class="comment">// 解析Slice Header。</span></span><br></pre></td></tr></table></figure><p>（2）解码函数（解码获得图像）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ff_h264_execute_decode_slices() <span class="comment">// 解码Slice。</span></span><br></pre></td></tr></table></figure><p>其中 <code>ff_h264_execute_decode_slices()</code> 调用了 <code>decode_slice()</code>，而 <code>decode_slice()</code> 中调用了解码器中细节处理的函数（暂不详细分析）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ff_h264_decode_mb_cabac()<span class="comment">// CABAC熵解码函数。</span></span><br><span class="line">ff_h264_decode_mb_cavlc()<span class="comment">// CAVLC熵解码函数。</span></span><br><span class="line">ff_h264_hl_decode_mb()<span class="comment">// 宏块解码函数。</span></span><br><span class="line">loop_filter()<span class="comment">// 环路滤波函数。</span></span><br></pre></td></tr></table></figure><p><code>h264_decode_frame()</code> 根据输入的 AVPacket 的 data 是否为空作不同的处理：</p><p>（1）若果输入的 AVPacket 的 data 为空，则调用 <code>output_frame()</code> 输出 <code>delayed_pic[]</code> 数组中的H264Picture，即输出解码器中缓存的帧（对应的是通常称为 “Flush Decoder” 的功能）。</p><p>（2）若果输入的 AVPacket 的 data 不为空，则首先调用 <code>decode_nal_units()</code> 解码 AVPacket 的 data，然后再调用 <code>output_frame()</code> 输出解码后的视频帧（有一点需要注意：由于帧重排等因素，输出的 AVFrame 并非对应于输入的 AVPacket）。</p><p><code>decode_nal_units()</code> 首先调用 <code>ff_h264_decode_nal()</code> 判断 NALU 的类型，然后根据 NALU 类型的不同调用了不同的处理函数。这些处理函数可以分为两类——解析函数和解码函数，如下所示。</p><p>（1）解析函数（获取信息）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ff_h264_decode_seq_parameter_set()<span class="comment">// 解析SPS。</span></span><br><span class="line">ff_h264_decode_picture_parameter_set()<span class="comment">// 解析PPS。</span></span><br><span class="line">ff_h264_decode_sei()<span class="comment">// 解析SEI。</span></span><br><span class="line">ff_h264_decode_slice_header()<span class="comment">// 解析Slice Header。</span></span><br></pre></td></tr></table></figure><p>（2）解码函数（解码得到图像）：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ff_h264_execute_decode_slices()<span class="comment">// 解码Slice。</span></span><br></pre></td></tr></table></figure><p><code>decode_slice()</code> 按照宏块（<code>16x16</code>）的方式处理输入的视频流。每个宏块的压缩数据经过以下 3 个基本步骤的处理，得到解码后的数据：</p><p>（1）熵解码。如果熵编码为 CABAC，则调用 <code>ff_h264_decode_mb_cabac()</code>；如果熵编码为 CAVLC，则调用 <code>ff_h264_decode_mb_cavlc()</code></p><p>（2）宏块解码。这一步骤调用 <code>ff_h264_hl_decode_mb()</code></p><p>（3）环路滤波。这一步骤调用 <code>loop_filter()</code></p><p>此外，还有可能调用错误隐藏函数 <code>er_add_slice()</code>。</p><p>至此，<code>decode_nal_units()</code> 函数的调用流程就基本分析完毕了。<code>h264_decode_frame()</code> 在调用完 <code>decode_nal_units()</code> 之后，还需要把解码后得到的 H264Picture 转换为 AVFrame 输出出来，这时候会调用一个相对比较简单的函数 <code>output_frame()</code>。</p><h2 id="4-熵解码（Entropy-Decoding）部分"><a href="#4-熵解码（Entropy-Decoding）部分" class="headerlink" title="4. 熵解码（Entropy Decoding）部分"></a>4. 熵解码（Entropy Decoding）部分</h2><p>FFmpeg的H.264解码器调用 <code>decode_slice()</code> 函数完成了解码工作。这些解码工作可以大体上分为3个步骤：熵解码，宏块解码以及环路滤波。本文分析这3个步骤中的第1个步骤。</p><h3 id="4-1-函数调用关系图-1"><a href="#4-1-函数调用关系图-1" class="headerlink" title="4.1 函数调用关系图"></a>4.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E7%86%B5%E8%A7%A3%E7%A0%81%E9%83%A8%E5%88%86%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="熵解码部分的源代码的调用关系"><p>从图中可以看出，FFmpeg的熵解码方面的函数有两个：<code>ff_h264_decode_mb_cabac()</code> 和 <code>ff_h264_decode_mb_cavlc()</code>。</p><ul><li><code>ff_h264_decode_mb_cabac()</code> 用于解码 CABAC 编码方式的 H.264 数据，</li><li><code>ff_h264_decode_mb_cavlc()</code>用于解码 CAVLC 编码方式的 H.264 数据。</li></ul><p>本文挑选了<code>ff_h264_decode_mb_cavlc()</code> 函数进行分析。</p><p><code>ff_h264_decode_mb_cavlc()</code> 调用了很多的读取指数哥伦布编码数据的函数，例如 <code>get_ue_golomb_long()</code>，<code>get_ue_golomb()，get_se_golomb()</code>，<code>get_ue_golomb_31()</code> 等。此外在解码残差数据的时候，调用了 <code>decode_residual()</code>函数，而 <code>decode_residual()</code> 会调用 <code>get_vlc2()</code> 函数读取 CAVLC 编码数据。</p><p>总而言之，“熵解码” 部分的作用就是按照 H.264 语法和语义的规定，读取数据（宏块类型、运动矢量、参考帧、残差等）并且赋值到 FFmpeg H.264 解码器中相应的变量上。需要注意的是，“熵解码” 部分并不使用这些变量还原视频数据。还原视频数据的功能在下一步 “宏块解码” 步骤中完成。</p><p>在开始看 <code>ff_h264_decode_mb_cavlc()</code> 之前先回顾一下 <code>decode_slice()</code> 函数。</p><p><code>decode_slice()</code> 的的流程如下：</p><p>（1）判断 H.264 码流是 CABAC 编码还是 CAVLC 编码，进入不同的处理循环。</p><p>（2）如果是 CABAC 编码，首先调用 <code>ff_init_cabac_decoder()</code> 初始化 CABAC 解码器。然后进入一个循环，依次对每个宏块进行以下处理：</p><ul><li><p>a)调用 <code>ff_h264_decode_mb_cabac()</code>进行 CABAC 熵解码</p></li><li><p>b)调用 <code>ff_h264_hl_decode_mb()</code> 进行宏块解码</p></li><li><p>c)解码一行宏块之后调用 <code>loop_filter()</code> 进行环路滤波</p></li><li><p>d)此外还有可能调用 <code>er_add_slice()</code> 进行错误隐藏处理</p></li></ul><p>（3）如果是 CABAC 编码，直接进入一个循环，依次对每个宏块进行以下处理：</p><ul><li><p>a)调用 <code>ff_h264_decode_mb_cavlc()</code> 进行 CAVLC 熵解码</p></li><li><p>b)调用 <code>ff_h264_hl_decode_mb()</code> 进行宏块解码</p></li><li><p>c)解码一行宏块之后调用 <code>loop_filter()</code> 进行环路滤波</p></li><li><p>d)此外还有可能调用 <code>er_add_slice()</code> 进行错误隐藏处理</p></li></ul><p>可以看出，出了熵解码以外，宏块解码和环路滤波的函数是一样的。</p><p><code>ff_h264_decode_mb_cavlc()</code> 的定义有将近 1000 行代码，算是一个比较复杂的函数了。我在其中写了不少注释，因此不再对源代码进行详细的分析。下面先简单梳理一下它的流程：</p><p>（1）解析 Skip 类型宏块</p><p>（2）获取 <code>mb_type</code></p><p>（3）填充当前宏块左边和上边宏块的信息（后面的预测中会用到）</p><p>（4）根据 <code>mb_type</code> 的不同，分成三种情况进行预测工作：</p><ul><li><p>a)宏块是帧内预测</p><ul><li>i.如果宏块是 <code>Intra4x4</code> 类型，则需要单独解析帧内预测模式。</li><li>ii.如果宏块是 <code>Intra16x16</code> 类型，则不再做过多处理。</li></ul></li><li><p>b)宏块划分为 4 个块（此时每个 <code>8x8</code> 的块可以再次划分为 4 种类型）</p><p>这个时候每个 <code>8x8</code> 的块可以再次划分为 <code>8x8、8x4、4x8、4x4</code> 几种子块。需要分别处理这些小的子块：</p><ul><li>i.解析子块的参考帧序号</li><li>ii.解析子块的运动矢量</li></ul></li><li><p>c)其它类型（包括 <code>16x16，16x8，8x16</code> 几种划分，这些划分不可再次划分）</p><p>这个时候需要判断宏块的类型为 <code>16x16，16x8</code> 还是 <code>8x16</code>，然后作如下处理：</p><ul><li>i.解析子宏块的参考帧序号</li><li>ii.解析子宏块的运动矢量</li></ul></li></ul><p>（5）解码残差信息</p><p>（6）将宏块的各种信息输出到整个图片相应的变量中</p><h4 id="4-1-1-各种-Cache（缓存）"><a href="#4-1-1-各种-Cache（缓存）" class="headerlink" title="4.1.1 各种 Cache（缓存）"></a>4.1.1 各种 Cache（缓存）</h4><p>在 H.264 解码器中包含了各种各样的 Cache（缓存）。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">intra4x4_pred_mode_cache<span class="comment">// Intra4x4帧内预测模式的缓存</span></span><br><span class="line">non_zero_count_cache<span class="comment">// 每个4x4块的非0系数个数的缓存</span></span><br><span class="line">mv_cache<span class="comment">// 运动矢量缓存</span></span><br><span class="line">ref_cache<span class="comment">// 运动矢量参考帧的缓存</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/45114453">其他知识查看</a></p></blockquote><h2 id="5-宏块解码（Decode）部分-帧内宏块（Intra）"><a href="#5-宏块解码（Decode）部分-帧内宏块（Intra）" class="headerlink" title="5. 宏块解码（Decode）部分-帧内宏块（Intra）"></a>5. 宏块解码（Decode）部分-帧内宏块（Intra）</h2><p>FFmpeg的H.264解码器调用 <code>decode_slice()</code> 函数完成了解码工作。这些解码工作可以大体上分为3个步骤：熵解码，宏块解码以及环路滤波。本文分析这3个步骤中的第2个步骤。由于宏块解码部分的内容比较多，因此将本部分内容拆分成两篇文章：一篇文章记录帧内预测宏块（Intra）的宏块解码，另一篇文章记录帧间预测宏块（Inter）的宏块解码。</p><h3 id="5-1-函数调用关系图-1"><a href="#5-1-函数调用关系图-1" class="headerlink" title="5.1 函数调用关系图"></a>5.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%AE%8F%E5%9D%97%E8%A7%A3%E7%A0%81%E9%83%A8%E5%88%86%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="宏块解码部分的源代码的调用关系"><p>宏块解码函数（Decode）通过帧内预测、帧间预测、DCT 反变换等方法解码压缩数据。解码函数是 <code>ff_h264_hl_decode_mb()</code>。其中跟宏块类型的不同，会调用几个不同的函数，最常见的就是调用 <code>hl_decode_mb_simple_8()</code>。</p><p><code>hl_decode_mb_simple_8()</code> 的定义是无法在源代码中直接找到的，这是因为它实际代码的函数名称是使用宏的方式写的。<code>hl_decode_mb_simple_8()</code> 的源代码实际上就是 <code>FUNC(hl_decode_mb)()</code> 函数的源代码。</p><p>从函数调用图中可以看出，<code>FUNC(hl_decode_mb)()</code> 根据宏块类型的不同作不同的处理：</p><ul><li>如果帧内预测宏块（INTRA），就会调用 <code>hl_decode_mb_predict_luma()</code> 进行帧内预测；</li><li>如果是帧间预测宏块（INTER），就会调用 <code>FUNC(hl_motion_422)()</code> 或者 <code>FUNC(hl_motion_420)()</code> 进行四分之一像素运动补偿。</li></ul><p>经过帧内预测或者帧间预测步骤之后，就得到了预测数据。随后 <code>FUNC(hl_decode_mb)()</code> 会调用 <code>hl_decode_mb_idct_luma()</code> 等几个函数对残差数据进行 DCT 反变换工作，并将变换后的数据叠加到预测数据上，形成解码后的图像数据。</p><p>由于帧内预测宏块和帧间预测宏块的解码工作都比较复杂，因此分成两篇文章记录这两部分的源代码。本文记录帧内预测宏块解码时候的源代码。</p><p>下面简单梳理一下 <code>FUNC(hl_decode_mb)</code> 的流程（在这里只考虑亮度分量的解码，色度分量的解码过程是类似的）：</p><p>（1）预测</p><ul><li>a)如果是帧内预测宏块（Intra），调用 <code>hl_decode_mb_predict_luma()</code> 进行帧内预测，得到预测数据。</li><li>b)如果不是帧内预测宏块（Inter），调用 <code>FUNC(hl_motion_420)()</code> 或者 <code>FUNC(hl_motion_422)()</code> 进行帧间预测（即运动补偿），得到预测数据。</li></ul><p>（2）残差叠加</p><ul><li>a)调用 <code>hl_decode_mb_idct_luma()</code> 对 DCT 残差数据进行 DCT 反变换，获得残差像素数据并且叠加到之前得到的预测数据上，得到最后的图像数据。</li></ul><p>PS：该流程中有一个重要的贯穿始终的内存指针 <code>dest_y</code>，其指向的内存中存储了解码后的亮度数据。</p><p>根据原代码梳理一下 <code>hl_decode_mb_predict_luma()</code> 的主干：</p><p>（1）如果宏块是4x4帧内预测类型（Intra4x4），作如下处理：</p><ul><li>a)循环遍历 16 个 <code>4x4</code> 的块，并作如下处理：<ul><li>i.从 <code>intra4x4_pred_mode_cache</code> 中读取 <code>4x4</code> 帧内预测方法</li><li>ii.根据帧内预测方法调用 H264PredContext 中的汇编函数 <code>pred4x4()</code> 进行帧内预测</li><li>iii.调用 H264DSPContext 中的汇编函数 <code>h264_idct_add()</code> 对 DCT 残差数据进行 <code>4x4DCT</code> 反变换；如果DCT 系数中不包含 AC 系数的话，则调用汇编函数 <code>h264_idct_dc_add()</code> 对残差数据进行 <code>4x4DCT</code> 反变换（速度更快）。</li></ul></li></ul><p>（2）如果宏块是 <code>16x16</code> 帧内预测类型（<code>Intra4x4</code>），作如下处理：</p><ul><li>a)通过 <code>intra16x16_pred_mode</code> 获得 <code>16x16</code> 帧内预测方法</li><li>b)根据帧内预测方法调用 H264PredContext 中的汇编函数 <code>pred16x16 ()</code> 进行帧内预测</li><li>c)调用 H264DSPContext 中的汇编函数 <code>h264_luma_dc_dequant_idct ()</code> 对 16 个小块的 DC 系数进行Hadamard 反变换</li></ul><p>在这里需要注意，帧内 <code>4x4</code> 的宏块在执行完 <code>hl_decode_mb_predict_luma()</code> 之后实际上已经完成了 “帧内预测+DCT反变换” 的流程（解码完成）；而帧内 <code>16x16</code> 的宏块在执行完 <code>hl_decode_mb_predict_luma()</code> 之后仅仅完成了 “帧内预测+Hadamard反变换 ”的流程，而并未进行 “DCT反变换” 的步骤，这一步骤需要在后续步骤中完成。</p><p>下文记录上述流程中涉及到的汇编函数（此处暂不记录DCT反变换的函数，在后文中再进行叙述）：</p><ul><li><p><code>4x4</code>帧内预测汇编函数：<code>H264PredContext -&gt; pred4x4[dir</code>]()</p></li><li><p><code>16x16</code> 帧内预测汇编函数：<code>H264PredContext -&gt; pred16x16[dir]()</code></p></li><li><p>Hadamard反变换汇编函数：<code>H264DSPContext-&gt;h264_luma_dc_dequant_idct()</code></p></li></ul><p>下面根据源代码简单梳理一下 <code>hl_decode_mb_idct_luma()</code> 的流程：</p><p>（1）判断宏块是否属于 <code>Intra4x4</code> 类型，如果是，函数直接返回（<code>Intra4x4</code> 比较特殊，它的 DCT 反变换已经前文所述的 “帧内预测” 部分完成）。</p><p>（2）根据不同的宏块类型作不同的处理：</p><ul><li>a) <code>Intra16x16</code>：调用 H264DSPContext 的汇编函数 <code>h264_idct_add16intra()</code> 进行 DCT 反变换</li><li>b) Inter类型：调用 H264DSPContext 的汇编函数 <code>h264_idct_add16()</code> 进行 DCT 反变换</li></ul><p>PS：需要注意的是 <code>h264_idct_add16intra()</code> 和 <code>h264_idct_add16()</code> 只有微小的区别，它们的基本逻辑都是把 <code>16x16</code> 的块划分为 16 个 <code>4x4</code> 的块再进行 DCT 反变换。此外还有一点需要注意：函数名中的 “add” 的含义是将 DCT 反变换之后的残差像素数据直接叠加到已有数据之上。</p><h2 id="6-宏块解码（Decode）部分-帧间宏块（Inter）"><a href="#6-宏块解码（Decode）部分-帧间宏块（Inter）" class="headerlink" title="6. 宏块解码（Decode）部分-帧间宏块（Inter）"></a>6. 宏块解码（Decode）部分-帧间宏块（Inter）</h2><p>本文分析FFmpeg的H.264解码器的宏块解码（Decode）部分。FFmpeg的H.264解码器调用 <code>decode_slice()</code> 函数完成了解码工作。这些解码工作可以大体上分为3个步骤：熵解码，宏块解码以及环路滤波。本文分析这3个步骤中的第2个步骤：宏块解码。上一篇文章已经记录了帧内预测宏块（Intra）的宏块解码，本文继续上一篇文章的内容，记录帧间预测宏块（Inter）的宏块解码。</p><h3 id="6-1-函数调用关系图-1"><a href="#6-1-函数调用关系图-1" class="headerlink" title="6.1 函数调用关系图"></a>6.1 函数调用关系图</h3><p>参考宏块解码（Decode）部分的源代码的调用关系图</p><p><code>MCFUNC(hl_motion)</code> 根据子宏块的划分类型的不同，传递不同的参数调用 <code>mc_part()</code> 函数。</p><p>（1）如果子宏块划分为 <code>16x16</code>（等同于没有划分），直接调用 <code>mc_part()</code> 并且传递如下参数：</p><ul><li>a)单向预测汇编函数集：<code>qpix_put[0]</code> （<code>qpix_put[0]</code>中的函数进行 <code>16x16</code> 块的四分之一像素运动补偿）。</li><li>b)双向预测汇编函数集：<code>qpix_avg[0]</code>。</li><li>c) square 设置为 1，delta 设置为 0。</li><li>d) x_offset 和 y_offset 都设置为 0。</li></ul><p>（2）如果子宏块划分为 <code>16x8</code>，分两次调用 <code>mc_part()</code> 并且传递如下参数：</p><ul><li>a)单向预测汇编函数集：<code>qpix_put[1]</code> （<code>qpix_put[1]</code> 中的函数进行 <code>8x8</code> 块的四分之一像素运动补偿）。</li><li>b)双向预测汇编函数集：<code>qpix_avg[1]</code>。</li><li>c) square 设置为 0，delta 设置为 8。</li></ul><p>其中第 1 次调用 <code>mc_part()</code> 的时候 x_offset 和 y_offset 都设置为 0，第 2 次调用 <code>mc_part()</code> 的时候 x_offset 设置为 0，y_offset 设置为 4。</p><p>（3）如果子宏块划分为 <code>8x16</code>，分两次调用 <code>mc_part()</code> 并且传递如下参数：</p><ul><li>a)单向预测汇编函数集：<code>qpix_put[1]</code> （<code>qpix_put[1]</code> 中的函数进行 <code>8x8</code> 块的四分之一像素运动补偿）。</li><li>b)双向预测汇编函数集：<code>qpix_avg[1]</code>。</li><li>c) square设置为 0，delta 设置为 <code>8 * h-&gt;mb_linesize</code>。</li></ul><p>其中第 1 次调用 <code>mc_part()</code> 的时候 x_offset 和 y_offset 都设置为 0，第 2 次调用 <code>mc_part()</code> 的时候 x_offset 设置为 4，y_offset 设置为 0。</p><p>（4）如果子宏块划分为 <code>8x8</code>，说明此时每个 <code>8x8</code> 子宏块还可以继续划分为 <code>8x8，8x8，4x8，4x4</code> 几种类型，此时根据上述的规则，分成 4 次分别对这些小块做类似的处理。</p><p><code>qpix_put[4][16]</code> 实际上指向了 H264QpelContex 的 <code>put_h264_qpel_pixels_tab[4][16]</code> ，其中存储了所有单向预测方块的四分之一像素运动补偿函数。其中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">qpix_put[0]存储的是16x16方块的运动补偿函数；</span><br><span class="line">qpix_put[1]存储的是8x8方块的运动补偿函数；</span><br><span class="line">qpix_put[2]存储的是4x4方块的运动补偿函数；</span><br><span class="line">qpix_put[3]存储的是2x2方块的运动补偿函数；</span><br></pre></td></tr></table></figure><p>从源代码可以看出，<code>mc_part_std()</code> 首先计算了几个关键的用于确定子宏块位置的参数，然后根据预测类型的不同（单向预测或者双向预测），把不同的函数指针传递给 <code>mc_dir_part()</code>：如果仅仅使用了 list0（单向预测），则只传递 <code>qpix_put()</code>；如果使用了 list0 和 list1（双向预测），则调用两次 <code>mc_dir_part()</code>，第一次传递 <code>qpix_put()</code>，第二次传递 <code>qpix_avg()</code>。</p><p><code>mc_part_std()</code> 中赋值了 3 个重要的变量（只考虑亮度）：</p><p>（1）<code>dest_y</code>：指向子宏块亮度数据指针。这个值是通过 x_offset 和 y_offset 计算得来的。在这里需要注意一点：x_offset 和 y_offset 是以色度为基本单位的，所以在计算亮度相关的变量的时候需要乘以 2。</p><p>（2）<code>x_offset</code>：传入的 x_offset 本来是子宏块相对于整个宏块位置的横坐标，在这里加上 <code>8 * h-&gt;mb_x</code> 之后，变成了子宏块相对于整个图像的位置的横坐标（以色度为基本单位）。</p><p>（3）<code>y_offset</code>：传入的 y_offset 本来是子宏块相对于整个宏块位置的纵坐标，在这里加上 <code>8 * h-&gt;mb_y</code> 之后，变成了子宏块相对于整个图像的位置的纵坐标（以色度为基本单位）。</p><p>通过源代码，简单梳理一下 <code>mc_dir_part()</code> 的流程（只考虑亮度，色度的流程类似）：</p><p>（1）计算 mx 和 my。mx 和 my 是当前宏块的匹配块的位置坐标。需要注意的是该坐标是以 <code>1/4</code> 像素（而不是整像素）为基本单位的。</p><p>（2）计算 offset。offset 是当前宏块的匹配块相对于图像的整像素偏移量，由 mx、my 计算而来。</p><p>（3）计算 luma_xy。luma_xy 决定了当前宏块的匹配块采用的四分之一像素运动补偿的方式，由 mx、my 计算而来。</p><p>（4）调用运动补偿汇编函数 <code>qpix_op[luma_xy]()</code> 完成运动补偿。在这里需要注意，如果子宏块不是正方形的（square 取 0），则还会调用 1 次 <code>qpix_op[luma_xy]()</code> 完成另外一个方块的运动补偿。</p><p>总而言之，首先找到当前宏块的匹配块的整像素位置，然后在该位置的基础上进行四分之一像素的内插，并将结果输出出来。</p><p>前文中曾经提过，由于 H.264 解码器中只提供了正方形块的四分之一像素运动补偿函数，所以如果子宏块不是正方形的（例如 <code>16x8，8x16</code>），就需要先将子宏块划分为正方形的方块，然后再进行两次运动补偿（两个正方形方块之间的位置关系用 delta 变量记录）。例如 <code>16x8</code> 的宏块，就会划分成两个 <code>8x8</code> 的方块，调用两次相同的运动补偿函数</p><p>下面可以看一下 C 语言版本的四分之一像素运动补偿函数的源代码。由于 <code>1/4</code> 像素内插比较复杂，其中还用到了整像素赋值函数以及 <code>1/2</code> 像素线性内插函数，所以需要从简到难一步一步的看这些源代码。打算按照顺序一步一步分析这些源代码：</p><p>（1）pel_template.c（展开“ <code>DEF_PEL(put, op_put)</code> ”宏）：整像素赋值（用于整像素的单向预测）</p><p>（2）pel_template.c（展开“ <code>DEF_PEL(avg, op_avg)</code> ”宏）：整像素求平均（写这个为了举一个双向预测的例子）</p><p>（3）hpel_template.c(（展开“<code>DEF_HPEL(put, op_put)</code>”宏）：<code>1/2</code> 像素线性内插</p><p>（4）h264qpel_template.c（展开“ <code>H264_LOWPASS(put_, op_put, op2_put)</code>”宏）：半像素内插（注意不是1&#x2F;2像素线性内插，而是需要滤波的）</p><p>（5）h264qpel_template.c（展开“<code>H264_MC(put_, 8)</code>”宏）：<code>1/4</code>像素运动补偿</p><h2 id="7-环路滤波（Loop-Filter）部分"><a href="#7-环路滤波（Loop-Filter）部分" class="headerlink" title="7. 环路滤波（Loop Filter）部分"></a>7. 环路滤波（Loop Filter）部分</h2><p>本文分析FFmpeg的H.264解码器的环路滤波（Loop Filter）部分。FFmpeg的H.264解码器调用decode_slice()函数完成了解码工作。这些解码工作可以大体上分为3个步骤：熵解码，宏块解码以及环路滤波。本文分析这3个步骤中的第3个步骤。</p><h3 id="7-1-函数调用关系图"><a href="#7-1-函数调用关系图" class="headerlink" title="7.1 函数调用关系图"></a>7.1 函数调用关系图</h3><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E7%8E%AF%E8%B7%AF%E6%BB%A4%E6%B3%A2%E9%83%A8%E5%88%86%E7%9A%84%E6%BA%90%E4%BB%A3%E7%A0%81%E7%9A%84%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB.png" class="" title="环路滤波部分的源代码的调用关系"><p>环路滤波主要用于滤除方块效应。<code>decode_slice()</code> 在解码完一行宏块之后，会调用 <code>loop_filter()</code> 函数完成环路滤波功能。<code>loop_filter()</code> 函数会遍历该行宏块中的每一个宏块，并且针对每一个宏块调用 <code>ff_h264_filter_mb_fast()</code>。<code>ff_h264_filter_mb_fast()</code> 又会调用 <code>h264_filter_mb_fast_internal()</code>。</p><p><code>h264_filter_mb_fast_internal()</code> 完成了一个宏块的环路滤波工作。该函数调用 <code>filter_mb_edgev()</code> 和 <code>filter_mb_edgeh()</code> 对亮度垂直边界和水平边界进行滤波，或者调用 <code>filter_mb_edgecv()</code> 和 <code>filter_mb_edgech()</code> 对色度的的垂直边界和水平边界进行滤波。</p><p>通过源代码整理出来 <code>h264_filter_mb_fast_internal()</code> 的流程如下：</p><p>（1）读取 QP 等几个参数，用于推导滤波门限值 alpha，beta。</p><p>（2）如果是帧内宏块（Intra），作如下处理：</p><ul><li><p>a)对于水平的边界，调用 <code>filter_mb_edgeh()</code> 进行滤波。</p></li><li><p>b)对于垂直的边界，调用 <code>filter_mb_edgev()</code> 进行滤波。</p><p>帧内宏块滤波过程中，对于在宏块边界上的边界（最左边的垂直边界和最上边的水平边界），采用滤波强度 Bs 为 4 的滤波；对于其它边界则采用滤波强度 Bs 为 3 的滤波。</p></li></ul><p>（3）如果是其他宏块，作如下处理：</p><ul><li><p>a)对于水平的边界，调用 <code>filter_mb_edgeh()</code> 进行滤波。</p></li><li><p>b)对于垂直的边界，调用 <code>filter_mb_edgev()</code> 进行滤波。</p><p>此类宏块的滤波强度需要另作判断。</p></li></ul><p>总体说来，一个宏块内部的滤波顺序如下图所示。图中的 “0”、“1”、“2”、“3” 为滤波的顺序。可以看出首先对垂直边界进行滤波，然后对水平边界进行滤波。垂直边界滤波按照从左到右的顺序进行，而水平边界的滤波按照从上到下的顺序进行。</p><img data-src="/2019/05/28/FFmpeg/FFmpeg%E7%9A%84H.264%E8%A7%A3%E7%A0%81%E5%99%A8%E6%BA%90%E4%BB%A3%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90/%E5%AE%8F%E5%9D%97%E5%86%85%E9%83%A8%E7%9A%84%E6%BB%A4%E6%B3%A2%E9%A1%BA%E5%BA%8F.png" class="" title="宏块内部的滤波顺序"><h1 id="H-264-中的-NAL-技术"><a href="#H-264-中的-NAL-技术" class="headerlink" title="H.264 中的 NAL 技术"></a>H.264 中的 NAL 技术</h1><h2 id="1-NAL-技术"><a href="#1-NAL-技术" class="headerlink" title="1. NAL 技术"></a>1. NAL 技术</h2><h3 id="1-1-NAL-概述"><a href="#1-1-NAL-概述" class="headerlink" title="1.1 NAL 概述"></a>1.1 NAL 概述</h3><p>NAL 全称 Network Abstract Layer，即网络抽象层。在 H.264&#x2F;AVC 视频编码标准中，整个系统框架被分为了两个层面：视频编码层面（VCL）和网络抽象层面（NAL）。其中，前者负责有效表示视频数据的内容，而后者则负责格式化数据并提供头信息，以保证数据适合各种信道和存储介质上的传输。</p><p>现实中的传输系统是多样化的，其可靠性，服务质量，封装方式等特征各不相同，NAL 这一概念的提出提供了一个视频编码器和传输系统的友好接口，使得编码后的视频数据能够有效地在各种不同的网络环境中传输。</p><h3 id="1-2-NAL-单元"><a href="#1-2-NAL-单元" class="headerlink" title="1.2 NAL 单元"></a>1.2 NAL 单元</h3><p>NAL 单元是 NAL 的基本语法结构，它包含一个字节的头信息和一系列来自 VCL 的称为原始字节序列载荷<br>（RBSP）的字节流。头信息中包含着一个可否丢弃的指示标记，标识着该 NAL 单元的丢弃能否引起错误扩散，一般，如果 NAL 单元中的信息不用于构建参考图像，则认为可以将其丢弃；最后包含的是NAL 单元的类型信息，暗示着其内含有效载荷的内容。 送到解码器端的 NAL 单元必须遵守严格的顺序，如果应用程序接收到的 NAL 单元处于乱序，则必须提供一种恢复其正确顺序的方法。</p><h3 id="1-3-NAL-实现编解码器与传输网络的结合"><a href="#1-3-NAL-实现编解码器与传输网络的结合" class="headerlink" title="1.3 NAL 实现编解码器与传输网络的结合"></a>1.3 NAL 实现编解码器与传输网络的结合</h3><p>NAL 提供了一个编解码器与传输网络的通用接口，而对于不同的网络环境，具体的实现方案是不同的。对于基于流的传输系统如 H.320、MPEG 等，需要按照解码顺序组织 NAL 单元，并为每个 NAL 单元增加若干比特字节对齐的前缀以形成字节流；对于 RTP&#x2F;UDP&#x2F;IP 系统，则可以直接将编码器输出的 NAL 单元作为 RTP 的有效载荷；而对于同时提供多个逻辑信道的传输系统，甚至可以根据重要性将不同类型的NAL 单元在不同服务质量的信道中传输。</p><h3 id="1-4-结论"><a href="#1-4-结论" class="headerlink" title="1.4 结论"></a>1.4 结论</h3><p>为了实现编解码器良好的网络适应性，需要做两方面的工作：</p><p>第一、在 Codec 中将 NAL 这一技术完整而有效的实现；</p><p>第二、在遵循 H.264&#x2F;AVC NAL 规范的前提下设计针对不同网络的最佳传输方案。</p><p>如果实现了以上两个目标，所实现的就不仅仅是一种视频编解码技术，而是一套适用范围很广的多媒体传输方案，该方案适用于如视频会议，数据存储，电视广播，流媒体，无线通信，远程监控等多种领域。</p><h2 id="2-NALU-类型"><a href="#2-NALU-类型" class="headerlink" title="2. NALU 类型"></a>2. NALU 类型</h2><p>标识 NAL 单元中的 RBSP 数据类型，其中，nal_unit_type 为 1， 2， 3， 4， 5 的 NAL 单元称为 VCL 的 NAL单元，其他类型的 NAL 单元为非 VCL 的 NAL 单元。</p><ul><li>0：未规定</li><li>1：非 IDR 图像中不采用数据划分的片段</li><li>2：非 IDR 图像中 A 类数据划分片段</li><li>3：非 IDR 图像中 B 类数据划分片段</li><li>4：非 IDR 图像中 C 类数据划分片段</li><li>5：IDR 图像的片段</li><li>6：补充增强信息（SEI）</li><li>7：序列参数集（SPS）</li><li>8：图像参数集（PPS）</li><li>9：分割符</li><li>10：序列结束符</li><li>11：流结束符</li><li>12：填充数据</li><li>13：序列参数集扩展</li><li>14：带前缀的 NAL 单元</li><li>15：子序列参数集</li><li>16 – 18：保留</li><li>19：不采用数据划分的辅助编码图像片段</li><li>20：编码片段扩展</li><li>21 – 23：保留</li><li>24 – 31：未规定</li></ul><h3 id="2-1-SPS-详析"><a href="#2-1-SPS-详析" class="headerlink" title="2.1 SPS 详析"></a>2.1 SPS 详析</h3><p>TODO</p><h3 id="2-2-PPS-详析"><a href="#2-2-PPS-详析" class="headerlink" title="2.2 PPS 详析"></a>2.2 PPS 详析</h3><p>TODO</p><h3 id="2-3-SEI-详析"><a href="#2-3-SEI-详析" class="headerlink" title="2.3 SEI 详析"></a>2.3 SEI 详析</h3><p>TODO</p><h2 id="3-NAL-在多媒体传输、存储系统中的应用"><a href="#3-NAL-在多媒体传输、存储系统中的应用" class="headerlink" title="3. NAL 在多媒体传输、存储系统中的应用"></a>3. NAL 在多媒体传输、存储系统中的应用</h2><p>NAL 的头占用了一个字节，按照比特自高至低排列可以表示如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0AABBBBB</span><br></pre></td></tr></table></figure><p>其中，AA 用于表示该 NAL 是否可以丢弃（有无被其后的 NAL 参考），00b 表示没有参考作用，可丢弃，如 B slice、SEI 等，非零——包括 01b、10b、11b——表示该 NAL 不可丢弃，如 SPS、PPS、I Slice、P Slice 等。</p><p>常用的 NAL 头的取值如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">0x67: SPS</span><br><span class="line">0x68: PPS</span><br><span class="line">0x65: IDR</span><br><span class="line">0x61: non-IDR Slice</span><br><span class="line">0x01: B Slice</span><br><span class="line">0x06: SEI</span><br><span class="line">0x09: AU Delimiter</span><br></pre></td></tr></table></figure><p>由于 NAL 的语法中没有给出长度信息，实际的传输、存储系统需要增加额外的头实现各个 NAL 单元的定界。其中，AVI 文件和 MPEG TS 广播流采取的是字节流的语法格式，即在 NAL 单元之前增加 0x00000001 的同步码，则从 AVI 文件或 MPEG TS PES 包中读出的一个 H.264 视频帧以下面的形式存在：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 00 00 01 06 ... 00 00 00 01 67 ... 00 00 00 01 68 ... 00 00 00 01 65 ...</span><br><span class="line">SEI 信息   SPS  PPS IDR Slice</span><br></pre></td></tr></table></figure><p>而对于 MP4 文件，NAL 单元之前没有同步码，却有若干字节的长度码，来表示 NAL 单元的长度，这个长度码所占用的字节数由 MP4 文件头给出；此外，从 MP4 读出来的视频帧不包含 PPS 和 SPS，这些信息位于 MP4的文件头中，解析器必须在打开文件的时候就获取它们。从 MP4 文件读出的一个 H.264 帧往往是下面的形式（假设长度码为 2 字节）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">00 19 06 [... 25 字节...] 24 aa 65 [... 9386 字节...]</span><br><span class="line">SEI 信息 IDR Slice</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;文章参考汇总至&lt;a href=&quot;https://blog.csdn.net/leixiaohua1020/article/details/45536607&quot;&gt;雷神笔记&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;编码-x264&quot;&gt;&lt;a href=&quot;#编码-x264&quot; class=&quot;headerlink&quot; title=&quot;编码 - x264&quot;&gt;&lt;/a&gt;编码 - x264&lt;/h1&gt;&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h2&gt;&lt;p&gt;最近正在研究H.264和HEVC的编码方式，因此分析了一下最常见的H.264编码器——x264的源代码。本文简单梳理一下它的结构。X264的源代码量比较大而且涉及到很多的算法，目前还有很多不懂的地方，因此也不能保证分析的完全正确。目前打算先把已经理解的部分整理出来以作备忘。&lt;/p&gt;
&lt;h3 id=&quot;1-1-函数调用关系图&quot;&gt;&lt;a href=&quot;#1-1-函数调用关系图&quot; class=&quot;headerlink&quot; title=&quot;1.1 函数调用关系图&quot;&gt;&lt;/a&gt;1.1 函数调用关系图&lt;/h3&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg框架详解</title>
    <link href="http://miaopei.github.io/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/"/>
    <id>http://miaopei.github.io/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/</id>
    <published>2019-05-27T02:14:50.000Z</published>
    <updated>2024-06-13T08:24:26.199Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/84499632">[总结]FFMPEG视音频编解码零基础学习方法</a></p></blockquote><h1 id="1-架构图"><a href="#1-架构图" class="headerlink" title="1. 架构图"></a>1. 架构图</h1><h2 id="1-1-FFMPEG-SDL的视频播放器"><a href="#1-1-FFMPEG-SDL的视频播放器" class="headerlink" title="1.1 FFMPEG+SDL的视频播放器"></a>1.1 FFMPEG+SDL的视频播放器</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/38868499">最简单的基于FFMPEG+SDL的视频播放器 ver2 （采用SDL2.0）</a></p></blockquote><p><strong>FFmpeg 解码一个视频流程：</strong></p><span id="more"></span><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E6%92%AD%E6%94%BE%E5%99%A8%E8%A7%A3%E7%A0%81%E7%9A%84%E6%B5%81%E7%A8%8B%E7%94%A8%E5%9B%BE.png" class="" title="播放器解码的流程用图"><p><strong>SDL2.0 显示 YUV 的流程：</strong></p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/SDL2.0%E6%98%BE%E7%A4%BAYUV%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="SDL2.0显示YUV的流程图"><h2 id="1-2-FFMPEG的视频编码器（YUV编码为H-264）"><a href="#1-2-FFMPEG的视频编码器（YUV编码为H-264）" class="headerlink" title="1.2 FFMPEG的视频编码器（YUV编码为H.264）"></a>1.2 FFMPEG的视频编码器（YUV编码为H.264）</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/25430425">最简单的基于FFMPEG的视频编码器（YUV编码为H.264）</a></p><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/39770947">最简单的基于FFmpeg的视频编码器-更新版（YUV编码为HEVC(H.265)）</a></p><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/42181271">最简单的基于FFmpeg的编码器-纯净版（不包含libavformat）</a></p></blockquote><h3 id="1-2-1-FFmpeg编码视频的流程图"><a href="#1-2-1-FFmpeg编码视频的流程图" class="headerlink" title="1.2.1 FFmpeg编码视频的流程图"></a>1.2.1 FFmpeg编码视频的流程图</h3><p>通过该流程，不仅可以编码H.264&#x2F;H.265的码流，而且可以编码MPEG4&#x2F;MPEG2&#x2F;VP9&#x2F;VP8等多种码流。实际上使用FFmpeg编码视频的方式都是一样的。图中蓝色背景的函数是实际输出数据的函数。浅绿色的函数是视频编码的函数。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/FFmpeg%E7%BC%96%E7%A0%81%E8%A7%86%E9%A2%91%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="FFmpeg编码视频的流程图"><p>简单介绍一下流程中各个函数的意义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">av_register_all()  <span class="comment">// 注册FFmpeg所有编解码器。</span></span><br><span class="line">avformat_alloc_output_context2()  <span class="comment">// 初始化输出码流的AVFormatContext。</span></span><br><span class="line">avio_open()  <span class="comment">// 打开输出文件。</span></span><br><span class="line">av_new_stream()  <span class="comment">// 创建输出码流的AVStream。</span></span><br><span class="line">avcodec_find_encoder()  <span class="comment">// 查找编码器。</span></span><br><span class="line">avcodec_open2()  <span class="comment">// 打开编码器。</span></span><br><span class="line">avformat_write_header()  <span class="comment">// 写文件头（对于某些没有文件头的封装格式，不需要此函数。比如说MPEG2TS）。</span></span><br><span class="line">avcodec_encode_video2()  <span class="comment">// 编码一帧视频。即将AVFrame（存储YUV像素数据）编码为AVPacket（存储H.264等格式的码流数据）。</span></span><br><span class="line">av_write_frame()  <span class="comment">// 将编码后的视频码流写入文件。</span></span><br><span class="line">flush_encoder()  <span class="comment">// 输入的像素数据读取完成后调用此函数。用于输出编码器中剩余的AVPacket。</span></span><br><span class="line">av_write_trailer()  <span class="comment">// 写文件尾（对于某些没有文件头的封装格式，不需要此函数。比如说MPEG2TS）。</span></span><br></pre></td></tr></table></figure><h3 id="1-2-2-“纯净”的基于FFmpeg的视频编码器"><a href="#1-2-2-“纯净”的基于FFmpeg的视频编码器" class="headerlink" title="1.2.2 “纯净”的基于FFmpeg的视频编码器"></a>1.2.2 “纯净”的基于FFmpeg的视频编码器</h3><p>以下记录一个更加 “纯净” 的基于 FFmpeg 的视频编码器。此前记录过一个基于 FFmpeg 的视频编码器：</p><p><a href="http://blog.csdn.net/leixiaohua1020/article/details/39770947"> 《最简单的基于FFmpeg的视频编码器-更新版（YUV编码为HEVC(H.265)）》</a></p><p>这个视频编码器调用了 FFmpeg 中的 libavformat 和 libavcodec 两个库完成了视频编码工作。但是这不是一个 “纯净” 的编码器。</p><p>上述两个库中 libavformat 完成封装格式处理，而 libavcodec 完成编码工作。</p><p>一个 “纯净” 的编码器，理论上说只需要使用 libavcodec 就足够了，并不需要使用 libavformat。一下记录的编码器就是这样的一个 “纯净” 的编码器，它仅仅通过调用 libavcodec 将 YUV 数据编码为 H.264&#x2F;HEVC 等格式的压缩视频码流。</p><p><strong>仅使用libavcodec（不使用libavformat）编码视频的流程：</strong></p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E4%BB%85%E4%BD%BF%E7%94%A8libavcodec%E7%BC%96%E7%A0%81%E8%A7%86%E9%A2%91%E7%9A%84%E6%B5%81%E7%A8%8B.png" class="" title="仅使用libavcodec编码视频的流程"><p>流程图中关键函数的作用如下所列：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">avcodec_register_all()  <span class="comment">// 注册所有的编解码器。</span></span><br><span class="line">avcodec_find_encoder()  <span class="comment">// 查找编码器。</span></span><br><span class="line">avcodec_alloc_context3()  <span class="comment">// 为AVCodecContext分配内存。</span></span><br><span class="line">avcodec_open2()  <span class="comment">// 打开编码器。</span></span><br><span class="line">avcodec_encode_video2()  <span class="comment">// 编码一帧数据。</span></span><br></pre></td></tr></table></figure><p>两个存储数据的结构体如下所列：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AVFrame  <span class="comment">// 存储一帧未编码的像素数据。</span></span><br><span class="line">AVPacket  <span class="comment">// 存储一帧压缩编码数据。</span></span><br></pre></td></tr></table></figure><p><strong>对比：</strong></p><p>简单记录一下这个只使用 libavcodec 的 “纯净版” 视频编码器和使用 libavcodec+libavformat 的视频编码器的不同。</p><p>（1）下列与libavformat相关的函数在“纯净版”视频编码器中都不存在。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">av_register_all注册所有的编解码器，复用/解复用器等等组件。其中调用了</span><br><span class="line">avcodec_register_all()  <span class="comment">// 注册所有编解码器相关的组件。</span></span><br><span class="line">avformat_alloc_context()  <span class="comment">// 创建AVFormatContext结构体。</span></span><br><span class="line">avformat_alloc_output_context2()  <span class="comment">// 初始化一个输出流。</span></span><br><span class="line">avio_open()  <span class="comment">// 打开输出文件。</span></span><br><span class="line">avformat_new_stream()  <span class="comment">// 创建AVStream结构体。avformat_new_stream()中会调用</span></span><br><span class="line">avcodec_alloc_context3()  <span class="comment">// 创建AVCodecContext结构体。</span></span><br><span class="line">avformat_write_header()  <span class="comment">// 写文件头。</span></span><br><span class="line">av_write_frame()  <span class="comment">// 写编码后的文件帧。</span></span><br><span class="line">av_write_trailer()  <span class="comment">// 写文件尾。</span></span><br></pre></td></tr></table></figure><p>（2）新增了如下几个函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avcodec_register_all()  <span class="comment">// 只注册编解码器有关的组件。</span></span><br><span class="line">avcodec_alloc_context3()  <span class="comment">// 创建AVCodecContext结构体。</span></span><br></pre></td></tr></table></figure><p>可以看出，相比于“完整”的编码器，这个纯净的编码器函数调用更加简单，功能相对少一些，相对来说更加的“轻量”。</p><h2 id="1-3-解码框架图"><a href="#1-3-解码框架图" class="headerlink" title="1.3 解码框架图"></a>1.3 解码框架图</h2><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/FFmpeg%E6%BA%90%E7%A0%81API%E7%BB%93%E6%9E%84%E5%9B%BE-%E8%A7%A3%E7%A0%81.png" class="" title="FFmpeg源码API结构图-解码"><h2 id="1-4-编码框架图"><a href="#1-4-编码框架图" class="headerlink" title="1.4 编码框架图"></a>1.4 编码框架图</h2><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/FFmpeg%E6%BA%90%E7%A0%81API%E7%BB%93%E6%9E%84%E5%9B%BE-%E7%BC%96%E7%A0%81.png" class="" title="FFmpeg源码API结构图-编码"><h1 id="2-通用函数解析"><a href="#2-通用函数解析" class="headerlink" title="2. 通用函数解析"></a>2. 通用函数解析</h1><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44220151">函数解析</a></p></blockquote><h2 id="2-1-av-register-all"><a href="#2-1-av-register-all" class="headerlink" title="2.1 av_register_all()"></a>2.1 av_register_all()</h2><p>ffmpeg 注册复用器，编码器等的函数 <code>av_register_all()</code>。该函数在所有基于ffmpeg的应用程序中几乎都是第一个被调用的。只有调用了该函数，才能使用复用器，编码器等。</p><p>函数调用关系图如下图所示。<code>av_register_all()</code> 调用了 <code>avcodec_register_all()</code>。<code>avcodec_register_all()</code> 注册了和编解码器有关的组件：硬件加速器，解码器，编码器，Parser，Bitstream Filter。<code>av_register_all()</code> 除了调用 <code>avcodec_register_all()</code> 之外，还注册了复用器，解复用器，协议处理器。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_register_all.png" class="" title="av_register_all"><h2 id="2-2-内存的分配和释放（av-malloc-、av-free-等）"><a href="#2-2-内存的分配和释放（av-malloc-、av-free-等）" class="headerlink" title="2.2 内存的分配和释放（av_malloc()、av_free()等）"></a>2.2 内存的分配和释放（av_malloc()、av_free()等）</h2><p>内存操作的常见函数位于 <code>libavutil\mem.c</code> 中。本文记录FFmpeg开发中最常使用的几个函数：<code>av_malloc()</code>，<code>av_realloc()</code>，<code>av_mallocz()</code>，<code>av_calloc()</code>，<code>av_free()</code>，<code>av_freep()</code>。</p><p><code>av_malloc()</code> 就是简单的封装了系统函数malloc()，并做了一些错误检查工作。</p><h3 id="2-2-1-关于size-t"><a href="#2-2-1-关于size-t" class="headerlink" title="2.2.1 关于size_t"></a>2.2.1 关于size_t</h3><p>size _t  这个类型在 FFmpeg 中多次出现，简单解释一下其作用。size _t 是为了增强程序的可移植性而定义的。不同系统上，定义 size_t 可能不一样。它实际上就是 unsigned int。</p><h3 id="2-2-2-为什么要内存对齐？"><a href="#2-2-2-为什么要内存对齐？" class="headerlink" title="2.2.2 为什么要内存对齐？"></a>2.2.2 为什么要内存对齐？</h3><p>FFmpeg 内存分配方面多次涉及到 “内存对齐”（memory alignment）的概念。</p><p>这方面内容在 IBM 的网站上有一篇文章，讲的挺通俗易懂的，在此简单转述一下。</p><p>程序员通常认为内存就是一个字节数组，每次可以一个一个字节存取内存。例如在 C 语言中使用 <code>char *</code> 指代 “一块内存”，Java 中使用 <code>byte[]</code> 指代一块内存。如下所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90-01.png" class="" title="内存对齐-01"><p>但那实际上计算机处理器却不是这样认为的。处理器相对比较 “懒惰”，它会以 2 字节，4 字节，8 字节，16 字节甚至 32 字节来存取内存。例如下图显示了以 4 字节为单位读写内存的处理器 “看待” 上述内存的方式。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90-02.png" class="" title="内存对齐-02"><p>上述的存取单位的大小称之为内存存取粒度。</p><p>下面看一个实例，分别从地址0，和地址 1 读取 4 个字节到寄存器。</p><p>从程序员的角度来看，读取方式如下图所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90-03.png" class="" title="内存对齐-03"><p>而 2 字节存取粒度的处理器的读取方式如下图所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90-04.png" class="" title="内存对齐-04"><p>可以看出 2 字节存取粒度的处理器从地址 0 读取 4 个字节一共读取 2 次；从地址 1 读取 4 个字节一共读取了 3 次。由于每次读取的开销是固定的，因此从地址 1 读取 4 字节的效率有所下降。</p><p>4 字节存取粒度的处理器的读取方式如下图所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90-05.png" class="" title="内存对齐-05"><p>可以看出 4 字节存取粒度的处理器从地址 0 读取 4 个字节一共读取 1 次；从地址 1 读取 4 个字节一共读取了 2 次。从地址 1 读取的开销比从地址 0 读取多了一倍。由此可见内存不对齐对 CPU 的性能是有影响的。 </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">av_malloc()  <span class="comment">// 是FFmpeg中最常见的内存分配函数, av_malloc()就是简单的封装了系统函数malloc()</span></span><br><span class="line">av_realloc()  <span class="comment">// 用于对申请的内存的大小进行调整。</span></span><br><span class="line">av_mallocz()  <span class="comment">// 可以理解为av_malloc()+zeromemory</span></span><br><span class="line">av_calloc()  <span class="comment">// 则是简单封装了av_mallocz()</span></span><br><span class="line">av_free()  <span class="comment">// 用于释放申请的内存</span></span><br><span class="line">av_freep()  <span class="comment">// 简单封装了av_free()。并且在释放内存之后将目标指针设置为NULL</span></span><br></pre></td></tr></table></figure><h2 id="2-3-常见结构体的初始化和销毁（AVFormatContext，AVFrame等）"><a href="#2-3-常见结构体的初始化和销毁（AVFormatContext，AVFrame等）" class="headerlink" title="2.3 常见结构体的初始化和销毁（AVFormatContext，AVFrame等）"></a>2.3 常见结构体的初始化和销毁（AVFormatContext，AVFrame等）</h2><blockquote><p><a href="http://blog.csdn.net/leixiaohua1020/article/details/11693997">FFMPEG中最关键的结构体之间的关系</a></p></blockquote><p>常见的结构体如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统领全局的基本结构体。主要用于处理封装格式（FLV/MKV/RMVB 等）</span></span><br><span class="line">AVFormatContext</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输入输出对应的结构体，用于输入输出（读写文件，RTMP 协议等）</span></span><br><span class="line">AVIOContext</span><br><span class="line"></span><br><span class="line"><span class="comment">// 视音频流对应的结构体，用于视音频编解码</span></span><br><span class="line">AVStream，AVCodecContext</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储非压缩的数据（视频对应 RGB/YUV 像素数据，音频对应 PCM 采样数据）</span></span><br><span class="line">AVFrame</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储压缩数据（视频对应 H.264 等码流数据，音频对应 AAC/MP3 等码流数据）</span></span><br><span class="line">AVPacket</span><br></pre></td></tr></table></figure><p>他们之间的关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%B8%B8%E8%A7%81%E7%BB%93%E6%9E%84%E4%BD%93%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="常见结构体之间的关系"><p>简单分析一下上述几个结构体的初始化和销毁函数。这些函数列表如下。</p><table><thead><tr><th>结构体</th><th>初始化</th><th>销毁</th></tr></thead><tbody><tr><td>AVFormatContext</td><td>avformat_alloc_context()</td><td>avformat_free_context()</td></tr><tr><td>AVIOContext</td><td>avio_alloc_context()</td><td></td></tr><tr><td>AVStream</td><td>avformat_new_stream()</td><td></td></tr><tr><td>AVCodecContext</td><td>avcodec_alloc_context3()</td><td></td></tr><tr><td>AVFrame</td><td>av_frame_alloc();<br />av_image_fill_arrays()</td><td>av_frame_free()</td></tr><tr><td>AVPacket</td><td>av_init_packet();<br />av_new_packet()</td><td>av_free_packet()</td></tr></tbody></table><h3 id="2-3-1-avformat-alloc-context"><a href="#2-3-1-avformat-alloc-context" class="headerlink" title="2.3.1 avformat_alloc_context()"></a>2.3.1 avformat_alloc_context()</h3><p><code>avformat_alloc_context()</code> 的定义位于 <code>libavformat\options.c</code>。</p><p><code>avformat_alloc_context()</code> 调用 <code>av_malloc()</code> 为 AVFormatContext 结构体分配了内存，而且同时也给 AVFormatContext 中的 <code>internal</code> 字段分配内存（这个字段是 FFmpeg 内部使用的，先不分析）。此外调用了一个 <code>avformat_get_context_defaults()</code> 函数。该函数用于设置 AVFormatContext 的字段的默认值。它的定义也位于 <code>libavformat\options.c</code>，确切的说就位于 <code>avformat_alloc_context()</code>上面</p><p><code>avformat_get_context_defaults()</code> 首先调用 <code>memset()</code> 将 AVFormatContext 的所有字段置 0。而后调用了一个函数 <code>av_opt_set_defaults()</code> 。<code>av_opt_set_defaults()</code> 用于给字段设置默认值。</p><p><code>avformat_alloc_context()</code> 代码的函数调用关系如下图所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_alloc_context.png" class="" title="avformat_alloc_context"><p><code>avformat_free_context()</code> 的声明位于 <code>libavformat\avformat.h</code></p><p><code>avformat_free_context()</code> 的定义位于 <code>libavformat\options.c</code></p><p><code>avformat_free_context()</code> 调用了各式各样的销毁函数：<code>av_opt_free()</code>，<code>av_freep()</code>，<code>av_dict_free()</code>。这些函数分别用于释放不同种类的变量，在这里不再详细讨论。</p><p>在这里看一个释放 AVStream 的函数 <code>ff_free_stream()</code>。该函数的定义位于 <code>libavformat\options.c</code>（其实就在 <code>avformat_free_context()</code> 上方）, 与释放 AVFormatContext 类似，释放 AVStream 的时候，也是调用了 <code>av_freep()</code>，<code>av_dict_free()</code> 这些函数释放有关的字段。如果使用了 parser 的话，会调用 <code>av_parser_close()</code> 关闭该 parser。</p><h3 id="2-3-2-avio-alloc-context"><a href="#2-3-2-avio-alloc-context" class="headerlink" title="2.3.2 avio_alloc_context()"></a>2.3.2 avio_alloc_context()</h3><p>AVIOContext 的初始化函数是 <code>avio_alloc_context()</code>，销毁的时候使用 <code>av_free()</code> 释放掉其中的缓存即可。它的声明位于 <code>libavformat\avio.h</code> 中</p><p><code>avio_alloc_context()</code> 定义位于 <code>libavformat\aviobuf.c</code> 中</p><p><code>avio_alloc_context()</code> 首先调用 <code>av_mallocz()</code> 为 AVIOContext 分配内存。而后调用了一个函数 <code>ffio_init_context()</code> 。该函数完成了真正的初始化工作</p><h3 id="2-3-3-avformat-new-stream"><a href="#2-3-3-avformat-new-stream" class="headerlink" title="2.3.3 avformat_new_stream()"></a>2.3.3 avformat_new_stream()</h3><p><code>avformat_new_stream()</code> 的声明位于 <code>libavformat\avformat.h</code> 中</p><p>AVStream 的初始化函数是 <code>avformat_new_stream()</code>，销毁函数使用销毁 AVFormatContext 的 <code>avformat_free_context()</code> 就可以了。</p><p><code>avformat_new_stream()</code> 的定义位于 <code>libavformat\utils.c</code> 中</p><p><code>avformat_new_stream()</code> 首先调用 <code>av_mallocz()</code>  为 AVStream 分配内存。接着给新分配的AVStream 的各个字段赋上默认值。然后调用了另一个函数 <code>avcodec_alloc_context3()</code> 初始化 AVStream 中的 AVCodecContext。</p><h3 id="2-3-4-avcodec-alloc-context3"><a href="#2-3-4-avcodec-alloc-context3" class="headerlink" title="2.3.4 avcodec_alloc_context3()"></a>2.3.4 avcodec_alloc_context3()</h3><p><code>avcodec_alloc_context3()</code> 的声明位于 <code>libavcodec\avcodec.h</code> 中</p><p><code>avcodec_alloc_context3()</code> 的定义位于 <code>libavcodec\options.c</code> 中</p><p><code>avcodec_alloc_context3()</code> 首先调用 <code>av_malloc()</code> 为 AVCodecContext 分配存储空间，然后调用了一个函数 <code>avcodec_get_context_defaults3()</code> 用于设置该 AVCodecContext 的默认值</p><p><code>avformat_new_stream()</code> 函数的调用结构如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_new_stream.png" class="" title="avformat_new_stream"><h3 id="2-3-5-av-frame-alloc"><a href="#2-3-5-av-frame-alloc" class="headerlink" title="2.3.5 av_frame_alloc()"></a>2.3.5 av_frame_alloc()</h3><p>AVFrame 的初始化函数是 <code>av_frame_alloc()</code>，销毁函数是 <code>av_frame_free()</code>。在这里有一点需要注意，旧版的 FFmpeg 都是使用 <code>avcodec_alloc_frame()</code> 初始化 AVFrame 的，但是我在写这篇文章的时候，<code>avcodec_alloc_frame()</code> 已经被标记为 “过时的” 了，为了保证与时俱进，决定分析新的<code>API——av_frame_alloc()</code>。</p><p><code>av_frame_alloc()</code> 的声明位于 <code>libavutil\frame.h</code></p><p><code>av_frame_alloc()</code> 的定义位于 <code>libavutil\frame.c</code></p><p><code>av_frame_alloc()</code> 首先调用 <code>av_mallocz()</code> 为 AVFrame 结构体分配内存。而后调用了一个函数<code>get_frame_defaults()</code> 用于设置一些默认参数</p><p>从 <code>av_frame_alloc()</code> 的代码我们可以看出，该函数并没有为 AVFrame 的像素数据分配空间。因此AVFrame 中的像素数据的空间需要自行分配空间，例如使用 <code>avpicture_fill()</code>， <code>av_image_fill_arrays()</code> 等函数。</p><p><code>av_frame_alloc()</code> 函数的调用结构如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_frame_alloc.png" class="" title="av_frame_alloc"><h4 id="2-3-5-1-avpicture-fill"><a href="#2-3-5-1-avpicture-fill" class="headerlink" title="2.3.5.1 avpicture_fill()"></a>2.3.5.1 avpicture_fill()</h4><p><code>avpicture_fill()</code> 的声明位于 <code>libavcodec\avcodec.h</code></p><p><code>avpicture_fill()</code> 的定义位于 <code>libavcodec\avpicture.c</code></p><p><code>avpicture_fill()</code> 仅仅是简单调用了一下 <code>av_image_fill_arrays()</code>。也就是说这两个函数实际上是等同的</p><h4 id="2-3-5-2-av-image-fill-arrays"><a href="#2-3-5-2-av-image-fill-arrays" class="headerlink" title="2.3.5.2 av_image_fill_arrays()"></a>2.3.5.2 av_image_fill_arrays()</h4><p><code>av_image_fill_arrays()</code> 的声明位于 <code>libavutil\imgutils.h</code> 中</p><p><code>av_image_fill_arrays()</code> 的定义位于 <code>libavutil\imgutils.c</code> 中</p><p><code>av_image_fill_arrays()</code> 函数中包含 3 个函数：<code>av_image_check_size()</code>，<code>av_image_fill_linesizes()</code>，<code>av_image_fill_pointers()</code>。<code>av_image_check_size()</code> 用于检查输入的宽高参数是否合理，即不能太大或者为负数。<code>av_image_fill_linesizes()</code> 用于填充dst_linesize。<code>av_image_fill_pointers()</code> 则用于填充 dst_data。它们的定义相对比较简单，不再详细分析。</p><p><code>avpicture_fill()</code> 函数调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avpicture_fill.png" class="" title="avpicture_fill"><h3 id="2-3-6-av-init-packet"><a href="#2-3-6-av-init-packet" class="headerlink" title="2.3.6 av_init_packet()"></a>2.3.6 av_init_packet()</h3><p><code>av_init_packet()</code> 的声明位于 <code>libavcodec\avcodec.h</code></p><p><code>av_init_packet()</code> 的定义位于 <code>libavcodec\avpacket.c</code></p><h3 id="2-3-7-av-new-packet"><a href="#2-3-7-av-new-packet" class="headerlink" title="2.3.7 av_new_packet()"></a>2.3.7 av_new_packet()</h3><p><code>av_new_packet()</code> 的声明位于 <code>libavcodec\avcodec.h</code></p><p><code>av_new_packet()</code> 的定义位于 <code>libavcodec\avpacket.c</code></p><p><code>av_new_packet()</code> 调用了 <code>av_init_packet(pkt)</code>。此外还调用了一个函数 <code>packet_alloc()</code></p><p><code>packet_alloc()</code> 中调用 <code>av_buffer_realloc()</code> 为 AVPacket 分配内存。然后调用 <code>memset()</code> 将分配的内存置 0。</p><p>PS：发现 AVPacket 的结构随着 FFmpeg 的发展越发复杂了。原先 AVPacket 中的数据仅仅存在一个 uint8_t 类型的数组里，而现在已经使用一个专门的结构体 AVBufferRef 存储数据。</p><p><code>av_new_packet()</code> 代码的函数调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_new_packet.png" class="" title="av_new_packet"><p><code>av_free_packet()</code> 的声明位于 <code>libavcodec\avcodec.h</code></p><p><code>av_free_packet()</code> 的定义位于 <code>libavcodec\avpacket.c</code></p><p><code>av_free_packet()</code> 调用 <code>av_buffer_unref()</code> 释放 AVPacket 中的数据，而后还调用了<code>av_packet_free_side_data()</code> 释放了 side_data（存储封装格式可以提供的额外的数据）。</p><h2 id="2-4-avio-open2"><a href="#2-4-avio-open2" class="headerlink" title="2.4 avio_open2()"></a>2.4 avio_open2()</h2><p>该函数用于打开 FFmpeg 的输入输出文件。<code>avio_open2()</code> 的声明位于 <code>libavformat\avio.h</code> 文件中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avio_open2</span><span class="params">(AVIOContext **s, <span class="type">const</span> <span class="type">char</span> *url, <span class="type">int</span> flags,</span></span><br><span class="line"><span class="params">               <span class="type">const</span> AVIOInterruptCB *int_cb, AVDictionary **options)</span>;</span><br></pre></td></tr></table></figure><p><code>avio_open2()</code> 函数参数的含义如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">s：函数调用成功之后创建的AVIOContext结构体。</span><br><span class="line">url：输入输出协议的地址（文件也是一种“广义”的协议，对于文件来说就是文件的路径）。</span><br><span class="line">flags：打开地址的方式。可以选择只读，只写，或者读写。取值如下。</span><br><span class="line">AVIO_FLAG_READ：只读。</span><br><span class="line">AVIO_FLAG_WRITE：只写。</span><br><span class="line">AVIO_FLAG_READ_WRITE：读写。</span><br><span class="line">int_cb：目前还没有用过。</span><br><span class="line">options：目前还没有用过。</span><br></pre></td></tr></table></figure><p>函数调用结构图：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avio_open2.png" class="" title="avio_open2"><h2 id="2-5-av-find-decoder-和-av-find-encoder"><a href="#2-5-av-find-decoder-和-av-find-encoder" class="headerlink" title="2.5 av_find_decoder() 和 av_find_encoder()"></a>2.5 av_find_decoder() 和 av_find_encoder()</h2><p><code>avcodec_find_encoder()</code> 用于查找 FFmpeg 的编码器，</p><p><code>avcodec_find_decoder()</code> 用于查找 FFmpeg 的解码器。</p><p><code>avcodec_find_encoder()</code> 的声明位于 <code>libavcodec\avcodec.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AVCodec *<span class="title function_">avcodec_find_encoder</span><span class="params">(<span class="keyword">enum</span> AVCodecID id)</span>;</span><br></pre></td></tr></table></figure><p>函数的参数是一个编码器的 ID，返回查找到的编码器（没有找到就返回NULL）。</p><p><code>avcodec_find_decoder()</code> 的声明也位于 <code>libavcodec\avcodec.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AVCodec *<span class="title function_">avcodec_find_decoder</span><span class="params">(<span class="keyword">enum</span> AVCodecID id)</span>;</span><br></pre></td></tr></table></figure><p>函数的参数是一个解码器的 ID，返回查找到的解码器（没有找到就返回NULL）。</p><p><code>avcodec_find_encoder()</code> 和 <code>avcodec_find_decoder()</code> 的函数调用关系图如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avcodec_find_encoder.png" class="" title="avcodec_find_encoder"><p><code>avcodec_find_encoder()</code> 的源代码位于 <code>libavcodec\utils.c</code></p><p><code>avcodec_find_encoder()</code> 调用了一个 <code>find_encdec()</code>，注意它的第二个参数是 1。</p><p><code>find_encdec()</code> 的源代码位于 <code>libavcodec\utils.c</code></p><p><code>find_encdec()</code> 中有一个循环，该循环会遍历 AVCodec 结构的链表，逐一比较输入的 ID 和每一个编码器的 ID，直到找到 ID 取值相等的编码器。</p><p>在这里有几点需要注意：</p><p>（1）first_avcodec 是一个全局变量，存储 AVCodec 链表的第一个元素。</p><p>（2）<code>remap_deprecated_codec_id()</code> 用于将一些过时的编码器 ID 映射到新的编码器 ID。</p><p>（3）函数的第二个参数 encoder 用于确定查找编码器还是解码器。当该值为 1 的时候，用于查找编码器，此时会调用 <code>av_codec_is_encoder()</code> 判断 AVCodec 是否为编码器；当该值为 0 的时候，用于查找解码器，此时会调用 <code>av_codec_is_decoder()</code> 判断 AVCodec 是否为解码器。</p><p><code>avcodec_find_decoder()</code> 的源代码位于 <code>libavcodec\utils.c</code></p><p><code>avcodec_find_decoder()</code> 同样调用了 <code>find_encdec()</code>，只是第 2 个参数设置为 0。</p><h2 id="2-6-avcodec-open2"><a href="#2-6-avcodec-open2" class="headerlink" title="2.6 avcodec_open2()"></a>2.6 avcodec_open2()</h2><p>该函数用于初始化一个视音频编解码器的 AVCodecContext。</p><p><code>avcodec_open2()</code> 的声明位于 <code>libavcodec\avcodec.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avcodec_open2</span><span class="params">(AVCodecContext *avctx, <span class="type">const</span> AVCodec *codec, AVDictionary **options)</span>;</span><br></pre></td></tr></table></figure><p>用中文简单转述一下avcodec_open2()各个参数的含义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">avctx：需要初始化的 AVCodecContext。</span><br><span class="line">codec：输入的 AVCodec</span><br><span class="line">options：一些选项。例如使用 libx264 编码的时候，“preset”，“tune”等都可以通过该参数设置。</span><br></pre></td></tr></table></figure><p><code>avcodec_open2()</code> 函数调用关系非常简单，如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avcodec_open2.png" class="" title="avcodec_open2"><p><code>avcodec_open2()</code> 的定义位于 <code>libavcodec\utils.c</code></p><p><code>avcodec_open2()</code> 的源代码量是非常长的，但是它的调用关系非常简单——它只调用了一个关键的函数，即 AVCodec 的 <code>init()</code>，后文将会对这个函数进行分析。</p><p>我们可以简单梳理一下 <code>avcodec_open2()</code> 所做的工作，如下所列：</p><p>（1）为各种结构体分配内存（通过各种 <code>av_malloc()</code> 实现）。</p><p>（2）将输入的 AVDictionary 形式的选项设置到 AVCodecContext。</p><p>（3）其他一些零零碎碎的检查，比如说检查编解码器是否处于 “实验” 阶段。</p><p>（4）如果是编码器，检查输入参数是否符合编码器的要求</p><p>（5）调用 AVCodec 的 <code>init()</code> 初始化具体的解码器。</p><p>前几步比较简单，不再分析。在这里我们分析一下第4步和第5步。</p><h3 id="2-6-1-检查输入参数是否符合编码器要求"><a href="#2-6-1-检查输入参数是否符合编码器要求" class="headerlink" title="2.6.1 检查输入参数是否符合编码器要求"></a>2.6.1 检查输入参数是否符合编码器要求</h3><p>在这里简单分析一下第 4 步，即 “检查输入参数是否符合编码器的要求”。这一步中检查了很多的参数，在这里我们随便选一个参数 pix_fmts（像素格式）看一下，如下所示。</p><details><summary>代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//检查像素格式</span></span><br><span class="line">        <span class="keyword">if</span> (avctx-&gt;codec-&gt;pix_fmts) &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; avctx-&gt;codec-&gt;pix_fmts[i] != AV_PIX_FMT_NONE; i++)</span><br><span class="line">                <span class="keyword">if</span> (avctx-&gt;pix_fmt == avctx-&gt;codec-&gt;pix_fmts[i])</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">if</span> (avctx-&gt;codec-&gt;pix_fmts[i] == AV_PIX_FMT_NONE</span><br><span class="line">                &amp;&amp; !((avctx-&gt;codec_id == AV_CODEC_ID_MJPEG || avctx-&gt;codec_id == AV_CODEC_ID_LJPEG)</span><br><span class="line">                     &amp;&amp; avctx-&gt;strict_std_compliance &lt;= FF_COMPLIANCE_UNOFFICIAL)) &#123;</span><br><span class="line">                <span class="type">char</span> buf[<span class="number">128</span>];</span><br><span class="line">                <span class="built_in">snprintf</span>(buf, <span class="keyword">sizeof</span>(buf), <span class="string">&quot;%d&quot;</span>, avctx-&gt;pix_fmt);</span><br><span class="line">                av_log(avctx, AV_LOG_ERROR, <span class="string">&quot;Specified pixel format %s is invalid or not supported\n&quot;</span>,</span><br><span class="line">                       (<span class="type">char</span> *)av_x_if_null(av_get_pix_fmt_name(avctx-&gt;pix_fmt), buf));</span><br><span class="line">                ret = AVERROR(EINVAL);</span><br><span class="line">                <span class="keyword">goto</span> free_and_end;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (avctx-&gt;codec-&gt;pix_fmts[i] == AV_PIX_FMT_YUVJ420P ||</span><br><span class="line">                avctx-&gt;codec-&gt;pix_fmts[i] == AV_PIX_FMT_YUVJ411P ||</span><br><span class="line">                avctx-&gt;codec-&gt;pix_fmts[i] == AV_PIX_FMT_YUVJ422P ||</span><br><span class="line">                avctx-&gt;codec-&gt;pix_fmts[i] == AV_PIX_FMT_YUVJ440P ||</span><br><span class="line">                avctx-&gt;codec-&gt;pix_fmts[i] == AV_PIX_FMT_YUVJ444P)</span><br><span class="line">                avctx-&gt;color_range = AVCOL_RANGE_JPEG;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></details><p>可以看出，该代码首先进入了一个 <code>for()</code> 循环，将 AVCodecContext 中设定的 <code>pix_fmt</code> 与编码器AVCodec 中的 <code>pix_fmts</code> 数组中的元素逐一比较。</p><p>先简单介绍一下 AVCodec 中的 <code>pix_fmts</code> 数组。AVCodec 中的 <code>pix_fmts</code> 数组存储了该种编码器支持的像素格式，并且规定以 AV_PIX_FMT_NONE（AV_PIX_FMT_NONE 取值为 -1）为结尾。例如，libx264 的 <code>pix_fmts</code> 数组的定义位于 <code>libavcodec\libx264.c</code>，如下所示。</p><details><summary>代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">const</span> <span class="class"><span class="keyword">enum</span> <span class="title">AVPixelFormat</span> <span class="title">pix_fmts_8bit</span>[] =</span> &#123;</span><br><span class="line">    AV_PIX_FMT_YUV420P,</span><br><span class="line">    AV_PIX_FMT_YUVJ420P,</span><br><span class="line">    AV_PIX_FMT_YUV422P,</span><br><span class="line">    AV_PIX_FMT_YUVJ422P,</span><br><span class="line">    AV_PIX_FMT_YUV444P,</span><br><span class="line">    AV_PIX_FMT_YUVJ444P,</span><br><span class="line">    AV_PIX_FMT_NV12,</span><br><span class="line">    AV_PIX_FMT_NV16,</span><br><span class="line">    AV_PIX_FMT_NONE</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>从 <code>pix_fmts_8bit</code> 的定义可以看出 libx264 主要支持的是以 YUV 为主的像素格式。</p><p>现在回到 “检查输入 <code>pix_fmt</code> 是否符合编码器的要求” 的那段代码。如果 <code>for()</code> 循环从 <code>AVCodec-&gt;pix_fmts</code> 数组中找到了符合 <code>AVCodecContext-&gt;pix_fmt</code> 的像素格式，或者完成了 <code>AVCodec-&gt;pix_fmts</code> 数组的遍历，都会跳出循环。如果发现 <code>AVCodec-&gt;pix_fmts</code> 数组中索引为 <code>i</code> 的元素是 AV_PIX_FMT_NONE（即最后一个元素，取值为 -1）的时候，就认为没有找到合适的像素格式，并且最终提示错误信息。</p><h3 id="2-6-2-AVCodec-init"><a href="#2-6-2-AVCodec-init" class="headerlink" title="2.6.2 AVCodec-&gt;init()"></a>2.6.2 AVCodec-&gt;init()</h3><p><code>avcodec_open2()</code> 中最关键的一步就是调用 AVCodec 的 <code>init()</code> 方法初始化具体的编码器。AVCodec 的 <code>init()</code> 是一个函数指针，指向具体编解码器中的初始化函数。这里我们以 libx264 为例，看一下它对应的 AVCodec 的定义。</p><p>libx264 对应的 AVCodec 的定义位于 <code>libavcodec\libx264.c</code></p><details><summary>代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">AVCodec ff_libx264_encoder = &#123;</span><br><span class="line">    .name             = <span class="string">&quot;libx264&quot;</span>,</span><br><span class="line">    .long_name        = NULL_IF_CONFIG_SMALL(<span class="string">&quot;libx264 H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10&quot;</span>),</span><br><span class="line">    .type             = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">    .id               = AV_CODEC_ID_H264,</span><br><span class="line">    .priv_data_size   = <span class="keyword">sizeof</span>(X264Context),</span><br><span class="line">    .init             = X264_init,</span><br><span class="line">    .encode2          = X264_frame,</span><br><span class="line">    .close            = X264_close,</span><br><span class="line">    .capabilities     = CODEC_CAP_DELAY | CODEC_CAP_AUTO_THREADS,</span><br><span class="line">    .priv_class       = &amp;x264_class,</span><br><span class="line">    .defaults         = x264_defaults,</span><br><span class="line">    .init_static_data = X264_init_static,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>可以看出在 <code>ff_libx264_encoder</code> 中 <code>init()</code> 指向 <code>X264_init()</code> 。<code>X264_init()</code> 的定义同样位于<code>libavcodec\libx264.c</code></p><p><code>X264_init()</code> 的代码以后研究 X264 的时候再进行细节的分析，在这里简单记录一下它做的两项工作：</p><p>（1）设置 X264Context 的参数。X264Context 主要完成了 libx264 和 FFmpeg 对接的功能。可以看出代码主要在设置一个 params 结构体变量，该变量的类型即是 x264 中存储参数的结构体 <code>x264_param_t</code>。<br>（2）调用 libx264 的 API 进行编码器的初始化工作。例如调用 <code>x264_param_default()</code> 设置默认参数，调用 <code>x264_param_apply_profile()</code> 设置 profile，调用 <code>x264_encoder_open()</code> 打开编码器等等。</p><p>最后附上 X264Context 的定义，位于 <code>libavcodec\libx264.c</code></p><h2 id="2-7-avcodec-close"><a href="#2-7-avcodec-close" class="headerlink" title="2.7 avcodec_close()"></a>2.7 avcodec_close()</h2><p>该函数用于关闭编码器。<code>avcodec_close()</code> 函数的声明位于 <code>libavcodec\avcodec.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avcodec_close</span><span class="params">(AVCodecContext *avctx)</span>;</span><br></pre></td></tr></table></figure><p>该函数只有一个参数，就是需要关闭的编码器的 AVCodecContext。</p><p>函数的调用关系图如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avcodec_close.png" class="" title="avcodec_close"><p><code>avcodec_close()</code> 的定义位于 <code>libavcodec\utils.c</code></p><p>从 <code>avcodec_close()</code> 的定义可以看出，该函数释放 AVCodecContext 中有关的变量，并且调用了 AVCodec 的 <code>close()</code> 关闭了解码器。</p><h1 id="3-解码"><a href="#3-解码" class="headerlink" title="3. 解码"></a>3. 解码</h1><h2 id="3-1-图解-FFMPEG-打开媒体的函数-avformat-open-input"><a href="#3-1-图解-FFMPEG-打开媒体的函数-avformat-open-input" class="headerlink" title="3.1 图解 FFMPEG 打开媒体的函数 avformat_open_input"></a>3.1 图解 FFMPEG 打开媒体的函数 avformat_open_input</h2><p>FFMPEG打开媒体的的过程开始于avformat_open_input，因此该函数的重要性不可忽视。</p><p>在该函数中，FFMPEG完成了：</p><ul><li><p>输入输出结构体 AVIOContext 的初始化；</p></li><li><p>输入数据的协议（例如 RTMP，或者 file）的识别（通过一套评分机制）:</p><ul><li>判断文件名的后缀 </li><li>读取文件头的数据进行比对；</li></ul></li><li><p>使用获得最高分的文件协议对应的 URLProtocol，通过函数指针的方式，与 FFMPEG 连接（非专业用词）；</p></li></ul><p>剩下的就是调用该 URLProtocol 的函数进行 open, read 等操作了</p><p>以下是通过 eclipse+MinGW 调试 FFMPEG 源代码获得的函数调用关系图：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/%E5%9B%BE%E8%A7%A3FFMPEG%E6%89%93%E5%BC%80%E5%AA%92%E4%BD%93%E7%9A%84%E5%87%BD%E6%95%B0avformat_open_input.png" class="" title="图解FFMPEG打开媒体的函数avformat_open_input"><p>可见最终都调用了 URLProtocol 结构体中的函数指针。</p><p>URLProtocol 结构如下，是一大堆函数指针的集合（avio.h文件）</p><details><summary>代码</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">URLProtocol</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="built_in">int</span> (*url_open)(URLContext *h, <span class="type">const</span> <span class="type">char</span> *url, <span class="type">int</span> flags);</span><br><span class="line">    <span class="built_in">int</span> (*url_read)(URLContext *h, <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">int</span> size);</span><br><span class="line">    <span class="built_in">int</span> (*url_write)(URLContext *h, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf, <span class="type">int</span> size);</span><br><span class="line">    <span class="built_in">int64_t</span> (*url_seek)(URLContext *h, <span class="type">int64_t</span> pos, <span class="type">int</span> whence);</span><br><span class="line">    <span class="built_in">int</span> (*url_close)(URLContext *h);</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">URLProtocol</span> *next;</span><br><span class="line">    <span class="built_in">int</span> (*url_read_pause)(URLContext *h, <span class="type">int</span> pause);</span><br><span class="line">    <span class="built_in">int64_t</span> (*url_read_seek)(URLContext *h, <span class="type">int</span> stream_index,</span><br><span class="line">                             <span class="type">int64_t</span> timestamp, <span class="type">int</span> flags);</span><br><span class="line">    <span class="built_in">int</span> (*url_get_file_handle)(URLContext *h);</span><br><span class="line">    <span class="type">int</span> priv_data_size;</span><br><span class="line">    <span class="type">const</span> AVClass *priv_data_class;</span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">    <span class="built_in">int</span> (*url_check)(URLContext *h, <span class="type">int</span> mask);</span><br><span class="line">&#125; URLProtocol;</span><br></pre></td></tr></table></figure></details><p>URLProtocol 功能就是完成各种输入协议的读写等操作</p><p>但输入协议种类繁多，它是怎样做到 “大一统” 的呢？</p><p>原来，每个具体的输入协议都有自己对应的 URLProtocol。</p><p>比如 file 协议（FFMPEG 把文件也当做一种特殊的协议）（<code>*file.c</code> 文件）</p><details><summary>代码：</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">URLProtocol ff_pipe_protocol = &#123;</span><br><span class="line">    .name                = <span class="string">&quot;pipe&quot;</span>,</span><br><span class="line">    .url_open            = pipe_open,</span><br><span class="line">    .url_read            = file_read,</span><br><span class="line">    .url_write           = file_write,</span><br><span class="line">    .url_get_file_handle = file_get_handle,</span><br><span class="line">    .url_check           = file_check,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>或者rtmp协议（此处使用了librtmp）（librtmp.c文件）</p><details><summary>代码：</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">URLProtocol ff_rtmp_protocol = &#123;</span><br><span class="line">    .name                = <span class="string">&quot;rtmp&quot;</span>,</span><br><span class="line">    .url_open            = rtmp_open,</span><br><span class="line">    .url_read            = rtmp_read,</span><br><span class="line">    .url_write           = rtmp_write,</span><br><span class="line">    .url_close           = rtmp_close,</span><br><span class="line">    .url_read_pause      = rtmp_read_pause,</span><br><span class="line">    .url_read_seek       = rtmp_read_seek,</span><br><span class="line">    .url_get_file_handle = rtmp_get_file_handle,</span><br><span class="line">    .priv_data_size      = <span class="built_in">sizeof</span>(RTMP),</span><br><span class="line">    .flags               = URL_PROTOCOL_FLAG_NETWORK,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>可见它们把各自的函数指针都赋值给了 URLProtocol 结构体的函数指针</p><p>因此 <code>avformat_open_input</code> 只需调用 url_open, url_read 这些函数就可以完成各种具体输入协议的 open, read 等操作了</p><h2 id="3-2-avformat-open-input"><a href="#3-2-avformat-open-input" class="headerlink" title="3.2 avformat_open_input()"></a>3.2 avformat_open_input()</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/11885813">FFMPEG源码分析：avformat_open_input()（媒体打开函数）</a></p><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44064715">avformat_open_input()</a></p></blockquote><p>个人感觉这个函数确实太重要了，可以算作 FFmpeg 的 “灵魂”</p><p>函数用于打开多媒体数据并且获得一些相关的信息。它的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avformat_open_input</span><span class="params">(AVFormatContext **ps, <span class="type">const</span> <span class="type">char</span> *filename, AVInputFormat *fmt, AVDictionary **options)</span>;</span><br></pre></td></tr></table></figure><p>参数说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ps：函数调用成功之后处理过的 AVFormatContext 结构体。</span><br><span class="line">file：打开的视音频流的 URL。</span><br><span class="line">fmt：强制指定 AVFormatContext 中 AVInputFormat 的。这个参数一般情况下可以设置为 NULL，这样 FFmpeg 可以自动检测 AVInputFormat。</span><br><span class="line">dictionay：附加的一些选项，一般情况下可以设置为 NULL。</span><br></pre></td></tr></table></figure><p>函数执行成功的话，其返回值大于等于 0。</p><p>函数调用结构图如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_open_input.png" class="" title="avformat_open_input"><p><code>avformat_open_input()</code> 定义位于 <code>libavformat\utils.c</code> 中</p><p><code>avformat_open_input()</code> 源代码比较长，一部分是一些容错代码，比如说如果发现传入的 AVFormatContext 指针没有初始化过，就调用 <code>avformat_alloc_context()</code> 初始化该结构体；还有一部分是针对一些格式做的特殊处理，比如 id3v2 信息的处理等等。有关上述两种信息不再详细分析，在这里只选择它关键的两个函数进行分析：</p><ul><li><p>**<code>init_input()</code>**：绝大部分初始化工作都是在这里做的。</p></li><li><p>**<code>s-&gt;iformat-&gt;read_header()</code>**：读取多媒体数据文件头，根据视音频流创建相应的 AVStream。</p></li></ul><h3 id="3-2-1-init-input"><a href="#3-2-1-init-input" class="headerlink" title="3.2.1 init_input()"></a>3.2.1 init_input()</h3><p><code>init_input()</code> 作为一个内部函数，竟然包含了一行注释（一般内部函数都没有注释），足可以看出它的重要性。它的主要工作就是打开输入的视频数据并且探测视频的格式。该函数的定义位于 <code>libavformat\utils.c</code></p><details><summary>代码：</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Open input file and probe the format if necessary. */</span></span><br><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span> <span class="title">init_input</span><span class="params">(AVFormatContext *s, <span class="type">const</span> <span class="type">char</span> *filename,</span></span></span><br><span class="line"><span class="params"><span class="function">                      AVDictionary **options)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> ret;</span><br><span class="line">    AVProbeData pd = &#123; filename, <span class="literal">NULL</span>, <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> score = AVPROBE_SCORE_RETRY;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (s-&gt;pb) &#123;</span><br><span class="line">        s-&gt;flags |= AVFMT_FLAG_CUSTOM_IO;</span><br><span class="line">        <span class="keyword">if</span> (!s-&gt;iformat)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">av_probe_input_buffer2</span>(s-&gt;pb, &amp;s-&gt;iformat, filename,</span><br><span class="line">                                         s, <span class="number">0</span>, s-&gt;format_probesize);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s-&gt;iformat-&gt;flags &amp; AVFMT_NOFILE)</span><br><span class="line">            <span class="built_in">av_log</span>(s, AV_LOG_WARNING, <span class="string">&quot;Custom AVIOContext makes no sense and &quot;</span></span><br><span class="line">                                      <span class="string">&quot;will be ignored with AVFMT_NOFILE format.\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((s-&gt;iformat &amp;&amp; s-&gt;iformat-&gt;flags &amp; AVFMT_NOFILE) ||</span><br><span class="line">        (!s-&gt;iformat &amp;&amp; (s-&gt;iformat = <span class="built_in">av_probe_input_format2</span>(&amp;pd, <span class="number">0</span>, &amp;score))))</span><br><span class="line">        <span class="keyword">return</span> score;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> ((ret = <span class="built_in">avio_open2</span>(&amp;s-&gt;pb, filename, AVIO_FLAG_READ | s-&gt;avio_flags,</span><br><span class="line">                          &amp;s-&gt;interrupt_callback, options)) &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    <span class="keyword">if</span> (s-&gt;iformat)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">av_probe_input_buffer2</span>(s-&gt;pb, &amp;s-&gt;iformat, filename,</span><br><span class="line">                                 s, <span class="number">0</span>, s-&gt;format_probesize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>这个函数在短短的几行代码中包含了好几个 return，因此逻辑还是有点复杂的，我们可以梳理一下：</p><p>在函数的开头的 score 变量是一个判决 AVInputFormat 的分数的门限值，如果最后得到的 AVInputFormat 的分数低于该门限值，就认为没有找到合适的 AVInputFormat 。</p><p>FFmpeg 内部判断封装格式的原理实际上是对每种 AVInputFormat 给出一个分数，满分是 100 分，越有可能正确的 AVInputFormat 给出的分数就越高。最后选择分数最高的 AVInputFormat 作为推测结果。score 的值是一个宏定义 AVPROBE_SCORE_RETRY，我们可以看一下它的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AVPROBE_SCORE_RETRY (AVPROBE_SCORE_MAX/4)</span></span><br></pre></td></tr></table></figure><p>其中 AVPROBE_SCORE_MAX 是 score 的最大值，取值是 100：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AVPROBE_SCORE_MAX       100 <span class="comment">///&lt; maximum score</span></span></span><br></pre></td></tr></table></figure><p>由此我们可以得出 score 取值是 25，即如果推测后得到的最佳 AVInputFormat 的分值低于 25，就认为没有找到合适的 AVInputFormat。</p><p>整个函数的逻辑大体如下：</p><p>（1）当使用了自定义的 AVIOContext 的时候（AVFormatContext 中的 AVIOContext 不为空，即 <code>s-&gt;pb!=NULL</code>），如果指定了 AVInputFormat 就直接返回，如果没有指定就调用 <code>av_probe_input_buffer2()</code> 推测 AVInputFormat。这一情况出现的不算很多，但是当我们从内存中读取数据的时候（需要初始化自定义的 AVIOContext），就会执行这一步骤。</p><p>（2）在更一般的情况下，如果已经指定了 AVInputFormat，就直接返回；如果没有指定 AVInputFormat，就调用 <code>av_probe_input_format(NULL,…)</code> 根据文件路径判断文件格式。这里特意把 <code>av_probe_input_format()</code> 的第 1 个参数写成 “NULL”，是为了强调这个时候实际上并没有给函数提供输入数据，此时仅仅通过文件路径推测 AVInputFormat。</p><p>（3）如果发现通过文件路径判断不出来文件格式，那么就需要打开文件探测文件格式了，这个时候会首先调用 <code>avio_open2()</code> 打开文件，然后调用 <code>av_probe_input_buffer2()</code> 推测 AVInputFormat。</p><h2 id="3-3-avformat-find-stream-info"><a href="#3-3-avformat-find-stream-info" class="headerlink" title="3.3 avformat_find_stream_info()"></a>3.3 avformat_find_stream_info()</h2><p>该函数可以读取一部分视音频数据并且获得一些相关的信息。</p><p><code>avformat_find_stream_info()</code> 的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avformat_find_stream_info</span><span class="params">(AVFormatContext *ic, AVDictionary **options)</span>;</span><br></pre></td></tr></table></figure><p>简单解释一下它的参数的含义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ic：输入的 AVFormatContext。</span><br><span class="line">options：额外的选项，目前没有深入研究过。</span><br></pre></td></tr></table></figure><p>函数正常执行后返回值大于等于 0。</p><p>PS：由于该函数比较复杂，所以只看了一部分代码，以后有时间再进一步分析。</p><p>函数的调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_find_stream_info.png" class="" title="avformat_find_stream_info"><p><code>avformat_find_stream_info()</code> 的定义位于 <code>libavformat\utils.c</code></p><p>由于<code>avformat_find_stream_info()</code> 代码比较长，难以全部分析，在这里只能简单记录一下它的要点。该函数主要用于给每个媒体流（音频&#x2F;视频）的 AVStream 结构体赋值。我们大致浏览一下这个函数的代码，会发现它其实已经实现了解码器的查找，解码器的打开，视音频帧的读取，视音频帧的解码等工作。换句话说，该函数实际上已经“走通”的解码的整个流程。下面看一下除了成员变量赋值之外，该函数的几个关键流程。</p><ul><li><p>查找解码器：<code>find_decoder()</code></p></li><li><p>打开解码器：<code>avcodec_open2()</code></p></li><li><p>读取完整的一帧压缩编码的数据：<code>read_frame_internal()</code></p><p>注：<code>av_read_frame()</code> 内部实际上就是调用的 <code>read_frame_internal()</code>。</p></li><li><p>解码一些压缩编码数据：<code>try_decode_frame()</code></p></li></ul><h2 id="3-4-av-read-frame"><a href="#3-4-av-read-frame" class="headerlink" title="3.4 av_read_frame()"></a>3.4 av_read_frame()</h2><p>ffmpeg 中的 <code>av_read_frame()</code> 的作用是读取码流中的音频若干帧或者视频一帧。例如，解码视频的时候，每解码一个视频帧，需要先调用 <code>av_read_frame()</code> 获得一帧视频的压缩数据，然后才能对该数据进行解码（例如 H.264 中一帧压缩数据通常对应一个 NAL）。</p><p>上代码之前，先参考了其他人对 <code>av_read_frame()</code> 的解释，在此做一个参考：</p><blockquote><p>通过 <code>av_read_packet()</code>，读取一个包，需要说明的是此函数必须是包含整数帧的，不存在半帧的情况，以 ts 流为例，是读取一个完整的 PES 包（一个完整 pes 包包含若干视频或音频 es 包），读取完毕后，通过 <code>av_parser_parse2()</code> 分析出视频一帧（或音频若干帧），返回，下次进入循环的时候，如果上次的数据没有完全取完，则 <code>st = s-&gt;cur_st</code> ; 不会是 NULL，即再此进入 <code>av_parser_parse2()</code> 流程，而不是下面的 <code>av_read_packet（）</code> 流程，这样就保证了，如果读取一次包含了 N 帧视频数据（以视频为例），则调用 <code>av_read_frame（）</code> N 次都不会去读数据，而是返回第一次读取的数据，直到全部解析完毕。</p></blockquote><p><code>av_read_frame()</code> 的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">av_read_frame</span><span class="params">(AVFormatContext *s, AVPacket *pkt)</span>;</span><br></pre></td></tr></table></figure><p><code>av_read_frame()</code> 使用方法在注释中写得很详细，用中文简单描述一下它的两个参数：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s：输入的AVFormatContext</span><br><span class="line">pkt：输出的AVPacket</span><br></pre></td></tr></table></figure><p>如果返回 0 则说明读取正常。</p><p>函数调用结构图如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_read_frame.png" class="" title="av_read_frame"><p><code>av_read_frame()</code> 的定义位于 <code>libavformat\utils.c</code></p><p><code>read_frame_internal()</code> 代码比较长，这里只简单看一下它前面的部分。它前面部分有 2 步是十分关键的：</p><p>（1）调用了 <code>ff_read_packet()</code> 从相应的 AVInputFormat 读取数据。</p><p>（2）如果媒体频流需要使用 AVCodecParser，则调用 <code>parse_packet()</code> 解析相应的 AVPacket。</p><p><code>ff_read_packet()</code> 中最关键的地方就是调用了 AVInputFormat 的 <code>read_packet()</code> 方法。 AVInputFormat 的 <code>read_packet()</code> 是一个函数指针，指向当前的 AVInputFormat 的读取数据的函数。在这里我们以 FLV 封装格式对应的 AVInputFormat 为例，看看 <code>read_packet()</code> 的实现函数是什么样子的。</p><p>FLV 封装格式对应的 AVInputFormat 的定义位于 <code>libavformat\flvdec.c</code></p><details><summary>代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">AVInputFormat ff_flv_demuxer = &#123;</span><br><span class="line">    .name           = <span class="string">&quot;flv&quot;</span>,</span><br><span class="line">    .long_name      = NULL_IF_CONFIG_SMALL(<span class="string">&quot;FLV (Flash Video)&quot;</span>),</span><br><span class="line">    .priv_data_size = <span class="keyword">sizeof</span>(FLVContext),</span><br><span class="line">    .read_probe     = flv_probe,</span><br><span class="line">    .read_header    = flv_read_header,</span><br><span class="line">    .read_packet    = flv_read_packet,</span><br><span class="line">    .read_seek      = flv_read_seek,</span><br><span class="line">    .read_close     = flv_read_close,</span><br><span class="line">    .extensions     = <span class="string">&quot;flv&quot;</span>,</span><br><span class="line">    .priv_class     = &amp;flv_class,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>从 <code>ff_flv_demuxer</code> 的定义可以看出，<code>read_packet()</code> 对应的是 <code>flv_read_packet()</code> 函数。在看 <code>flv_read_packet()</code> 函数之前，我们先回顾一下 FLV 封装格式的结构，如下图所示。</p><p>PS：原图是网上找的，感觉画的很清晰，比官方的 Video File Format Specification 更加通俗易懂。但是图中有一个错误，就是 TagHeader 中的 StreamID 字段的长度写错了（查看了一下官方标准，应该是 3 字节，现在已经改过来了）。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/FLV%E5%B0%81%E8%A3%85%E6%A0%BC%E5%BC%8F.png" class="" title="FLV封装格式"><p>从图中可以看出，FLV 文件体部分是由一个一个的 Tag 连接起来的（中间间隔着 Previous Tag Size）。每个 Tag 包含了 Tag Header 和 Tag Data 两个部分。</p><p>Tag Data 根据 Tag 的 Type 不同而不同：可以分为音频 Tag Data，视频 Tag Data 以及 Script Tag Data。下面简述一下音频 Tag Data 和视频 Tag Data。</p><h3 id="3-4-1-Audio-Tag-Data"><a href="#3-4-1-Audio-Tag-Data" class="headerlink" title="3.4.1 Audio Tag Data"></a>3.4.1 Audio Tag Data</h3><p>Audio Tag在官方标准中定义如下。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/AudioTag.png" class="" title="AudioTag"><p>Audio Tag 开始的第 1 个字节包含了音频数据的参数信息，从第 2 个字节开始为音频流数据。<br>第 1 个字节的前 4 位的数值表示了音频数据格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">0 = Linear PCM, platform endian</span><br><span class="line">1 = ADPCM</span><br><span class="line">2 = MP3</span><br><span class="line">3 = Linear PCM, little endian</span><br><span class="line">4 = Nellymoser 16-kHz mono</span><br><span class="line">5 = Nellymoser 8-kHz mono</span><br><span class="line">6 = Nellymoser</span><br><span class="line">7 = G.711 A-law logarithmic PCM</span><br><span class="line">8 = G.711 mu-law logarithmic PCM</span><br><span class="line">9 = reserved</span><br><span class="line">10 = AAC</span><br><span class="line">14 = MP3 8-Khz</span><br><span class="line">15 = Device-specific sound</span><br></pre></td></tr></table></figure><p>第 1 个字节的第 5-6 位的数值表示采样率：<code>0 = 5.5kHz，1 = 11KHz，2 = 22 kHz，3 = 44 kHz</code>。</p><p>第 1 个字节的第7位表示采样精度：<code>0 = 8bits，1 = 16bits</code>。</p><p>第 1 个字节的第8位表示音频类型：<code>0 = sndMono，1 = sndStereo</code>。</p><p>其中，当音频编码为 AAC 的时候，第一个字节后面存储的是 AACAUDIODATA，格式如下所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/AACAUDIODATA%E6%A0%BC%E5%BC%8F.png" class="" title="AACAUDIODATA格式"><h3 id="3-4-2-Video-Tag-Data"><a href="#3-4-2-Video-Tag-Data" class="headerlink" title="3.4.2 Video Tag Data"></a>3.4.2 Video Tag Data</h3><p>Video Tag在官方标准中的定义如下：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/VideoTag.png" class="" title="VideoTag"><p>Video Tag 也用开始的第 1 个字节包含视频数据的参数信息，从第 2 个字节为视频流数据。</p><p>第 1 个字节的前 4 位的数值表示帧类型（FrameType）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1: keyframe (for AVC, a seekableframe)（关键帧）</span><br><span class="line">2: inter frame (for AVC, a nonseekableframe)</span><br><span class="line">3: disposable inter frame (H.263only)</span><br><span class="line">4: generated keyframe (reservedfor server use only)</span><br><span class="line">5: video info/command frame</span><br></pre></td></tr></table></figure><p>第 1 个字节的后 4 位的数值表示视频编码 ID（CodecID）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1: JPEG (currently unused)</span><br><span class="line">2: Sorenson H.263</span><br><span class="line">3: Screen video</span><br><span class="line">4: On2 VP6</span><br><span class="line">5: On2 VP6 with alpha channel</span><br><span class="line">6: Screen video version 2</span><br><span class="line">7: AVC</span><br></pre></td></tr></table></figure><p>其中，当音频编码为 AVC（H.264）的时候，第一个字节后面存储的是 AVCVIDEOPACKET，格式如下所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/AVCVIDEOPACKET%E6%A0%BC%E5%BC%8F.png" class="" title="AVCVIDEOPACKET格式"><p>了解了 FLV 的基本格式之后，就可以看一下 FLV 解析 Tag 的函数 <code>flv_read_packet()了</code>。</p><p><code>flv_read_packet()</code> 的定义位于 <code>libavformat\flvdec.c</code></p><p><code>flv_read_packet()</code> 的代码比较长，但是逻辑比较简单。它的主要功能就是根据 FLV 文件格式的规范，逐层解析 Tag 以及 TagData，获取 Tag 以及 TagData 中的信息。比较关键的地方已经写上了注释，不再详细叙述。</p><p><code>parse_packet()</code> 给需要 AVCodecParser 的媒体流提供解析 AVPacket 的功能。</p><p>从代码中可以看出，最终调用了相应 AVCodecParser 的 <code>av_parser_parse2()</code> 函数，解析出来 AVPacket。此后根据解析的信息还进行了一系列的赋值工作，不再详细叙述。</p><h2 id="3-5-avcodec-decode-video2"><a href="#3-5-avcodec-decode-video2" class="headerlink" title="3.5 avcodec_decode_video2()"></a>3.5 avcodec_decode_video2()</h2><p>ffmpeg 中的 <code>avcodec_decode_video2()</code> 的作用是解码一帧视频数据。输入一个压缩编码的结构体 AVPacket，输出一个解码后的结构体 AVFrame。该函数的声明位于 <code>libavcodec\avcodec.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avcodec_decode_video2</span><span class="params">(AVCodecContext *avctx, AVFrame *picture,</span></span><br><span class="line"><span class="params">                         <span class="type">int</span> *got_picture_ptr,</span></span><br><span class="line"><span class="params">                         <span class="type">const</span> AVPacket *avpkt)</span>;</span><br></pre></td></tr></table></figure><p>查看源代码之后发现，这个函数竟然十分的简单，源代码位于 <code>libavcodec\utils.c</code></p><p>从代码中可以看出，<code>avcodec_decode_video2()</code> 主要做了以下几个方面的工作：</p><p>（1）对输入的字段进行了一系列的检查工作：例如宽高是否正确，输入是否为视频等等。</p><p>（2）通过 <code>ret = avctx-&gt;codec-&gt;decode(avctx, picture, got_picture_ptr,&amp;tmp)</code> 这句代码，调用了相应 AVCodec 的 <code>decode()</code> 函数，完成了解码操作。</p><p>（3）对得到的 AVFrame 的一些字段进行了赋值，例如宽高、像素格式等等。</p><p>其中第二部是关键的一步，它调用了 AVCodec 的 <code>decode()</code> 方法完成了解码。AVCodec 的 <code>decode()</code> 方法是一个函数指针，指向了具体解码器的解码函数。在这里我们以 H.264 解码器为例，看一下解码的实现过程。H.264 解码器对应的 AVCodec 的定义位于 <code>libavcodec\h264.c</code>，如下所示。</p><details><summary>代码：</summary><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">AVCodec ff_h264_decoder = &#123;</span><br><span class="line">    .name                  = <span class="string">&quot;h264&quot;</span>,</span><br><span class="line">    .long_name             = <span class="built_in">NULL_IF_CONFIG_SMALL</span>(<span class="string">&quot;H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10&quot;</span>),</span><br><span class="line">    .type                  = AVMEDIA_TYPE_VIDEO,</span><br><span class="line">    .id                    = AV_CODEC_ID_H264,</span><br><span class="line">    .priv_data_size        = <span class="built_in">sizeof</span>(H264Context),</span><br><span class="line">    .init                  = ff_h264_decode_init,</span><br><span class="line">    .close                 = h264_decode_end,</span><br><span class="line">    .decode                = h264_decode_frame,</span><br><span class="line">    .capabilities          = <span class="comment">/*CODEC_CAP_DRAW_HORIZ_BAND |*/</span> CODEC_CAP_DR1 |</span><br><span class="line">                             CODEC_CAP_DELAY | CODEC_CAP_SLICE_THREADS |</span><br><span class="line">                             CODEC_CAP_FRAME_THREADS,</span><br><span class="line">    .flush                 = flush_dpb,</span><br><span class="line">    .init_thread_copy      = <span class="built_in">ONLY_IF_THREADS_ENABLED</span>(decode_init_thread_copy),</span><br><span class="line">    .update_thread_context = <span class="built_in">ONLY_IF_THREADS_ENABLED</span>(ff_h264_update_thread_context),</span><br><span class="line">    .profiles              = <span class="built_in">NULL_IF_CONFIG_SMALL</span>(profiles),</span><br><span class="line">    .priv_class            = &amp;h264_class,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><p>从 <code>ff_h264_decoder</code> 的定义可以看出，<code>decode()</code> 指向了 <code>h264_decode_frame()</code> 函数。</p><p>从 <code>h264_decode_frame()</code> 的定义可以看出，它调用了 <code>decode_nal_units()</code> 完成了具体的 H.264 解码工作。</p><h2 id="3-6-avformat-close-input"><a href="#3-6-avformat-close-input" class="headerlink" title="3.6 avformat_close_input()"></a>3.6 avformat_close_input()</h2><p>该函数用于关闭一个 AVFormatContext，一般情况下是和 <code>avformat_open_input()</code> 成对使用的。</p><p>函数的调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_close_input.png" class="" title="avformat_close_input"><p><code>avformat_close_input()</code> 的源代码位于 <code>libavformat\utils.c</code></p><p>从源代码中可以看出，<code>avformat_close_input()</code> 主要做了以下几步工作：</p><p>（1）调用 AVInputFormat 的 <code>read_close()</code> 方法关闭输入流</p><p>（2）调用 <code>avformat_free_context()</code> 释放 AVFormatContext</p><p>（3）调用 <code>avio_close()</code> 关闭并且释放 AVIOContext</p><h1 id="4-编码"><a href="#4-编码" class="headerlink" title="4. 编码"></a>4. 编码</h1><h2 id="4-1-avformat-alloc-output-context2"><a href="#4-1-avformat-alloc-output-context2" class="headerlink" title="4.1 avformat_alloc_output_context2()"></a>4.1 avformat_alloc_output_context2()</h2><p>在基于 FFmpeg 的视音频编码器程序中，该函数通常是第一个调用的函数（除了组件注册函数 <code>av_register_all()</code>）。</p><p><code>avformat_alloc_output_context2()</code> 函数可以初始化一个用于输出的 AVFormatContext 结构体。它的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avformat_alloc_output_context2</span><span class="params">(AVFormatContext **ctx, AVOutputFormat *oformat,</span></span><br><span class="line"><span class="params">                                   <span class="type">const</span> <span class="type">char</span> *format_name, <span class="type">const</span> <span class="type">char</span> *filename)</span>;</span><br></pre></td></tr></table></figure><p>代码中的英文注释写的已经比较详细了，在这里拿中文简单叙述一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ctx：函数调用成功之后创建的AVFormatContext结构体。</span><br><span class="line">oformat：指定AVFormatContext中的AVOutputFormat，用于确定输出格式。如果指定为NULL，可以设定后两个参数（format_name或者filename）由FFmpeg猜测输出格式。</span><br><span class="line">PS：使用该参数需要自己手动获取AVOutputFormat，相对于使用后两个参数来说要麻烦一些。</span><br><span class="line">format_name：指定输出格式的名称。根据格式名称，FFmpeg会推测输出格式。输出格式可以是“flv”，“mkv”等等。</span><br><span class="line">filename：指定输出文件的名称。根据文件名称，FFmpeg会推测输出格式。文件名称可以是“xx.flv”，“yy.mkv”等等。</span><br></pre></td></tr></table></figure><p>函数执行成功的话，其返回值大于等于0。</p><p>首先贴出来最终分析得出的函数调用结构图，如下所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_alloc_output_context2.png" class="" title="avformat_alloc_output_context2"><p><code>avformat_alloc_output_context2()</code> 的函数定义位于 <code>libavformat\mux.c</code></p><p>从代码中可以看出，<code>avformat_alloc_output_context2()</code> 的流程如要包含以下 2 步：</p><ol><li><p>   调用 <code>avformat_alloc_context()</code> 初始化一个默认的 AVFormatContext。</p></li><li><p>   如果指定了输入的 AVOutputFormat，则直接将输入的 AVOutputFormat 赋值给AVOutputFormat 的 oformat。如果没有指定输入的 AVOutputFormat，就需要根据文件格式名称或者文件名推测输出的 AVOutputFormat。无论是通过文件格式名称还是文件名推测输出格式，都会调用一个函数 <code>av_guess_format()</code>。</p></li></ol><p><code>avformat_alloc_context()</code> 首先调用 <code>av_malloc()</code> 为 AVFormatContext 分配一块内存。然后调用了一个函数 <code>avformat_get_context_defaults()</code> 用于给 AVFormatContext 设置默认值</p><p><code>avformat_alloc_context()</code> 首先调用 <code>memset()</code> 将 AVFormatContext 的内存置零；然后指定它的AVClass（指定了 AVClass 之后，该结构体就支持和 AVOption 相关的功能）；最后调用 <code>av_opt_set_defaults()</code> 给 AVFormatContext 的成员变量设置默认值（<code>av_opt_set_defaults()</code> 就是和 AVOption 有关的一个函数，专门用于给指定的结构体设定默认值，此处暂不分析）。</p><p><code>av_guess_format()</code> 中使用一个整型变量 score 记录每种输出格式的匹配程度。函数中包含了一个 <code>while()</code> 循环，该循环利用函数 <code>av_oformat_next()</code> 遍历 FFmpeg 中所有的 AVOutputFormat，并逐一计算每个输出格式的 score。具体的计算过程分成如下几步：</p><ol><li><p>   如果封装格式名称匹配，score 增加 100。匹配中使用了函数 <code>av_match_name()</code>。</p></li><li><p>   如果 mime 类型匹配，score 增加 10。匹配直接使用字符串比较函数 <code>strcmp()</code>。</p></li><li><p>   如果文件名称的后缀匹配，score 增加 5。匹配中使用了函数 <code>av_match_ext()</code>。</p></li></ol><p><code>while()</code> 循环结束后，得到得分最高的格式，就是最匹配的格式。</p><p>下面看一下一个 AVOutputFormat 的实例，就可以理解 “封装格式名称”，“mine类型”，“文件名称后缀” 这些概念了。下面是 flv 格式的视音频复用器（Muxer）对应的 AVOutputFormat 格式的变量 <code>ff_flv_muxer</code>。</p><details><summary>代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">AVOutputFormat ff_flv_muxer = &#123;</span><br><span class="line">    .name           = <span class="string">&quot;flv&quot;</span>,</span><br><span class="line">    .long_name      = NULL_IF_CONFIG_SMALL(<span class="string">&quot;FLV (Flash Video)&quot;</span>),</span><br><span class="line">    .mime_type      = <span class="string">&quot;video/x-flv&quot;</span>,</span><br><span class="line">    .extensions     = <span class="string">&quot;flv&quot;</span>,</span><br><span class="line">    .priv_data_size = <span class="keyword">sizeof</span>(FLVContext),</span><br><span class="line">    .audio_codec    = CONFIG_LIBMP3LAME ? AV_CODEC_ID_MP3 : AV_CODEC_ID_ADPCM_SWF,</span><br><span class="line">    .video_codec    = AV_CODEC_ID_FLV1,</span><br><span class="line">    .write_header   = flv_write_header,</span><br><span class="line">    .write_packet   = flv_write_packet,</span><br><span class="line">    .write_trailer  = flv_write_trailer,</span><br><span class="line">    .codec_tag      = (<span class="type">const</span> AVCodecTag* <span class="type">const</span> []) &#123;</span><br><span class="line">                          flv_video_codec_ids, flv_audio_codec_ids, <span class="number">0</span></span><br><span class="line">                      &#125;,</span><br><span class="line">    .flags          = AVFMT_GLOBALHEADER | AVFMT_VARIABLE_FPS |</span><br><span class="line">                      AVFMT_TS_NONSTRICT,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></details><h2 id="4-2-avformat-write-header"><a href="#4-2-avformat-write-header" class="headerlink" title="4.2 avformat_write_header()"></a>4.2 avformat_write_header()</h2><p>FFmpeg 的写文件用到的 3 个函数：</p><ul><li><strong><code>avformat_write_header()</code></strong></li><li><strong><code>av_write_frame()</code></strong></li><li><strong><code>av_write_trailer()</code></strong></li></ul><p>其中 <code>av_write_frame()</code> 用于写视频数据，<code>avformat_write_header()</code> 用于写视频文件头，而 <code>av_write_trailer()</code> 用于写视频文件尾。</p><p>本文首先分析<code>avformat_write_header()</code>。</p><p>PS：需要注意的是，尽管这 3 个函数功能是配套的，但是它们的前缀却不一样，写文件头 Header 的函数前缀是“<code>avformat_</code>”，其他两个函数前缀是“<code>av_</code>”（不太明白其中的原因）。</p><p><code>avformat_write_header()</code> 的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avformat_write_header</span><span class="params">(AVFormatContext *s, AVDictionary **options)</span>;</span><br></pre></td></tr></table></figure><p>简单解释一下它的参数的含义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s：用于输出的AVFormatContext。</span><br><span class="line">options：额外的选项，目前没有深入研究过，一般为NULL。</span><br></pre></td></tr></table></figure><p>函数正常执行后返回值等于 0。</p><p><code>avformat_write_header()</code> 的调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avformat_write_header.png" class="" title="avformat_write_header"><p><code>avformat_write_header()</code> 的定义位于 <code>libavformat\mux.c</code></p><p>从源代码可以看出，<code>avformat_write_header()</code> 完成了以下工作：</p><p>（1）调用 <code>init_muxer()</code> 初始化复用器</p><p>（2）调用 AVOutputFormat 的 <code>write_header()</code></p><p><code>init_muxer()</code> 代码很长，但是它所做的工作比较简单，可以概括成两个字：检查。函数的流程可以概括成以下几步：</p><p>（1）将传入的 AVDictionary 形式的选项设置到 AVFormatContext</p><p>（2）遍历 AVFormatContext 中的每个 AVStream，并作如下检查：</p><ul><li><p>a) AVStream 的 time_base 是否正确设置。如果发现 AVStream 的 time_base 没有设置，则会调用 <code>avpriv_set_pts_info()</code> 进行设置。</p></li><li><p>b) 对于音频，检查采样率设置是否正确；对于视频，检查宽、高、宽高比。</p></li><li><p>c) 其他一些检查，不再详述。</p></li></ul><p><strong>AVOutputFormat-&gt;write_header()</strong></p><p><code>avformat_write_header()</code> 中最关键的地方就是调用了 AVOutputFormat 的 <code>write_header()</code>。</p><p><code>write_header()</code> 是 AVOutputFormat 中的一个函数指针，指向写文件头的函数。不同的AVOutputFormat 有不同的 <code>write_header()</code> 的实现方法。在这里我们举例子看一下 FLV 封装格式对应的 AVOutputFormat，它的定义位于 <code>libavformat\flvenc.c</code></p><p>从 <code>ff_flv_muxer</code> 的定义中可以看出，<code>write_header()</code> 指向的函数为 <code>flv_write_header()</code>。我们继续看一下 <code>flv_write_header()</code> 函数。<code>flv_write_header()</code> 的定义同样位于 <code>libavformat\flvenc.c</code></p><p>从源代码可以看出，<code>flv_write_header()</code> 完成了FLV文件头的写入工作。该函数的工作可以大体分为以下两部分：</p><p>（1）给 FLVContext 设置参数</p><p>（2）写文件头，以及相关的 Tag</p><p>可以参考下图中 FLV 文件头的定义比对一下上面的代码。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/FLVHeader.png" class="" title="FLVHeader"><h2 id="4-3-avcodec-encode-video"><a href="#4-3-avcodec-encode-video" class="headerlink" title="4.3 avcodec_encode_video()"></a>4.3 avcodec_encode_video()</h2><p>该函数用于编码一帧视频数据。<code>avcodec_encode_video2()</code> 函数的声明位于 <code>libavcodec\avcodec.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avcodec_encode_video2</span><span class="params">(AVCodecContext *avctx, AVPacket *avpkt,</span></span><br><span class="line"><span class="params">                          <span class="type">const</span> AVFrame *frame, <span class="type">int</span> *got_packet_ptr)</span>;</span><br></pre></td></tr></table></figure><p>该函数每个参数的含义在注释里面已经写的很清楚了，在这里用中文简述一下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">avctx：编码器的AVCodecContext。</span><br><span class="line">avpkt：编码输出的AVPacket。</span><br><span class="line">frame：编码输入的AVFrame。</span><br><span class="line">got_packet_ptr：成功编码一个AVPacket的时候设置为1。</span><br></pre></td></tr></table></figure><p>函数返回0代表编码成功。</p><p>函数的调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/avcodec_encode_video.png" class="" title="avcodec_encode_video"><p><code>avcodec_encode_video2()</code> 的定义位于 <code>libavcodec\utils.c</code></p><p>从函数的定义可以看出，<code>avcodec_encode_video2()</code> 首先调用了 <code>av_image_check_size()</code> 检查设置的宽高参数是否合理，然后调用了 AVCodec 的 <code>encode2()</code> 调用具体的解码器。</p><p><code>av_image_check_size()</code> 主要是要求图像宽高必须为正数，而且取值不能太大。</p><p>AVCodec 的 <code>encode2()</code> 是一个函数指针，指向特定编码器的编码函数</p><p>从 <code>ff_libx264_encoder</code> 的定义可以看出，<code>encode2()</code> 函数指向的是 <code>X264_frame()</code> 函数。</p><p><code>X264_frame()</code> 函数的定义位于 <code>libavcodec\libx264.c</code></p><h2 id="4-4-av-write-frame"><a href="#4-4-av-write-frame" class="headerlink" title="4.4 av_write_frame()"></a>4.4 av_write_frame()</h2><p><code>av_write_frame()</code> 用于输出一帧视音频数据，它的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">av_write_frame</span><span class="params">(AVFormatContext *s, AVPacket *pkt)</span>;</span><br></pre></td></tr></table></figure><p>简单解释一下它的参数的含义：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">s：用于输出的AVFormatContext。</span><br><span class="line">pkt：等待输出的AVPacket。</span><br></pre></td></tr></table></figure><p>函数正常执行后返回值等于 0。</p><p><code>av_write_frame()</code> 的调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_write_frame.png" class="" title="av_write_frame"><p><code>av_write_frame()</code> 的定义位于 <code>libavformat\mux.c</code></p><p>从源代码可以看出，<code>av_write_frame()</code> 主要完成了以下几步工作：</p><p>（1）调用 <code>check_packet()</code> 做一些简单的检测</p><p>（2）调用 <code>compute_pkt_fields2()</code> 设置 AVPacket 的一些属性值</p><p>（3）调用 <code>write_packet()</code> 写入数据</p><p><code>check_packet()</code> 的功能比较简单：首先检查一下输入的 AVPacket 是否为空，如果为空，则是直接返回；然后检查一下 AVPacket 的 <code>stream_index</code>（标记了该 AVPacket 所属的 AVStream）设置是否正常，如果为负数或者大于 AVStream 的个数，则返回错误信息；最后检查 AVPacket 所属的 AVStream 是否属于 attachment stream，这个地方没见过，目前还没有研究。</p><p><code>compute_pkt_fields2()</code> 函数的定义位于 <code>libavformat\mux.c</code></p><p><code>compute_pkt_fields2()</code> 主要有两方面的功能：</p><ul><li>一方面用于计算 AVPacket 的 duration， dts 等信息；</li><li>另一方面用于检查 pts、dts 这些参数的合理性（例如 PTS 是否一定大于 DTS）。具体的代码还没有细看，以后有时间再进行分析。</li></ul><p><code>write_packet()</code> 函数的定义位于 <code>libavformat\mux.c</code></p><p><code>write_packet()</code> 函数最关键的地方就是调用了 AVOutputFormat 中写入数据的方法。如果 AVPacket 中的 flag 标记中包含 AV_PKT_FLAG_UNCODED_FRAME，就会调用 AVOutputFormat 的 <code>write_uncoded_frame()</code> 函数；如果不包含那个标记，就会调用 <code>write_packet()</code> 函数。 <code>write_packet()</code> 实际上是一个函数指针，指向特定的 AVOutputFormat 中的实现函数。例如，我们看一下 FLV 对应的 AVOutputFormat，位于 <code>libavformat\flvenc.c</code></p><p>从 <code>ff_flv_muxer</code> 的定义可以看出，<code>write_packet()</code> 指向的是 <code>flv_write_packet()</code> 函数。在看 <code>flv_write_packet()</code> 函数的定义之前，先回顾一下 FLV 封装格式的结构。</p><h2 id="4-5-av-write-trailer"><a href="#4-5-av-write-trailer" class="headerlink" title="4.5 av_write_trailer()"></a>4.5 av_write_trailer()</h2><p><code>av_write_trailer()</code> 用于输出文件尾，它的声明位于 <code>libavformat\avformat.h</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">av_write_trailer</span><span class="params">(AVFormatContext *s)</span>;</span><br></pre></td></tr></table></figure><p>它只需要指定一个参数，即用于输出的 AVFormatContext。</p><p>函数正常执行后返回值等于 0。</p><p><code>av_write_trailer()</code> 的调用关系如下图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_write_trailer.png" class="" title="av_write_trailer"><p><code>av_write_trailer()</code> 的定义位于 <code>libavformat\mux.c</code></p><p>从源代码可以看出 <code>av_write_trailer()</code> 主要完成了以下两步工作：</p><p>（1）循环调用 <code>interleave_packet()</code> 以及 <code>write_packet()</code>，将还未输出的 AVPacket 输出出来。</p><p>（2）调用 AVOutputFormat 的 <code>write_trailer()</code>，输出文件尾。</p><p>其中第一步和 <code>av_write_frame()</code> 中的步骤大致是一样的（<code>interleave_packet()</code> 这一部分在并不包含在 <code>av_write_frame()</code> 中，而是包含在 <code>av_interleaved_write_frame()</code> 中，这一部分源代码还没有分析）</p><p>AVOutputFormat 的 <code>write_trailer()</code> 是一个函数指针，指向特定的 AVOutputFormat 中的实现函数。我们以 FLV 对应的 AVOutputFormat 为例，看一下它的定义</p><p>从 FLV 对应的 AVOutputFormat 结构体的定义我们可以看出，<code>write_trailer()</code> 指向了<code>flv_write_trailer()</code> 函数。</p><p><code>flv_write_trailer()</code> 函数的定义位于 <code>libavformat\flvenc.c</code></p><p>从 <code>flv_write_trailer()</code> 的源代码可以看出该函数做了以下两步工作：</p><p>（1）如果视频流是 H.264，则添加包含 EOS（End Of Stream） NALU 的 Tag。</p><p>（2）更新 FLV 的时长信息，以及文件大小信息。</p><p>其中，<code>put_avc_eos_tag()</code> 函数用于添加包含 EOS NALU 的 Tag（包含结尾的一个PreviousTagSize）</p><p>可以参考 FLV 封装格式理解上述函数。由于前面的文章中已经描述过 FLV 封装格式，在这里不再重复叙述，在这里仅在此记录一下 AVCVIDEOPACKET 的格式，如下所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/AVCVIDEOPACKET%E6%A0%BC%E5%BC%8F.png" class="" title="AVCVIDEOPACKET格式"><p>可以看出包含 EOS NALU 的 AVCVIDEOPACKET 的 AVCPacketType 为 2。在这种情况下， AVCVIDEOPACKET 的 CompositionTime 字段取 0，并且无需包含 Data 字段。</p><h1 id="5-日志输出系统"><a href="#5-日志输出系统" class="headerlink" title="5. 日志输出系统"></a>5. 日志输出系统</h1><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44243155">日志输出系统</a></p></blockquote><h2 id="5-1-av-log"><a href="#5-1-av-log" class="headerlink" title="5.1 av_log()"></a>5.1 av_log()</h2><p>本文分析一下 FFmpeg 的日志（Log）输出系统的源代码。日志输出部分的核心函数只有一个： <code>av_log()</code>。使用 <code>av_log()</code> 在控制台输出日志的效果如下图所示。</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_log%E6%8E%A7%E5%88%B6%E5%8F%B0%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA.png" class="" title="av_log控制台日志输出"><p>FFmpeg 日志输出系统的函数调用结构图如图所示：</p><img data-src="/2019/05/27/FFmpeg/FFmpeg%E6%A1%86%E6%9E%B6%E5%87%BD%E6%95%B0%E5%88%86%E6%9E%90/av_log.png" class="" title="av_log"><p><code>av_log()</code> 是 FFmpeg 中输出日志的函数。随便打开一个 FFmpeg 的源代码文件，就会发现其中遍布着 <code>av_log()</code> 函数。一般情况下 FFmpeg 类库的源代码中是不允许使用 <code>printf()</code> 这种的函数的，所有的输出一律使用 <code>av_log()</code>。</p><p>av_log()的声明位于libavutil\log.h</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_log</span><span class="params">(<span class="type">void</span> *avcl, <span class="type">int</span> level, <span class="type">const</span> <span class="type">char</span> *fmt, ...)</span> <span class="title function_">av_printf_format</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span>;</span><br></pre></td></tr></table></figure><p>这个函数的声明有两个地方比较特殊：</p><p>（1）函数最后一个参数是 “…”。</p><p>在 C 语言中，在函数参数数量不确定的情况下使用 “…” 来代表参数。例如 <code>printf()</code> 的原型定义如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">printf</span> <span class="params">(<span class="type">const</span> <span class="type">char</span>*, ...)</span>;</span><br></pre></td></tr></table></figure><p>（2）它的声明后面有一个 <code>av_printf_format(3, 4)</code>。有关这个地方的左右还没有深入研究，网上资料中说它的作用是按照 <code>printf()</code> 的格式检查 <code>av_log()</code> 的格式。</p><p>av_log()每个字段的含义如下：</p><ul><li>avcl：指定一个包含 AVClass 的结构体。</li><li>level：log 的级别</li><li>fmt：和 <code>printf()</code> 一样。</li></ul><p>由此可见，<code>av_log()</code> 和 <code>printf()</code> 的不同主要在于前面多了两个参数。其中第一个参数指定该 log 所属的结构体，例如 AVFormatContext、AVCodecContext 等等。第二个参数指定 log 的级别，源代码中定义了如下几个级别。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_QUIET    -8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_PANIC     0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_FATAL     8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_ERROR    16</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_WARNING  24</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_INFO     32</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_VERBOSE  40</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AV_LOG_DEBUG    48</span></span><br></pre></td></tr></table></figure><p>从定义中可以看出来，随着严重程度逐渐下降，一共包含如下级别：</p><ul><li>AV_LOG_PANIC，</li><li>AV_LOG_FATAL，</li><li>AV_LOG_ERROR，</li><li>AV_LOG_WARNING，</li><li>AV_LOG_INFO，</li><li>AV_LOG_VERBOSE，</li><li>AV_LOG_DEBUG。</li></ul><p>每个级别定义的数值代表了严重程度，数值越小代表越严重。默认的级别是 AV_LOG_INFO。此外，还有一个级别不输出任何信息，即 AV_LOG_QUIET。</p><p>当前系统存在着一个 “Log级别”。所有严重程度高于该级别的 Log 信息都会输出出来。例如当前的 Log 级别是 AV_LOG_WARNING，则会输出 AV_LOG_PANIC，AV_LOG_FATAL，AV_LOG_ERROR，AV_LOG_WARNING 级别的信息，而不会输出 AV_LOG_INFO 级别的信息。可以通过 <code>av_log_get_level()</code> 获得当前 Log 的级别，通过另一个函数 <code>av_log_set_level()</code> 设置当前的 Log 级别。</p><p>可以通过 <code>av_log_set_level()</code> 设置当前 Log 的级别。</p><h1 id="6-接头体成员管理系统"><a href="#6-接头体成员管理系统" class="headerlink" title="6. 接头体成员管理系统"></a>6. 接头体成员管理系统</h1><h2 id="6-1-AVClass"><a href="#6-1-AVClass" class="headerlink" title="6.1 AVClass"></a>6.1 AVClass</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44268323">FFmpeg源代码简单分析：结构体成员管理系统-AVClass</a></p></blockquote><p>TODO</p><h2 id="6-2-AVOption"><a href="#6-2-AVOption" class="headerlink" title="6.2 AVOption"></a>6.2 AVOption</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44279329">FFmpeg源代码简单分析：结构体成员管理系统-AVOption</a></p></blockquote><p>TODO</p><h1 id="7-libswscale"><a href="#7-libswscale" class="headerlink" title="7. libswscale"></a>7. libswscale</h1><h2 id="7-1-sws-getContext"><a href="#7-1-sws-getContext" class="headerlink" title="7.1 sws_getContext()"></a>7.1 sws_getContext()</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44305697">FFmpeg源代码简单分析：libswscale的sws_getContext()</a></p></blockquote><p>TODO</p><h2 id="7-2-sws-scale"><a href="#7-2-sws-scale" class="headerlink" title="7.2 sws_scale()"></a>7.2 sws_scale()</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44346687">FFmpeg源代码简单分析：libswscale的sws_scale()</a></p></blockquote><p>TODO</p><h1 id="8-libavdevice"><a href="#8-libavdevice" class="headerlink" title="8. libavdevice"></a>8. libavdevice</h1><h2 id="8-1-avdevice-register-all"><a href="#8-1-avdevice-register-all" class="headerlink" title="8.1 avdevice_register_all()"></a>8.1 avdevice_register_all()</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/41211121">FFmpeg源代码简单分析：libavdevice的avdevice_register_all()</a></p></blockquote><h2 id="8-2-gdigrab"><a href="#8-2-gdigrab" class="headerlink" title="8.2 gdigrab"></a>8.2 gdigrab</h2><blockquote><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/44597955">FFmpeg源代码简单分析：libavdevice的gdigrab</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/leixiaohua1020/article/details/84499632&quot;&gt;[总结]FFMPEG视音频编解码零基础学习方法&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-架构图&quot;&gt;&lt;a href=&quot;#1-架构图&quot; class=&quot;headerlink&quot; title=&quot;1. 架构图&quot;&gt;&lt;/a&gt;1. 架构图&lt;/h1&gt;&lt;h2 id=&quot;1-1-FFMPEG-SDL的视频播放器&quot;&gt;&lt;a href=&quot;#1-1-FFMPEG-SDL的视频播放器&quot; class=&quot;headerlink&quot; title=&quot;1.1 FFMPEG+SDL的视频播放器&quot;&gt;&lt;/a&gt;1.1 FFMPEG+SDL的视频播放器&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/leixiaohua1020/article/details/38868499&quot;&gt;最简单的基于FFMPEG+SDL的视频播放器 ver2 （采用SDL2.0）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;FFmpeg 解码一个视频流程：&lt;/strong&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg 源代码结构（编解码解析）</title>
    <link href="http://miaopei.github.io/2019/05/25/FFmpeg/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84note/"/>
    <id>http://miaopei.github.io/2019/05/25/FFmpeg/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84note/</id>
    <published>2019-05-25T02:14:50.000Z</published>
    <updated>2024-06-13T09:55:58.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>特别说明，此文参考至<a href="https://blog.csdn.net/leixiaohua1020/article/details/44220151">雷神笔记</a>，做一个备忘录。</p></blockquote><h2 id="1-FFmpeg源代码结构图-解码"><a href="#1-FFmpeg源代码结构图-解码" class="headerlink" title="1. FFmpeg源代码结构图 - 解码"></a>1. FFmpeg源代码结构图 - 解码</h2><p>下图表明了 FFmpeg 在解码一个视频的时候的函数调用流程。为了保证结构清晰，其中仅列出了最关键的函数，剔除了其它不是特别重要的函数。</p><span id="more"></span><img data-src="/2019/05/25/FFmpeg/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84note/FFmpeg%E6%BA%90%E7%A0%81API%E7%BB%93%E6%9E%84%E5%9B%BE-%E8%A7%A3%E7%A0%81.png" class="" title="FFmpeg源码API结构图-解码"><p>下面解释一下图中关键标记的含义。</p><h3 id="1-1-函数背景色"><a href="#1-1-函数背景色" class="headerlink" title="1.1 函数背景色"></a>1.1 函数背景色</h3><p>函数在图中以方框的形式表现出来。不同的背景色标志了该函数不同的作用：</p><ul><li>粉红色背景函数：FFmpeg 的 API函数。</li><li>白色背景的函数：FFmpeg 的内部函数。</li><li>黄色背景的函数：URLProtocol 结构体中的函数，包含处理协议（Protocol）的功能。</li><li>绿色背景的函数：AVInputFormat 结构体中的函数，包含处理封装格式（Format）的功能。</li><li>蓝色背景的函数：AVCodec 结构体中的函数，包含了编解码器（Codec）的功能。</li></ul><blockquote><p>PS：URLProtocol，AVInputFormat，AVCodec在FFmpeg开始运行并且注册完组件之后，都会分别被连接成一个个的链表。因此实际上是有很多的URLProtocol，AVInputFormat，AVCodec的。图中画出了解码一个输入协议是“文件”（其实就是打开一个文件。“文件”也被当做是一种广义的协议），封装格式为FLV，视频编码格式是H.264的数据的函数调用关系。</p></blockquote><h3 id="1-2-区域"><a href="#1-2-区域" class="headerlink" title="1.2 区域"></a>1.2 区域</h3><p>整个架构图可以分为以下几个区域：</p><ul><li><strong>左边区域——架构函数区域</strong>：这些函数并不针对某一特定的视频格式。</li><li><strong>右上方黄色区域——协议处理函数区域</strong>：不同的协议（RTP，RTMP，FILE）会调用不同的协议处理函数。</li><li><strong>右边中间绿色区域——封装格式处理函数区域</strong>：不同的封装格式（MKV，FLV，MPEGTS，AVI）会调用不同的封装格式处理函数。</li><li><strong>右边下方蓝色区域——编解码函数区域</strong>：不同的编码标准（HEVC，H.264，MPEG2）会调用不同的编解码函数。</li></ul><h3 id="1-3-箭头线"><a href="#1-3-箭头线" class="headerlink" title="1.3 箭头线"></a>1.3 箭头线</h3><p>为了把调用关系表示的更明显，图中的箭头线也使用了不同的颜色：</p><ul><li><p>黑色箭头线：标志了函数之间的调用关系。</p></li><li><p>红色的箭头线：标志了解码的流程。</p></li><li><p>其他颜色的箭头线：标志了函数之间的调用关系。其中：</p><ul><li>调用 URLProtocol 结构体中的函数用<strong>黄色箭头线</strong>标识；</li><li>调用 AVInputFormat 结构体中的函数用<strong>绿色箭头线</strong>标识；</li><li>调用 AVCodec 结构体中的函数用<strong>蓝色箭头线</strong>标识。</li></ul></li></ul><h3 id="1-4-函数所在的文件"><a href="#1-4-函数所在的文件" class="headerlink" title="1.4 函数所在的文件"></a>1.4 函数所在的文件</h3><p>每个函数旁边标识了它所在的文件的路径。</p><p>此外，还有一点需要注意的是，一些 API 函数内部也调用了另一些API函数。也就是说，API函数并不一定全部都调用FFmpeg的内部函数，他也有可能调用其他的API函数。例如从图中可以看出来， <code>avformat_close_input()</code> 调用了 <code>avformat_free_context()</code> 和 <code>avio_close()</code>。这些在内部代码中被调用的API函数也标记为粉红色。</p><h3 id="1-5-函数调用关系"><a href="#1-5-函数调用关系" class="headerlink" title="1.5 函数调用关系"></a>1.5 函数调用关系</h3><p>下面简单列出几个区域中函数之间的调用关系（函数之间的调用关系使用缩进的方式表现出来）。详细的函数分析可以参考相关的《FFmpeg源代码分析》系列文章。</p><h4 id="1-5-1-左边区域（FFmpeg架构函数）"><a href="#1-5-1-左边区域（FFmpeg架构函数）" class="headerlink" title="1.5.1 左边区域（FFmpeg架构函数）"></a>1.5.1 左边区域（FFmpeg架构函数）</h4><p><strong><font color=red>1.  av_register_all()【函数简单分析】</font>&gt;</strong></p><ul><li><strong><font color=red>1)  avcodec_register_all()</font></strong><ul><li><strong>(a) REGISTER_HWACCEL()</strong></li><li><strong>(b) REGISTER_ENCODER()</strong></li><li><strong>(c) REGISTER_DECODER()</strong></li><li><strong>(d) REGISTER_PARSER()</strong></li><li><strong>(e) REGISTER_BSF()</strong></li></ul></li><li><strong>2)  REGISTER_MUXER()</strong></li><li><strong>3)  REGISTER_DEMUXER()</strong></li><li><strong>4)  REGISTER_PROTOCOL()</strong></li></ul><p><strong><font color=red>2.  avformat_alloc_context()【函数简单分析】</font></strong></p><ul><li><p><strong>1) av_malloc(sizeof(AVFormatContext))</strong></p></li><li><p><strong>2) avformat_get_context_defaults()</strong></p><ul><li><strong>(a) av_opt_set_defaults()</strong></li></ul></li></ul><p><strong><font color=red>3.  avformat_open_input()【函数简单分析】</font></strong></p><ul><li><strong>1) init_input()</strong><ul><li><strong><font color=red>(a) avio_open2()【函数简单分析】</font></strong><ul><li><strong>a) ffurl_open()</strong><ul><li><strong>i. ffurl_alloc()</strong><ul><li><strong>url_find_protocol()</strong></li><li><strong>url_alloc_for_protocol()</strong></li></ul></li><li><strong>ii. ffurl_connect()</strong><ul><li><strong><font color=#FFC000>URLProtocol-&gt;url_open()</font></strong></li></ul></li></ul></li><li><strong>b) ffio_fdopen()</strong><ul><li><strong>i. av_malloc(buffer_size)</strong></li><li><strong>ii. <font color=red>avio_alloc_context()</font></strong><ul><li><strong>av_mallocz(sizeof(AVIOContext))</strong></li><li><strong>ffio_init_context()</strong></li></ul></li></ul></li></ul></li><li><strong><font color=red>(b) av_probe_input_buffer2()</font></strong><ul><li><strong><font color=red>a) avio_read()</font></strong><ul><li><strong>i.  <font color=#009900>AVInputFormat-&gt;read_packet()</font></strong></li></ul></li><li><strong><font color=red>b) av_probe_input_format2()</font></strong></li><li><strong><font color=red>c) av_probe_input_format3()</font></strong><ul><li><strong>i. <font color=red>av_iformat_next()</font></strong></li><li><strong>ii. <font color=red>av_match_name()</font></strong></li><li><strong>iii. <font color=red>av_match_ext()</font></strong></li><li><strong>iv. <font color=#009900>AVInputFormat-&gt;read_probe()</font></strong></li></ul></li></ul></li></ul></li><li><strong>2) <font color=#009900>AVInputFormat-&gt;read_header()</font></strong></li></ul><p><strong><font color=red>4. avformat_find_stream_info()【函数简单分析】</font></strong></p><ul><li><strong>1) find_decoder()</strong><ul><li><strong><font color=red>(a) avcodec_find_decoder()</font></strong></li></ul></li><li><strong><font color=red>2) avcodec_open2()</font></strong></li><li><strong>3) read_frame_internal()</strong></li><li><strong>4) try_decode_frame()</strong><ul><li><strong><font color=red>(a) avcodec_decode_video2()</font></strong></li></ul></li><li><strong><font color=red>5) avcodec_close()</font></strong></li><li><strong>6) estimate_timings()</strong><ul><li><strong>(a)  estimate_timings_from_pts()</strong></li><li><strong>(b)  estimate_timings_from_bit_rate()</strong></li><li><strong>(c)  update_stream_timings()</strong></li></ul></li></ul><p><strong><font color=red>5. avcodec_find_decoder()【函数简单分析】</font></strong></p><ul><li><strong>1) find_encdec()</strong></li></ul><p><strong><font color=red>6. avcodec_open2()【函数简单分析】</font></strong></p><ul><li><strong><font color=#3072C2>1) AVCodec-&gt;init()</font></strong></li></ul><p><strong><font color=red>7. av_read_frame()【函数简单分析】</font></strong></p><ul><li><p><strong>1) read_from_packet_buffer()</strong></p></li><li><p><strong>2) read_frame_internal()</strong></p><ul><li><strong>(a) ff_read_packet()</strong><ul><li><strong><font color=#009900>a) AVInputFormat-&gt;read_packet()</font></strong></li></ul></li><li><strong>(b) parse_packet()</strong><ul><li><strong>a) av_parser_parse2()</strong></li></ul></li></ul></li></ul><p><strong><font color=red>8. avcodec_decode_video2()【函数简单分析】</font></strong></p><ul><li><p><strong>1) av_packet_split_side_data()</strong></p></li><li><p><strong>2) <font color=#3072C2>AVCodec</font>-&gt; <font color=red>decode()</font></strong></p></li><li><p><strong>3) av_frame_set_pkt_pos()</strong></p></li><li><p><strong>4) av_frame_set_best_effort_timestamp()</strong></p></li></ul><p><strong><font color=red>9. avcodec_close()【函数简单分析】</font></strong></p><ul><li><strong><font color=#3072C2>1) AVCodec-&gt;close()</font></strong></li></ul><p><strong><font color=red>10. avformat_close_input()【函数简单分析】</font></strong></p><ul><li><p><strong><font color=#009900>1) AVInputFormat-&gt;read_close()</font></strong></p></li><li><p><strong>2) avformat_free_context()</strong></p><ul><li><strong>(a) ff_free_stream()</strong></li></ul></li><li><p><strong>3) avio_close()</strong></p><ul><li><strong>(a) avio_flush()</strong><ul><li><strong>a) flush_buffer()</strong></li></ul></li><li><strong>(b) ffurl_close()</strong><ul><li><strong>a) ffurl_closep()</strong><ul><li><strong><font color=#FFC000>URLProtocol-&gt;url_close()</font></strong></li></ul></li></ul></li></ul></li></ul><h4 id="1-5-2-右上区域（URLProtocol协议处理函数）"><a href="#1-5-2-右上区域（URLProtocol协议处理函数）" class="headerlink" title="1.5.2 右上区域（URLProtocol协议处理函数）"></a>1.5.2 右上区域（URLProtocol协议处理函数）</h4><p>URLProtocol结构体包含如下协议处理函数指针：</p><ul><li><strong><font color=#FFC000>url_open()：打开</font></strong></li><li><strong><font color=#FFC000>url_read()：读取</font></strong></li><li><strong><font color=#FFC000>url_write()：写入</font></strong></li><li><strong><font color=#FFC000>url_seek()：调整进度</font></strong></li><li><strong><font color=#FFC000>url_close()：关闭</font></strong></li></ul><p>【例子】不同的协议对应着上述接口有不同的实现函数，举几个例子：</p><p><strong>File协议（即文件）对应的URLProtocol结构体 <code>ff_file_protocol</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_open() -&gt; file_open() -&gt; open()</span><br><span class="line">url_read() -&gt; file_read() -&gt; read()</span><br><span class="line">url_write() -&gt; file_write() -&gt; write()</span><br><span class="line">url_seek() -&gt; file_seek() -&gt; lseek()</span><br><span class="line">url_close() -&gt; file_close() -&gt; close()</span><br></pre></td></tr></table></figure><p><strong>RTMP协议（libRTMP）对应的URLProtocol结构体 <code>ff_librtmp_protocol</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_open() -&gt; rtmp_open() -&gt; RTMP_Init(), RTMP_SetupURL(), RTMP_Connect(), RTMP_ConnectStream()</span><br><span class="line">url_read() -&gt; rtmp_read() -&gt; RTMP_Read()</span><br><span class="line">url_write() -&gt; rtmp_write() -&gt; RTMP_Write()</span><br><span class="line">url_seek() -&gt; rtmp_read_seek() -&gt; RTMP_SendSeek()</span><br><span class="line">url_close() -&gt; rtmp_close() -&gt; RTMP_Close()</span><br></pre></td></tr></table></figure><p><strong>UDP协议对应的URLProtocol结构体 <code>ff_udp_protocol</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_open() -&gt; udp_open()</span><br><span class="line">url_read() -&gt; udp_read()</span><br><span class="line">url_write() -&gt; udp_write()</span><br><span class="line">url_seek() -&gt; udp_close()</span><br><span class="line">url_close() -&gt; udp_close()</span><br></pre></td></tr></table></figure><h4 id="1-5-3-右中区域（AVInputFormat封装格式处理函数）"><a href="#1-5-3-右中区域（AVInputFormat封装格式处理函数）" class="headerlink" title="1.5.3 右中区域（AVInputFormat封装格式处理函数）"></a>1.5.3 右中区域（AVInputFormat封装格式处理函数）</h4><p>AVInputFormat包含如下封装格式处理函数指针：</p><ul><li><strong><font color=#009900>read_probe()：检查格式</font></strong></li><li><strong><font color=#009900>read_header()：读取文件头</font></strong></li><li><strong><font color=#009900>read_packet()：读取一帧数据</font></strong></li><li><strong><font color=#009900>read_seek()：调整进度</font></strong></li><li><strong><font color=#009900>read_close()：关闭</font></strong></li></ul><p>【例子】不同的封装格式对应着上述接口有不同的实现函数，举几个例子：</p><p><strong>FLV封装格式对应的AVInputFormat结构体 <code>ff_flv_demuxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_probe() -&gt; flv_probe() –&gt; probe()</span><br><span class="line">read_header() -&gt; flv_read_header() -&gt; create_stream() -&gt; avformat_new_stream()</span><br><span class="line">read_packet() -&gt; flv_read_packet()</span><br><span class="line">read_seek() -&gt; flv_read_seek()</span><br><span class="line">read_close() -&gt; flv_read_close()</span><br></pre></td></tr></table></figure><p><strong>MKV封装格式对应的AVInputFormat结构体 <code>ff_matroska_demuxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_probe() -&gt; matroska_probe()</span><br><span class="line">read_header() -&gt; matroska_read_header()</span><br><span class="line">read_packet() -&gt; matroska_read_packet()</span><br><span class="line">read_seek() -&gt; matroska_read_seek()</span><br><span class="line">read_close() -&gt; matroska_read_close()</span><br></pre></td></tr></table></figure><p><strong>MPEG2TS封装格式对应的AVInputFormat结构体 <code>ff_mpegts_demuxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">read_probe() -&gt; mpegts_probe()</span><br><span class="line">read_header() -&gt; mpegts_read_header()</span><br><span class="line">read_packet() -&gt; mpegts_read_packet() </span><br><span class="line">read_close() -&gt; mpegts_read_close()</span><br></pre></td></tr></table></figure><p><strong>AVI封装格式对应的AVInputFormat结构体 <code>ff_avi_demuxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">read_probe() -&gt; avi_probe()</span><br><span class="line">read_header() -&gt; avi_read_header()</span><br><span class="line">read_packet() -&gt; avi_read_packet()</span><br><span class="line">read_seek() -&gt; avi_read_seek()</span><br><span class="line">read_close() -&gt; avi_read_close()</span><br></pre></td></tr></table></figure><h4 id="1-5-4-右下区域（AVCodec编解码函数）"><a href="#1-5-4-右下区域（AVCodec编解码函数）" class="headerlink" title="1.5.4 右下区域（AVCodec编解码函数）"></a>1.5.4 右下区域（AVCodec编解码函数）</h4><p>AVCodec包含如下编解码函数指针：</p><ul><li><strong><font color=#3072C2>init()：初始化</font></strong></li><li><strong><font color=red>decode()</font>：解码一帧数据</strong></li><li><strong><font color=#3072C2>close()：关闭</font></strong></li></ul><p>【例子】不同的编解码器对应着上述接口有不同的实现函数，举几个例子：</p><p><strong>HEVC解码对应的AVCodec结构体 <code>ff_hevc_decoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; hevc_decode_init()</span><br><span class="line">decode() -&gt; hevc_decode_frame() -&gt; decode_nal_units()</span><br><span class="line">close() -&gt; hevc_decode_free()</span><br></pre></td></tr></table></figure><p><strong>H.264解码对应的AVCodec结构体 <code>ff_h264_decoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; ff_h264_decode_init()</span><br><span class="line">decode() -&gt; h264_decode_frame() -&gt; decode_nal_units()</span><br><span class="line">close() -&gt; h264_decode_end()</span><br></pre></td></tr></table></figure><p><strong>VP8解码（libVPX）对应的AVCodec结构体 <code>ff_libvpx_vp8_decoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; vpx_init() -&gt; vpx_codec_dec_init()</span><br><span class="line">decode() -&gt; vp8_decode() -&gt; vpx_codec_decode(), vpx_codec_get_frame()</span><br><span class="line">close() -&gt; vp8_free() -&gt; vpx_codec_destroy()</span><br></pre></td></tr></table></figure><p><strong>MPEG2解码对应的AVCodec结构体 <code>ff_mpeg2video_decoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; mpeg_decode_init()</span><br><span class="line">decode() -&gt; mpeg_decode_frame()</span><br><span class="line">close() -&gt; mpeg_decode_end()</span><br></pre></td></tr></table></figure><h3 id="1-6-avformat-open-input-函数"><a href="#1-6-avformat-open-input-函数" class="headerlink" title="1.6 avformat_open_input() 函数"></a>1.6 avformat_open_input() 函数</h3><img data-src="/2019/05/25/FFmpeg/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84note/avformat_open_input.png" class="" title="avformat_open_input"><h2 id="2-FFmpeg源代码结构图-编码"><a href="#2-FFmpeg源代码结构图-编码" class="headerlink" title="2. FFmpeg源代码结构图 - 编码"></a>2. FFmpeg源代码结构图 - 编码</h2><h3 id="2-1-函数调用关系图"><a href="#2-1-函数调用关系图" class="headerlink" title="2.1 函数调用关系图"></a>2.1 函数调用关系图</h3><p>下图表明了FFmpeg在编码一个视频的时候的函数调用流程。为了保证结构清晰，其中仅列出了最关键的函数，剔除了其它不是特别重要的函数。</p><img data-src="/2019/05/25/FFmpeg/FFmpeg%E6%BA%90%E4%BB%A3%E7%A0%81%E7%BB%93%E6%9E%84note/FFmpeg%E6%BA%90%E7%A0%81API%E7%BB%93%E6%9E%84%E5%9B%BE-%E7%BC%96%E7%A0%81.png" class="" title="FFmpeg源码API结构图-编码"><p>下面解释一下图中关键标记的含义。</p><h3 id="2-2-函数背景色"><a href="#2-2-函数背景色" class="headerlink" title="2.2 函数背景色"></a>2.2 函数背景色</h3><p>函数在图中以方框的形式表现出来。不同的背景色标志了该函数不同的作用：</p><ul><li>粉红色背景函数：FFmpeg 的 API 函数。</li><li>白色背景的函数：FFmpeg 的内部函数。</li><li>黄色背景的函数：URLProtocol 结构体中的函数，包含了读写各种协议的功能。</li><li>绿色背景的函数：AVOutputFormat 结构体中的函数，包含了读写各种封装格式的功能。</li><li>蓝色背景的函数：AVCodec 结构体中的函数，包含了编解码的功能。</li></ul><h3 id="2-3-区域"><a href="#2-3-区域" class="headerlink" title="2.3 区域"></a>2.3 区域</h3><p>整个关系图可以分为以下几个区域：</p><ul><li><strong>左边区域——架构函数区域</strong>：这些函数并不针对某一特定的视频格式。</li><li><strong>右上方黄色区域——协议处理函数区域</strong>：不同的协议（RTP，RTMP，FILE）会调用不同的协议处理函数。</li><li><strong>右边中间绿色区域——封装格式处理函数区域</strong>：不同的封装格式（MKV，FLV，MPEG2TS，AVI）会调用不同的封装格式处理函数。</li><li><strong>右边下方蓝色区域——编解码函数区域</strong>：不同的编码标准（HEVC，H.264，MPEG2）会调用不同的编解码函数。</li></ul><h3 id="2-4-箭头线"><a href="#2-4-箭头线" class="headerlink" title="2.4 箭头线"></a>2.4 箭头线</h3><p>为了把调用关系表示的更明显，图中的箭头线也使用了不同的颜色：</p><ul><li><p>红色的箭头线：标志了编码的流程。</p></li><li><p>其他颜色的箭头线：标志了函数之间的调用关系。其中：</p><ul><li>调用 URLProtocol 结构体中的函数用<strong>黄色箭头线</strong>标识；</li><li>调用 AVOutputFormat 结构体中的函数用<strong>绿色箭头线</strong>标识；</li><li>调用 AVCodec 结构体中的函数用<strong>蓝色箭头线</strong>标识。</li></ul></li></ul><h3 id="2-5-函数所在的文件"><a href="#2-5-函数所在的文件" class="headerlink" title="2.5 函数所在的文件"></a>2.5 函数所在的文件</h3><p>每个函数标识了它所在的文件路径。</p><h3 id="2-6-函数功能简述"><a href="#2-6-函数功能简述" class="headerlink" title="2.6 函数功能简述"></a>2.6 函数功能简述</h3><p>下面简单列出几个区域中函数之间的调用关系（函数之间的调用关系使用缩进的方式表现出来）。详细的函数分析可以参考相关的《FFmpeg源代码分析》系列文章。</p><h4 id="2-6-1-左边区域（架构函数）"><a href="#2-6-1-左边区域（架构函数）" class="headerlink" title="2.6.1 左边区域（架构函数）"></a>2.6.1 左边区域（架构函数）</h4><p><strong><font color=red>1. av_register_all()【函数简单分析】</font></strong></p><ul><li><p><strong><font color=red>1) avcodec_register_all()</font></strong></p><ul><li><strong>(a) REGISTER_HWACCEL()</strong></li><li><strong>(b) REGISTER_ENCODER()</strong></li><li><strong>(c) REGISTER_DECODER()</strong></li><li><strong>(d) REGISTER_PARSER()</strong></li><li><strong>(e) REGISTER_BSF()</strong></li></ul></li><li><p><strong>2) REGISTER_MUXER()</strong></p></li><li><p><strong>3) REGISTER_DEMUXER()</strong></p></li><li><p><strong>4) REGISTER_PROTOCOL()</strong></p></li></ul><p><strong><font color=red>2. avformat_alloc_output_context2()【函数简单分析】</font></strong></p><ul><li><p><strong><font color=red>1) avformat_alloc_context()</font></strong></p><ul><li><p><strong>(a) av_malloc(sizeof(AVFormatContext))</strong></p></li><li><p><strong>(b) avformat_get_context_defaults()</strong></p><ul><li><strong>a) av_opt_set_defaults()</strong></li></ul></li></ul></li><li><p><strong><font color=red>2) av_guess_format()</font></strong></p><ul><li><strong><font color=red>(a) av_oformat_next()</font></strong></li><li><strong><font color=red>(b) av_match_name()</font></strong></li><li><strong><font color=red>(c) av_match_ext()</font></strong></li></ul></li></ul><p><strong><font color=red>3. avio_open2()【函数简单分析】</font></strong></p><ul><li><p><strong>1) ffurl_open()</strong></p><ul><li><strong>(a) ffurl_alloc()</strong><ul><li><strong>a) url_find_protocol()</strong></li><li><strong>b) url_alloc_for_protocol()</strong></li></ul></li><li><strong>(b) ffurl_connect()</strong><ul><li><strong><font color=#FFC000>a) URLProtocol-&gt;url_open()</font></strong></li></ul></li></ul></li><li><p><strong>2) ffio_fdopen()</strong></p><ul><li><strong>(a) av_malloc(buffer_size)</strong></li><li><strong><font color=red>(b) avio_alloc_context()</font></strong><ul><li><strong>a) av_mallocz(sizeof(AVIOContext))</strong></li><li><strong>b) ffio_init_context()</strong></li></ul></li></ul></li></ul><p><strong><font color=red>4. avformat_new_stream()【函数简单分析】</font></strong></p><ul><li><p><strong>1) av_mallocz(sizeof(AVStream))</strong></p></li><li><p><strong><font color=red>2) avcodec_alloc_context3()</font></strong></p><ul><li><strong>(a) av_malloc(sizeof(AVCodecContext))</strong></li><li><strong>(b) avcodec_get_context_defaults3()</strong></li></ul></li></ul><p><strong><font color=red>5. avcodec_find_encoder()【函数简单分析】</font></strong></p><ul><li><strong>1) find_encdec()</strong></li></ul><p><strong><font color=red>6. avcodec_open2()【函数简单分析】</font></strong></p><ul><li><strong>1) AVCodec-&gt;init()</strong></li></ul><p><strong><font color=red>7. avformat_write_header()【函数简单分析】</font></strong></p><ul><li><p><strong>1) init_muxer()</strong></p></li><li><p><strong><font color=#009900>2) AVOutputFormat-&gt;write_header()</font></strong></p></li><li><p><strong>3) init_pts()</strong></p></li></ul><p><strong><font color=red>8. avcodec_encode_video2()【函数简单分析】</font></strong></p><ul><li><strong><font color=#3072C2>1) AVCodec-&gt;encode2()</font></strong></li></ul><p><strong><font color=red>9. av_write_frame()【函数简单分析】</font></strong></p><ul><li><p><strong>1) check_packet()</strong></p></li><li><p><strong>2) compute_pkt_fields2()</strong></p></li><li><p><strong>3) write_packet()</strong></p><ul><li><strong><font color=#009900>(a) AVOutputFormat-&gt;write_packet()</font></strong></li></ul></li></ul><p><strong><font color=red>10. av_write_trailer()【函数简单分析】</font></strong></p><ul><li><p><strong>1) write_packet()</strong></p></li><li><p><strong><font color=#009900>2) AVOutputFormat-&gt;write_trailer()</font></strong></p></li></ul><p><strong><font color=red>11. avcodec_close()【函数简单分析】</font></strong></p><ul><li><strong><font color=#3072C2>1) AVCodec-&gt;close()</font></strong></li></ul><p><strong><font color=red>12. avformat_free_context()【函数简单分析】</font></strong></p><ul><li><strong>1) ff_free_stream()</strong></li></ul><p><strong><font color=red>13. avio_close()【函数简单分析】</font></strong></p><ul><li><strong>1) avio_flush()</strong><ul><li><strong>(a) flush_buffer()</strong></li></ul></li><li><strong>2) ffurl_close()</strong><ul><li><strong>(a) ffurl_closep()</strong><ul><li><strong><font color=#FFC000>a) URLProtocol-&gt;url_close()</font></strong></li></ul></li></ul></li></ul><h4 id="2-6-2-右上区域（URLProtocol协议处理函数）"><a href="#2-6-2-右上区域（URLProtocol协议处理函数）" class="headerlink" title="2.6.2 右上区域（URLProtocol协议处理函数）"></a>2.6.2 右上区域（URLProtocol协议处理函数）</h4><p>URLProtocol结构体包含如下协议处理函数指针：</p><ul><li><strong><font color=#FFC000>url_open()：打开</font></strong></li><li><strong><font color=#FFC000>url_read()：读取</font></strong></li><li><strong><font color=#FFC000>url_write()：写入</font></strong></li><li><strong><font color=#FFC000>url_seek()：调整进度</font></strong></li><li><strong><font color=#FFC000>url_close()：关闭</font></strong></li></ul><p>【例子】不同的协议对应着上述接口有不同的实现函数，举几个例子：</p><p><strong>File协议（即文件）对应的URLProtocol结构体 <code>ff_file_protocol</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_open() -&gt; file_open() -&gt; open()</span><br><span class="line">url_read() -&gt; file_read() -&gt; read()</span><br><span class="line">url_write() -&gt; file_write() -&gt; write()</span><br><span class="line">url_seek() -&gt; file_seek() -&gt; lseek()</span><br><span class="line">url_close() -&gt; file_close() -&gt; close()</span><br></pre></td></tr></table></figure><p><strong>RTMP协议（libRTMP）对应的URLProtocol结构体 <code>ff_librtmp_protocol</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_open() -&gt; rtmp_open() -&gt; RTMP_Init(), RTMP_SetupURL(), RTMP_Connect(), RTMP_ConnectStream()</span><br><span class="line">url_read() -&gt; rtmp_read() -&gt; RTMP_Read()</span><br><span class="line">url_write() -&gt; rtmp_write() -&gt; RTMP_Write()</span><br><span class="line">url_seek() -&gt; rtmp_read_seek() -&gt; RTMP_SendSeek()</span><br><span class="line">url_close() -&gt; rtmp_close() -&gt; RTMP_Close()</span><br></pre></td></tr></table></figure><p><strong>UDP协议对应的URLProtocol结构体 <code>ff_udp_protocol</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">url_open() -&gt; udp_open()</span><br><span class="line">url_read() -&gt; udp_read()</span><br><span class="line">url_write() -&gt; udp_write()</span><br><span class="line">url_seek() -&gt; udp_close()</span><br><span class="line">url_close() -&gt; udp_close()</span><br></pre></td></tr></table></figure><h4 id="2-6-3-右中区域（AVOutputFormat封装格式处理函数）"><a href="#2-6-3-右中区域（AVOutputFormat封装格式处理函数）" class="headerlink" title="2.6.3 右中区域（AVOutputFormat封装格式处理函数）"></a>2.6.3 右中区域（AVOutputFormat封装格式处理函数）</h4><p>AVOutputFormat包含如下封装格式处理函数指针：</p><ul><li><strong><font color=#009900>write_header()：写文件头</font></strong></li><li><strong><font color=#009900>write_packet()：写一帧数据</font></strong></li><li><strong><font color=#009900>write_trailer()：写文件尾</font></strong></li></ul><p>【例子】不同的封装格式对应着上述接口有不同的实现函数，举几个例子：</p><p><strong>FLV封装格式对应的AVOutputFormat结构体 <code>ff_flv_muxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">write_header() -&gt; flv_write_header()</span><br><span class="line">write_packet() –&gt; flv_write_packet()</span><br><span class="line">write_trailer() -&gt; flv_write_trailer()</span><br></pre></td></tr></table></figure><p><strong>MKV封装格式对应的AVOutputFormat结构体 <code>ff_matroska_muxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">write_header() -&gt; mkv_write_header()</span><br><span class="line">write_packet() –&gt; mkv_write_flush_packet()</span><br><span class="line">write_trailer() -&gt; mkv_write_trailer()</span><br></pre></td></tr></table></figure><p><strong>MPEG2TS封装格式对应的AVOutputFormat结构体 <code>ff_mpegts_muxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">write_header() -&gt; mpegts_write_header()</span><br><span class="line">write_packet() –&gt; mpegts_write_packet()</span><br><span class="line">write_trailer() -&gt; mpegts_write_end()</span><br></pre></td></tr></table></figure><p><strong>AVI封装格式对应的AVOutputFormat结构体 <code>ff_avi_muxer</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">write_header() -&gt; avi_write_header()</span><br><span class="line">write_packet() –&gt; avi_write_packet()</span><br><span class="line">write_trailer() -&gt; avi_write_trailer()</span><br></pre></td></tr></table></figure><h4 id="2-6-4-右下区域（AVCodec编解码函数）"><a href="#2-6-4-右下区域（AVCodec编解码函数）" class="headerlink" title="2.6.4 右下区域（AVCodec编解码函数）"></a>2.6.4 右下区域（AVCodec编解码函数）</h4><p>AVCodec包含如下编解码函数指针：</p><ul><li><strong><font color=#3072C2>init()：初始化</font></strong></li><li><strong><font color=#3072C2>encode2()：编码一帧数据</font></strong></li><li><strong><font color=#3072C2>close()：关闭</font></strong></li></ul><p>【例子】不同的编解码器对应着上述接口有不同的实现函数，举几个例子：</p><p><strong>HEVC编码器对应的AVCodec结构体 <code>ff_libx265_encoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; libx265_encode_init() -&gt; x265_param_alloc(), x265_param_default_preset(), x265_encoder_open()</span><br><span class="line">encode2() -&gt; libx265_encode_frame() -&gt; x265_encoder_encode()</span><br><span class="line">close() -&gt; libx265_encode_close() -&gt; x265_param_free(), x265_encoder_close()</span><br></pre></td></tr></table></figure><p><strong>H.264编码器对应的AVCodec结构体 <code>ff_libx264_encoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; X264_init() -&gt; x264_param_default(), x264_encoder_open(), x264_encoder_headers()</span><br><span class="line">encode2() -&gt; X264_frame() -&gt; x264_encoder_encode()</span><br><span class="line">close() -&gt; X264_close() -&gt; x264_encoder_close()</span><br></pre></td></tr></table></figure><p><strong>VP8编码器（libVPX）对应的AVCodec结构体 <code>ff_libvpx_vp8_encoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; vpx_init() -&gt; vpx_codec_enc_config_default()</span><br><span class="line">encode2() -&gt; vp8_encode() -&gt; vpx_codec_enc_init(), vpx_codec_encode()</span><br><span class="line">close() -&gt; vp8_free() -&gt; vpx_codec_destroy()</span><br></pre></td></tr></table></figure><p><strong>MPEG2编码器对应的AVCodec结构体 <code>ff_mpeg2video_encoder</code>：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init() -&gt; encode_init()</span><br><span class="line">encode2() -&gt; ff_mpv_encode_picture()</span><br><span class="line">close() -&gt; ff_mpv_encode_end()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;特别说明，此文参考至&lt;a href=&quot;https://blog.csdn.net/leixiaohua1020/article/details/44220151&quot;&gt;雷神笔记&lt;/a&gt;，做一个备忘录。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-FFmpeg源代码结构图-解码&quot;&gt;&lt;a href=&quot;#1-FFmpeg源代码结构图-解码&quot; class=&quot;headerlink&quot; title=&quot;1. FFmpeg源代码结构图 - 解码&quot;&gt;&lt;/a&gt;1. FFmpeg源代码结构图 - 解码&lt;/h2&gt;&lt;p&gt;下图表明了 FFmpeg 在解码一个视频的时候的函数调用流程。为了保证结构清晰，其中仅列出了最关键的函数，剔除了其它不是特别重要的函数。&lt;/p&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>FFMpeg实时美颜直播推流</title>
    <link href="http://miaopei.github.io/2019/05/19/FFmpeg/ffmpeg%E5%AE%9E%E6%97%B6%E7%BE%8E%E9%A2%9C%E6%8E%A8%E6%B5%81/"/>
    <id>http://miaopei.github.io/2019/05/19/FFmpeg/ffmpeg%E5%AE%9E%E6%97%B6%E7%BE%8E%E9%A2%9C%E6%8E%A8%E6%B5%81/</id>
    <published>2019-05-19T02:14:50.000Z</published>
    <updated>2024-06-13T09:47:31.392Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="55dd33fc9588d60c62a39f3c5b04c55efeaab6536ea052067a19c388fdad19f5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>FFMPEG+SDL视频播放器</title>
    <link href="http://miaopei.github.io/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/"/>
    <id>http://miaopei.github.io/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/</id>
    <published>2019-05-18T02:14:50.000Z</published>
    <updated>2024-06-13T06:47:19.613Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/HatsuneMikuV/FFmpeg_Leixiaohua">GitHub</a></p><p><a href="https://blog.csdn.net/leixiaohua1020/column/info/ffmpeg-devel/7">FFmpeg</a></p><p><a href="https://blog.csdn.net/leixiaohua1020/article/details/12677129">ffmpeg 源代码简单分析</a></p></blockquote><h1 id="1-100行代码实现最简单的基于FFMPEG-SDL的视频播放器"><a href="#1-100行代码实现最简单的基于FFMPEG-SDL的视频播放器" class="headerlink" title="1. 100行代码实现最简单的基于FFMPEG+SDL的视频播放器"></a>1. 100行代码实现最简单的基于FFMPEG+SDL的视频播放器</h1><blockquote><p><a href="https://github.com/leixiaohua1020/simplest_ffmpeg_player">simplest_ffmpeg_player</a></p></blockquote><p>该播放器虽然简单，但是几乎包含了使用FFMPEG播放一个视频所有必备的API，并且使用SDL显示解码出来的视频。</p><span id="more"></span><p>并且支持流媒体等多种视频输入，处于简单考虑，没有音频部分，同时视频播放采用直接延时40ms的方式</p><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/%E6%92%AD%E6%94%BE%E5%99%A8%E8%A7%A3%E7%A0%81%E7%9A%84%E6%B5%81%E7%A8%8B%E7%94%A8%E5%9B%BE.png" class="" title="播放器解码的流程用图"><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/SDL%E6%98%BE%E7%A4%BAYUV%E5%9B%BE%E5%83%8F%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="SDL显示YUV图像的流程图"><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/SDL2.0%E6%98%BE%E7%A4%BAYUV%E7%9A%84%E6%B5%81%E7%A8%8B%E5%9B%BE.png" class="" title="SDL2.0显示YUV的流程图"><p>对比SDL1.2的流程图，发现变化还是很大的。几乎所有的API都发生了变化。但是函数和变量有一定的对应关系：</p><p>SDL_SetVideoMode()————SDL_CreateWindow()</p><p>SDL_Surface————SDL_Window</p><p>SDL_CreateYUVOverlay()————SDL_CreateTexture()</p><p>SDL_Overlay————SDL_Texture</p><p>简单解释各个变量的作用：</p><ul><li>SDL_Window就是使用SDL的时候弹出的那个窗口。在SDL1.x版本中，只可以创建一个一个窗口。在SDL2.0版本中，可以创建多个窗口。</li><li>SDL_Texture用于显示YUV数据。一个SDL_Texture对应一帧YUV数据。</li><li>SDL_Renderer用于渲染SDL_Texture至SDL_Window。</li><li>SDL_Rect用于确定SDL_Texture显示的位置。注意：一个SDL_Texture可以指定多个不同的</li><li>SDL_Rect，这样就可以在SDL_Window不同位置显示相同的内容（使用SDL_RenderCopy()函数）。</li></ul><p>它们的关系如下图所示：</p><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/%E5%85%B3%E7%B3%BB%E5%9B%BE.png" class="" title="关系图"><p>下图举了个例子，指定了4个SDL_Rect，可以实现4分屏的显示。</p><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/SDL_Rect%E5%9B%9B%E5%88%86%E5%B1%8F%E6%98%BE%E7%A4%BA.png" class="" title="SDL_Rect四分屏显示"><h2 id="1-1-simplest-ffmpeg-player（标准版）代码"><a href="#1-1-simplest-ffmpeg-player（标准版）代码" class="headerlink" title="1.1 simplest_ffmpeg_player（标准版）代码"></a>1.1 simplest_ffmpeg_player（标准版）代码</h2><details><summary>最基础的版本，学习的开始。</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最简单的基于FFmpeg的视频播放器 2</span></span><br><span class="line"><span class="comment"> * Simplest FFmpeg Player 2</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本程序实现了视频文件的解码和显示(支持HEVC，H.264，MPEG2等)。</span></span><br><span class="line"><span class="comment"> * 是最简单的FFmpeg视频解码方面的教程。</span></span><br><span class="line"><span class="comment"> * 通过学习本例子可以了解FFmpeg的解码流程。</span></span><br><span class="line"><span class="comment"> * This software is a simplest video player based on FFmpeg.</span></span><br><span class="line"><span class="comment"> * Suitable for beginner of FFmpeg.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STDC_CONSTANT_MACROS</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//Windows</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavcodec/avcodec.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavformat/avformat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libswscale/swscale.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavutil/imgutils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SDL2/SDL.h&quot;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">//Linux...</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    </span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL2/SDL.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Output YUV420P data as a file </span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OUTPUT_YUV420P 0</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">AVFormatContext*pFormatCtx; <span class="comment">// 音视频格式化上下文</span></span><br><span class="line"><span class="type">int</span>i, videoindex;</span><br><span class="line">AVCodecContext*pCodecCtx;<span class="comment">// 音视频编解码器上下文</span></span><br><span class="line">AVCodec*pCodec;<span class="comment">// 音视频编解码器</span></span><br><span class="line">AVFrame*pFrame, *pFrameYUV;<span class="comment">// 音视频数据帧</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *out_buffer;</span><br><span class="line">AVPacket *packet;<span class="comment">// 音视频数据包</span></span><br><span class="line"><span class="type">int</span> y_size;</span><br><span class="line"><span class="type">int</span> ret, got_picture;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">img_convert_ctx</span>;</span> <span class="comment">// 视频图像转换上下文</span></span><br><span class="line"> </span><br><span class="line"><span class="type">char</span> filepath[]=<span class="string">&quot;bigbuckbunny_480x272.h265&quot;</span>;</span><br><span class="line"><span class="comment">//SDL---------------------------</span></span><br><span class="line"><span class="type">int</span> screen_w=<span class="number">0</span>, screen_h=<span class="number">0</span>;</span><br><span class="line">SDL_Window *screen; </span><br><span class="line">SDL_Renderer*sdlRenderer; <span class="comment">// SDL渲染器</span></span><br><span class="line">SDL_Texture*sdlTexture;<span class="comment">// SDL纹理</span></span><br><span class="line">SDL_Rect sdlRect;<span class="comment">// 确定SDL_Texture显示的位置</span></span><br><span class="line"> </span><br><span class="line">FILE *fp_yuv;</span><br><span class="line"> </span><br><span class="line">av_register_all();<span class="comment">// 注册所有的编解码器</span></span><br><span class="line">avformat_network_init();</span><br><span class="line">pFormatCtx = avformat_alloc_context();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx, filepath, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Couldn&#x27;t open input stream.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Couldn&#x27;t find stream information.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">videoindex = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pFormatCtx-&gt;nb_streams; i++) </span><br><span class="line"><span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)&#123;</span><br><span class="line">videoindex = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(videoindex == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Didn&#x27;t find a video stream.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">pCodecCtx = pFormatCtx-&gt;streams[videoindex]-&gt;codec;</span><br><span class="line">pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id);</span><br><span class="line"><span class="keyword">if</span>(pCodec == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Codec not found.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(avcodec_open2(pCodecCtx, pCodec,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Could not open codec.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">pFrame = av_frame_alloc();</span><br><span class="line">pFrameYUV = av_frame_alloc();</span><br><span class="line">out_buffer = (<span class="type">unsigned</span> <span class="type">char</span> *)av_malloc(av_image_get_buffer_size(AV_PIX_FMT_YUV420P,  pCodecCtx-&gt;width, pCodecCtx-&gt;height, <span class="number">1</span>));</span><br><span class="line">av_image_fill_arrays(pFrameYUV-&gt;data, pFrameYUV-&gt;linesize,out_buffer,</span><br><span class="line">AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line"><span class="comment">//Output Info-----------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;--------------- File Information ----------------\n&quot;</span>);</span><br><span class="line">av_dump_format(pFormatCtx, <span class="number">0</span>, filepath, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------\n&quot;</span>);</span><br><span class="line">img_convert_ctx = sws_getContext(pCodecCtx-&gt;width, pCodecCtx-&gt;height, pCodecCtx-&gt;pix_fmt, </span><br><span class="line">pCodecCtx-&gt;width, pCodecCtx-&gt;height, AV_PIX_FMT_YUV420P, SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); </span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OUTPUT_YUV420P </span></span><br><span class="line">    fp_yuv=fopen(<span class="string">&quot;output.yuv&quot;</span>, <span class="string">&quot;wb+&quot;</span>);  </span><br><span class="line"><span class="meta">#<span class="keyword">endif</span>  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;  </span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Could not initialize SDL - %s\n&quot;</span>, SDL_GetError()); </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">screen_w = pCodecCtx-&gt;width;</span><br><span class="line">screen_h = pCodecCtx-&gt;height;</span><br><span class="line"><span class="comment">//SDL 2.0 Support for multiple windows</span></span><br><span class="line">screen = SDL_CreateWindow(<span class="string">&quot;Simplest ffmpeg player&#x27;s Window&quot;</span>, SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED,</span><br><span class="line">screen_w, screen_h,</span><br><span class="line">SDL_WINDOW_OPENGL);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(!screen) &#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SDL: could not create window - exiting:%s\n&quot;</span>,SDL_GetError()); </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sdlRenderer = SDL_CreateRenderer(screen, <span class="number">-1</span>, <span class="number">0</span>);  </span><br><span class="line"><span class="comment">//IYUV: Y + U + V  (3 planes)</span></span><br><span class="line"><span class="comment">//YV12: Y + V + U  (3 planes)</span></span><br><span class="line">sdlTexture = SDL_CreateTexture(sdlRenderer, SDL_PIXELFORMAT_IYUV, SDL_TEXTUREACCESS_STREAMING, pCodecCtx-&gt;width, pCodecCtx-&gt;height);  </span><br><span class="line"> </span><br><span class="line">sdlRect.x = <span class="number">0</span>;</span><br><span class="line">sdlRect.y = <span class="number">0</span>;</span><br><span class="line">sdlRect.w = screen_w;</span><br><span class="line">sdlRect.h = screen_h;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//SDL End----------------------</span></span><br><span class="line"><span class="keyword">while</span>(av_read_frame(pFormatCtx, packet)&gt;=<span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(packet-&gt;stream_index == videoindex)&#123;</span><br><span class="line">ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);</span><br><span class="line"><span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Decode Error.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(got_picture)&#123;</span><br><span class="line">sws_scale(img_convert_ctx, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* <span class="type">const</span>*)pFrame-&gt;data, pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height, </span><br><span class="line">pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OUTPUT_YUV420P</span></span><br><span class="line">y_size = pCodecCtx-&gt;width*pCodecCtx-&gt;height;  </span><br><span class="line">fwrite(pFrameYUV-&gt;data[<span class="number">0</span>], <span class="number">1</span>, y_size, fp_yuv);    <span class="comment">//Y </span></span><br><span class="line">fwrite(pFrameYUV-&gt;data[<span class="number">1</span>], <span class="number">1</span>, y_size/<span class="number">4</span>, fp_yuv);  <span class="comment">//U</span></span><br><span class="line">fwrite(pFrameYUV-&gt;data[<span class="number">2</span>], <span class="number">1</span>, y_size/<span class="number">4</span>, fp_yuv);  <span class="comment">//V</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//SDL---------------------------</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0</span></span><br><span class="line">SDL_UpdateTexture(sdlTexture, <span class="literal">NULL</span>, pFrameYUV-&gt;data[<span class="number">0</span>], pFrameYUV-&gt;linesize[<span class="number">0</span>]);  </span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">SDL_UpdateYUVTexture(sdlTexture, &amp;sdlRect,</span><br><span class="line">pFrameYUV-&gt;data[<span class="number">0</span>], pFrameYUV-&gt;linesize[<span class="number">0</span>],</span><br><span class="line">pFrameYUV-&gt;data[<span class="number">1</span>], pFrameYUV-&gt;linesize[<span class="number">1</span>],</span><br><span class="line">pFrameYUV-&gt;data[<span class="number">2</span>], pFrameYUV-&gt;linesize[<span class="number">2</span>]);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">SDL_RenderClear(sdlRenderer);  </span><br><span class="line">SDL_RenderCopy(sdlRenderer, sdlTexture, <span class="literal">NULL</span>, &amp;sdlRect);  </span><br><span class="line">SDL_RenderPresent(sdlRenderer);  </span><br><span class="line"><span class="comment">//SDL End-----------------------</span></span><br><span class="line"><span class="comment">//Delay 40ms</span></span><br><span class="line">SDL_Delay(<span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">av_free_packet(packet);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flush decoder</span></span><br><span class="line"><span class="comment">//FIX: Flush Frames remained in Codec</span></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (!got_picture)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">sws_scale(img_convert_ctx, (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* <span class="type">const</span>*)pFrame-&gt;data, pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height, </span><br><span class="line">pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OUTPUT_YUV420P</span></span><br><span class="line"><span class="type">int</span> y_size = pCodecCtx-&gt;width*pCodecCtx-&gt;height;  </span><br><span class="line">fwrite(pFrameYUV-&gt;data[<span class="number">0</span>], <span class="number">1</span>, y_size, fp_yuv);    <span class="comment">//Y </span></span><br><span class="line">fwrite(pFrameYUV-&gt;data[<span class="number">1</span>], <span class="number">1</span>, y_size/<span class="number">4</span>, fp_yuv);  <span class="comment">//U</span></span><br><span class="line">fwrite(pFrameYUV-&gt;data[<span class="number">2</span>], <span class="number">1</span>, y_size/<span class="number">4</span>, fp_yuv);  <span class="comment">//V</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">//SDL---------------------------</span></span><br><span class="line">SDL_UpdateTexture(sdlTexture, &amp;sdlRect, pFrameYUV-&gt;data[<span class="number">0</span>], pFrameYUV-&gt;linesize[<span class="number">0</span>]);  </span><br><span class="line">SDL_RenderClear(sdlRenderer);  </span><br><span class="line">SDL_RenderCopy(sdlRenderer, sdlTexture, <span class="literal">NULL</span>, &amp;sdlRect);  </span><br><span class="line">SDL_RenderPresent(sdlRenderer);  </span><br><span class="line"><span class="comment">//SDL End-----------------------</span></span><br><span class="line"><span class="comment">//Delay 40ms</span></span><br><span class="line">SDL_Delay(<span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sws_freeContext(img_convert_ctx);</span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">if</span> OUTPUT_YUV420P </span></span><br><span class="line">    fclose(fp_yuv);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"> </span><br><span class="line">SDL_Quit();</span><br><span class="line"> </span><br><span class="line">av_frame_free(&amp;pFrameYUV);</span><br><span class="line">av_frame_free(&amp;pFrame);</span><br><span class="line">avcodec_close(pCodecCtx);</span><br><span class="line">avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h2 id="1-2-simplest-ffmpeg-player-su（SU版）代码"><a href="#1-2-simplest-ffmpeg-player-su（SU版）代码" class="headerlink" title="1.2 simplest_ffmpeg_player_su（SU版）代码"></a>1.2 simplest_ffmpeg_player_su（SU版）代码</h2><p>标准版的基础之上引入了 SDL 的 Event。</p><p>效果如下：</p><ul><li>SDL弹出的窗口可以移动了</li><li>画面显示是严格的40ms一帧</li></ul><details><summary>代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最简单的基于FFmpeg的视频播放器2(SDL升级版)</span></span><br><span class="line"><span class="comment"> * Simplest FFmpeg Player 2(SDL Update)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 本程序实现了视频文件的解码和显示(支持HEVC，H.264，MPEG2等)。</span></span><br><span class="line"><span class="comment"> * 是最简单的FFmpeg视频解码方面的教程。</span></span><br><span class="line"><span class="comment"> * 通过学习本例子可以了解FFmpeg的解码流程。</span></span><br><span class="line"><span class="comment"> * 本版本中使用SDL消息机制刷新视频画面。</span></span><br><span class="line"><span class="comment"> * This software is a simplest video player based on FFmpeg.</span></span><br><span class="line"><span class="comment"> * Suitable for beginner of FFmpeg.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 备注:</span></span><br><span class="line"><span class="comment"> * 标准版在播放视频的时候，画面显示使用延时40ms的方式。这么做有两个后果：</span></span><br><span class="line"><span class="comment"> * （1）SDL弹出的窗口无法移动，一直显示是忙碌状态</span></span><br><span class="line"><span class="comment"> * （2）画面显示并不是严格的40ms一帧，因为还没有考虑解码的时间。</span></span><br><span class="line"><span class="comment"> * SU（SDL Update）版在视频解码的过程中，不再使用延时40ms的方式，而是创建了</span></span><br><span class="line"><span class="comment"> * 一个线程，每隔40ms发送一个自定义的消息，告知主函数进行解码显示。这样做之后：</span></span><br><span class="line"><span class="comment"> * （1）SDL弹出的窗口可以移动了</span></span><br><span class="line"><span class="comment"> * （2）画面显示是严格的40ms一帧</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __STDC_CONSTANT_MACROS</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN32</span></span><br><span class="line"><span class="comment">//Windows</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavcodec/avcodec.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavformat/avformat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libswscale/swscale.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;libavutil/imgutils.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;SDL2/SDL.h&quot;</span></span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line"><span class="comment">//Linux...</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavcodec/avcodec.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavformat/avformat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libswscale/swscale.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;libavutil/imgutils.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL2/SDL.h&gt;</span>   </span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __cplusplus</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//Refresh Event</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SFM_REFRESH_EVENT  (SDL_USEREVENT + 1)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SFM_BREAK_EVENT  (SDL_USEREVENT + 2)</span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> thread_exit = <span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> thread_pause = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">sfp_refresh_thread</span><span class="params">(<span class="type">void</span> *opaque)</span>&#123;</span><br><span class="line">thread_exit = <span class="number">0</span>;</span><br><span class="line">thread_pause = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (!thread_exit) &#123;</span><br><span class="line"><span class="keyword">if</span>(!thread_pause)&#123;</span><br><span class="line">SDL_Event event;</span><br><span class="line">event.type = SFM_REFRESH_EVENT;</span><br><span class="line">SDL_PushEvent(&amp;event);</span><br><span class="line">&#125;</span><br><span class="line">SDL_Delay(<span class="number">40</span>);</span><br><span class="line">&#125;</span><br><span class="line">thread_exit = <span class="number">0</span>;</span><br><span class="line">thread_pause = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//Break</span></span><br><span class="line">SDL_Event event;</span><br><span class="line">event.type = SFM_BREAK_EVENT;</span><br><span class="line">SDL_PushEvent(&amp;event);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">AVFormatContext*pFormatCtx;</span><br><span class="line"><span class="type">int</span>i, videoindex;</span><br><span class="line">AVCodecContext*pCodecCtx;<span class="comment">// 音视频编解码器上下文</span></span><br><span class="line">AVCodec*pCodec;</span><br><span class="line">AVFrame*pFrame, *pFrameYUV;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> *out_buffer;</span><br><span class="line">AVPacket *packet;</span><br><span class="line"><span class="type">int</span> ret, got_picture;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//------------SDL----------------</span></span><br><span class="line"><span class="type">int</span> screen_w, screen_h;</span><br><span class="line">SDL_Window *screen; </span><br><span class="line">SDL_Renderer*sdlRenderer;</span><br><span class="line">SDL_Texture*sdlTexture;</span><br><span class="line">SDL_Rect sdlRect;</span><br><span class="line">SDL_Thread *video_tid;</span><br><span class="line">SDL_Event event;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SwsContext</span> *<span class="title">img_convert_ctx</span>;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//char filepath[]=&quot;bigbuckbunny_480x272.h265&quot;;</span></span><br><span class="line"><span class="type">char</span> filepath[]=<span class="string">&quot;Titanic.ts&quot;</span>;</span><br><span class="line"> </span><br><span class="line">av_register_all();<span class="comment">// 注册所有的编解码器</span></span><br><span class="line">avformat_network_init();</span><br><span class="line">pFormatCtx = avformat_alloc_context(); <span class="comment">// 分配内存并设置默认值</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 该函数用于打开多媒体数据并且获得一些相关的信息,AVInputFormat的read_header()完成了视音频流对应的AVStream的创建</span></span><br><span class="line"><span class="keyword">if</span>(avformat_open_input(&amp;pFormatCtx, filepath, <span class="literal">NULL</span>, <span class="literal">NULL</span>) != <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Couldn&#x27;t open input stream.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 该函数可以读取一部分视音频数据并且获得一些相关的信息,该函数主要用于给每个媒体流（音频/视频）的AVStream结构体赋值</span></span><br><span class="line"><span class="keyword">if</span>(avformat_find_stream_info(pFormatCtx, <span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Couldn&#x27;t find stream information.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">videoindex = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;pFormatCtx-&gt;nb_streams; i++) </span><br><span class="line"><span class="keyword">if</span>(pFormatCtx-&gt;streams[i]-&gt;codec-&gt;codec_type == AVMEDIA_TYPE_VIDEO)&#123;</span><br><span class="line">videoindex = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(videoindex == <span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Didn&#x27;t find a video stream.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pCodecCtx = pFormatCtx-&gt;streams[videoindex]-&gt;codec; <span class="comment">// 找到视频流编解码器</span></span><br><span class="line">pCodec = avcodec_find_decoder(pCodecCtx-&gt;codec_id); </span><br><span class="line"><span class="keyword">if</span>(pCodec == <span class="literal">NULL</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Codec not found.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 该函数用于初始化一个视音频编解码器的AVCodecContext</span></span><br><span class="line">    <span class="comment">//（1）为各种结构体分配内存（通过各种av_malloc()实现）。</span></span><br><span class="line"><span class="comment">//（2）将输入的AVDictionary形式的选项设置到AVCodecContext。</span></span><br><span class="line"><span class="comment">//（3）其他一些零零碎碎的检查，比如说检查编解码器是否处于“实验”阶段。</span></span><br><span class="line"><span class="comment">//（4）如果是编码器，检查输入参数是否符合编码器的要求</span></span><br><span class="line"><span class="comment">//（5）调用AVCodec的init()初始化具体的解码器。</span></span><br><span class="line"><span class="keyword">if</span>(avcodec_open2(pCodecCtx, pCodec,<span class="literal">NULL</span>) &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Could not open codec.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pFrame = av_frame_alloc();</span><br><span class="line">pFrameYUV = av_frame_alloc();</span><br><span class="line"> </span><br><span class="line">out_buffer = (<span class="type">unsigned</span> <span class="type">char</span> *)av_malloc(av_image_get_buffer_size(AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, pCodecCtx-&gt;height, <span class="number">1</span>));</span><br><span class="line">av_image_fill_arrays(pFrameYUV-&gt;data, pFrameYUV-&gt;linesize,</span><br><span class="line">                         out_buffer,AV_PIX_FMT_YUV420P, pCodecCtx-&gt;width, </span><br><span class="line">                         pCodecCtx-&gt;height, <span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">//Output Info-----------------------------</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;---------------- File Information ---------------\n&quot;</span>);</span><br><span class="line">av_dump_format(pFormatCtx, <span class="number">0</span>, filepath, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化一个SwsContext</span></span><br><span class="line">    <span class="comment">// 参数说明：</span></span><br><span class="line">    <span class="comment">// 源图像的宽, 源图像的高, 源图像的像素格式, </span></span><br><span class="line">    <span class="comment">// 目标图像的宽, 目标图像的高, 目标图像的像素格式, 设定图像拉伸使用的算法</span></span><br><span class="line">img_convert_ctx = sws_getContext(pCodecCtx-&gt;width, pCodecCtx-&gt;height, </span><br><span class="line">                                     pCodecCtx-&gt;pix_fmt, pCodecCtx-&gt;width, </span><br><span class="line">                                     pCodecCtx-&gt;height, AV_PIX_FMT_YUV420P, </span><br><span class="line">                                     SWS_BICUBIC, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(SDL_Init(SDL_INIT_VIDEO | SDL_INIT_AUDIO | SDL_INIT_TIMER)) &#123;  </span><br><span class="line"><span class="built_in">printf</span>( <span class="string">&quot;Could not initialize SDL - %s\n&quot;</span>, SDL_GetError()); </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//SDL 2.0 Support for multiple windows</span></span><br><span class="line">screen_w = pCodecCtx-&gt;width;</span><br><span class="line">screen_h = pCodecCtx-&gt;height;</span><br><span class="line">screen = SDL_CreateWindow(<span class="string">&quot;Simplest ffmpeg player&#x27;s Window&quot;</span>, </span><br><span class="line">                              SDL_WINDOWPOS_UNDEFINED,SDL_WINDOWPOS_UNDEFINED,</span><br><span class="line">                              screen_w, screen_h, SDL_WINDOW_OPENGL);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(!screen) &#123;  </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;SDL: could not create window - exiting:%s\n&quot;</span>,SDL_GetError()); </span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">sdlRenderer = SDL_CreateRenderer(screen, <span class="number">-1</span>, <span class="number">0</span>);  </span><br><span class="line"><span class="comment">//IYUV: Y + U + V  (3 planes)</span></span><br><span class="line"><span class="comment">//YV12: Y + V + U  (3 planes)</span></span><br><span class="line">sdlTexture = SDL_CreateTexture(sdlRenderer, SDL_PIXELFORMAT_IYUV, </span><br><span class="line">                                   SDL_TEXTUREACCESS_STREAMING, </span><br><span class="line">                                   pCodecCtx-&gt;width, pCodecCtx-&gt;height);  </span><br><span class="line"> </span><br><span class="line">sdlRect.x = <span class="number">0</span>;</span><br><span class="line">sdlRect.y = <span class="number">0</span>;</span><br><span class="line">sdlRect.w = screen_w;</span><br><span class="line">sdlRect.h = screen_h;</span><br><span class="line"> </span><br><span class="line">packet = (AVPacket *)av_malloc(<span class="keyword">sizeof</span>(AVPacket));</span><br><span class="line"> </span><br><span class="line">video_tid = SDL_CreateThread(sfp_refresh_thread, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//------------SDL End------------</span></span><br><span class="line"><span class="comment">//Event Loop</span></span><br><span class="line"><span class="keyword">for</span> (;;) &#123;</span><br><span class="line"><span class="comment">//Wait</span></span><br><span class="line">SDL_WaitEvent(&amp;event);</span><br><span class="line"><span class="keyword">if</span>(event.type == SFM_REFRESH_EVENT)&#123;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">// av_read_frame()的作用是读取码流中的音频若干帧或者视频一帧</span></span><br><span class="line">                <span class="comment">// 例如，解码视频的时候，每解码一个视频帧，需要先调用 av_read_frame()获得一帧视频的压缩数据，然后才能对该数据进行解码（例如H.264中一帧压缩数据通常对应一个NAL）</span></span><br><span class="line">                <span class="comment">// 参数说明：输入的AVFormatContext, 输出的AVPacket</span></span><br><span class="line"><span class="keyword">if</span>(av_read_frame(pFormatCtx, packet)&lt;<span class="number">0</span>)</span><br><span class="line">thread_exit = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(packet-&gt;stream_index == videoindex)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">// 作用是解码一帧视频数据,输入一个压缩编码的结构体AVPacket，输出一个解码后的结构体AVFrame</span></span><br><span class="line">            <span class="comment">// avcodec_decode_video2()主要做了以下几个方面的工作：</span></span><br><span class="line">            <span class="comment">//（1）对输入的字段进行了一系列的检查工作：例如宽高是否正确，输入是否为视频等等。</span></span><br><span class="line"><span class="comment">//（2）通过ret = avctx-&gt;codec-&gt;decode(avctx, picture, got_picture_ptr,&amp;tmp)这句代码，调用了相应AVCodec的decode()函数，完成了解码操作。</span></span><br><span class="line"><span class="comment">//（3）对得到的AVFrame的一些字段进行了赋值，例如宽高、像素格式等等。</span></span><br><span class="line">ret = avcodec_decode_video2(pCodecCtx, pFrame, &amp;got_picture, packet);</span><br><span class="line"><span class="keyword">if</span>(ret &lt; <span class="number">0</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Decode Error.\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(got_picture)&#123;</span><br><span class="line">                <span class="comment">// sws_scale()是用于转换像素的函数</span></span><br><span class="line">                <span class="comment">// 参数说明：</span></span><br><span class="line">                <span class="comment">// 1）转换格式的上下文。也就是 sws_getContext 函数返回的结果。</span></span><br><span class="line">                <span class="comment">// 2）输入图像的每个颜色通道的数据指针</span></span><br><span class="line">                <span class="comment">// 3）输入图像的每个颜色通道的跨度</span></span><br><span class="line">                <span class="comment">// 4）参数int srcSliceY, int srcSliceH,定义在输入图像上处理区域，srcSliceY是起始位置，srcSliceH是处理多少行。</span></span><br><span class="line">                <span class="comment">// 如果srcSliceY=0，srcSliceH=height，表示一次性处理完整个图像。// 这种设置是为了多线程并行，例如可以创建两个线程，第一个线程处理 [0, h/2-1]行，第二个线程处理 [h/2, h-1]行。并行处理加快速度。</span></span><br><span class="line">                <span class="comment">// 5）参数uint8_t *const dst[], const int dstStride[]定义输出图像信息（输出的每个颜色通道数据指针，每个颜色通道行字节数）</span></span><br><span class="line">sws_scale(img_convert_ctx, </span><br><span class="line">                          (<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* <span class="type">const</span>*)pFrame-&gt;data, </span><br><span class="line">                          pFrame-&gt;linesize, <span class="number">0</span>, pCodecCtx-&gt;height, </span><br><span class="line">                          pFrameYUV-&gt;data, pFrameYUV-&gt;linesize);</span><br><span class="line"><span class="comment">//SDL---------------------------</span></span><br><span class="line">SDL_UpdateTexture( sdlTexture, <span class="literal">NULL</span>, pFrameYUV-&gt;data[<span class="number">0</span>], pFrameYUV-&gt;linesize[<span class="number">0</span>] );  </span><br><span class="line">SDL_RenderClear( sdlRenderer );  </span><br><span class="line"><span class="comment">//SDL_RenderCopy( sdlRenderer, sdlTexture, &amp;sdlRect, &amp;sdlRect );  </span></span><br><span class="line">SDL_RenderCopy( sdlRenderer, sdlTexture, <span class="literal">NULL</span>, <span class="literal">NULL</span>);  </span><br><span class="line">SDL_RenderPresent( sdlRenderer );  </span><br><span class="line"><span class="comment">//SDL End-----------------------</span></span><br><span class="line">&#125;</span><br><span class="line">av_free_packet(packet);</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.type == SDL_KEYDOWN)&#123;</span><br><span class="line"><span class="comment">//Pause</span></span><br><span class="line"><span class="keyword">if</span>(event.key.keysym.sym == SDLK_SPACE)</span><br><span class="line">thread_pause =! thread_pause;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.type == SDL_QUIT)&#123;</span><br><span class="line">thread_exit = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(event.type == SFM_BREAK_EVENT)&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">sws_freeContext(img_convert_ctx);</span><br><span class="line"> </span><br><span class="line">SDL_Quit();</span><br><span class="line"><span class="comment">//--------------</span></span><br><span class="line">av_frame_free(&amp;pFrameYUV);</span><br><span class="line">av_frame_free(&amp;pFrame);</span><br><span class="line">avcodec_close(pCodecCtx);</span><br><span class="line">avformat_close_input(&amp;pFormatCtx);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><h3 id="1-2-1-av-read-packet"><a href="#1-2-1-av-read-packet" class="headerlink" title="1.2.1 av_read_packet()"></a>1.2.1 av_read_packet()</h3><p>通过 <code>av_read_packet()</code>，读取一个包，需要说明的是此函数必须是包含整数帧的，不存在半帧的情况。</p><p>以 ts 流为例，是读取一个完整的 PES 包（一个完整 pes 包包含若干视频或音频 es 包），读取完毕后，通过 <code>av_parser_parse2()</code> 分析出视频一帧（或音频若干帧），返回，下次进入循环的时候，如果上次的数据没有完全取完，则 <code>st = s-&gt;cur_st</code> ; 不会是NULL，即再此进入 <code>av_parser_parse2()</code> 流程，而不是下面的 <code>av_read_packet（）</code> 流程.</p><p>这样就保证了，如果读取一次包含了 N 帧视频数据（以视频为例），则调用 <code>av_read_frame（）</code> N 次都不会去读数据，而是返回第一次读取的数据，直到全部解析完毕。</p><p>函数调用结构图：</p><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/av_read_packet.png" class="" title="av_read_packet"><h2 id="1-3-FFmpeg-源码分析"><a href="#1-3-FFmpeg-源码分析" class="headerlink" title="1.3 FFmpeg 源码分析"></a>1.3 FFmpeg 源码分析</h2><h3 id="1-3-1-av-register-all"><a href="#1-3-1-av-register-all" class="headerlink" title="1.3.1 av_register_all()"></a>1.3.1 av_register_all()</h3><ul><li><code>av_register_all()</code> - ffmpeg注册复用器，编码器</li></ul><p>该函数在所有基于ffmpeg的应用程序中几乎都是第一个被调用的。只有调用了该函数，才能使用复用器，编码器等。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可见解复用器注册都是用</span></span><br><span class="line">REGISTER_DEMUXER  (X,x)</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">REGISTER_DEMUXER  (AAC, aac)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见复用器注册都是用</span></span><br><span class="line">REGISTER_MUXER    (X,x))</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">REGISTER_MUXER    (ADTS, adts)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 既有解复用器又有复用器的话，可以用</span></span><br><span class="line">REGISTER_MUXDEMUX (X,x));</span><br><span class="line"><span class="comment">// 例如：</span></span><br><span class="line">REGISTER_MUXDEMUX (AC3, ac3);</span><br></pre></td></tr></table></figure><p>看一下宏的定义，这里以<strong>解复用器</strong>为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_DEMUXER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">    extern AVInputFormat ff_##x##_demuxer; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(CONFIG_##X##_DEMUXER) av_register_input_format(&amp;ff_##x##_demuxer); &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 注意：define 里面的##可能不太常见，它的含义就是拼接两个字符串，比如</span></span><br><span class="line"><span class="comment"> * #define Conn(x,y) x##y</span></span><br><span class="line"><span class="comment"> * 那么</span></span><br><span class="line"><span class="comment"> * int n = Conn(123,456);  结果就是 n = 123456;</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><p>我们以 <code>REGISTER_DEMUXER  (AAC, aac)</code> 为例，则它等效于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> AVInputFormat ff_aac_demuxer; </span><br><span class="line"><span class="keyword">if</span>(CONFIG_AAC_DEMUXER) av_register_input_format(&amp;ff_aac_demuxer);</span><br></pre></td></tr></table></figure><p>从上面这段代码我们可以看出，真正注册的函数是 <code>av_register_input_format(&amp;ff_aac_demuxer)</code>，那我就看看这个和函数的作用，查看一下 <code>av_register_input_format()</code> 的代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_register_input_format</span><span class="params">(AVInputFormat *format)</span></span><br><span class="line">&#123;</span><br><span class="line">    AVInputFormat **p;</span><br><span class="line">    p = &amp;first_iformat;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="literal">NULL</span>) p = &amp;(*p)-&gt;next;</span><br><span class="line">    *p = format;</span><br><span class="line">    format-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是比较容易理解的，首先先提一点，first_iformat 是个什么东东呢？其实它是 Input Format 链表的头部地址，是一个全局静态变量，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** head of registered input format linked list */</span></span><br><span class="line"><span class="type">static</span> AVInputFormat *first_iformat = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>由此我们可以分析出 <code>av_register_input_format()</code> 的含义，一句话概括就是：</p><ul><li>遍历链表并把当前的 Input Format 加到链表的尾部。</li></ul><p>至此 <code>REGISTER_DEMUXER  (X, x)</code> 分析完毕。</p><p>同理，<strong>复用器</strong>道理是一样的，只是注册函数改为 <code>av_register_output_format()</code>；</p><p><strong>既有解复用器又有复用器</strong>的话，有一个宏定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_MUXDEMUX(X,x)  REGISTER_MUXER(X,x); REGISTER_DEMUXER(X,x)</span></span><br></pre></td></tr></table></figure><p>可见是分别注册了复用器和解复用器。</p><p>此外还有网络协议的注册，注册函数为 <code>ffurl_register_protocol()</code>，在此不再详述。</p><details><summary>下面贴出它的源代码（allformats.c）</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;avformat.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rtp.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;rdt.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;url.h&quot;</span></span></span><br><span class="line"><span class="comment">// 定义的宏？宏的速度会快一点？注册 AVOutputFormat</span></span><br><span class="line"><span class="comment">// define中，#用来把参数转换成字符串，##则用来连接前后两个参数，把它们变成一个字符串。</span></span><br><span class="line"><span class="comment">// 感觉有点像JAva中的EL，可以随意拼接字符串</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_MUXER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">    extern AVOutputFormat ff_##x##_muxer; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(CONFIG_##X##_MUXER) av_register_output_format(&amp;ff_##x##_muxer); &#125;</span></span><br><span class="line"><span class="comment">// 定义的宏？宏的速度会快一点？注册AVInputFormat</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_DEMUXER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">    extern AVInputFormat ff_##x##_demuxer; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(CONFIG_##X##_DEMUXER) av_register_input_format(&amp;ff_##x##_demuxer); &#125;</span></span><br><span class="line"><span class="comment">// 注册函数 av_register_input_format</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义的宏？宏的速度会快一点？两个一起注册！</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_MUXDEMUX(X,x)  REGISTER_MUXER(X,x); REGISTER_DEMUXER(X,x)</span></span><br><span class="line"><span class="comment">// 定义的宏？宏的速度会快一点？注册URLProtocol</span></span><br><span class="line"><span class="comment">// extern URLProtocol ff_##x##_protocol;</span></span><br><span class="line"><span class="comment">// 在 librtmp 中，对应的就是 ff_rtmp_protocol</span></span><br><span class="line"><span class="comment">// 这样就把 librtmp 整合起来了</span></span><br><span class="line"><span class="comment">// 由此可见 URLProtocol 的名字是固定的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_PROTOCOL(X,x) &#123; \</span></span><br><span class="line"><span class="meta">    extern URLProtocol ff_##x##_protocol; \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span>(CONFIG_##X##_PROTOCOL) ffurl_register_protocol(&amp;ff_##x##_protocol, sizeof(ff_##x##_protocol)); &#125;</span></span><br><span class="line"><span class="comment">// 注册函数 ffurl_register_protocol</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">av_register_all</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> initialized;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (initialized)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 注册所有的 codec</span></span><br><span class="line">    avcodec_register_all();</span><br><span class="line">    <span class="comment">// 注册所有的 MUXER（复用器和解复用器）</span></span><br><span class="line">    <span class="comment">/* (de)muxers */</span></span><br><span class="line">    REGISTER_MUXER    (A64, a64);</span><br><span class="line">    REGISTER_DEMUXER  (AAC, aac);</span><br><span class="line">    REGISTER_MUXDEMUX (AC3, ac3);</span><br><span class="line">    REGISTER_DEMUXER  (ACT, act);</span><br><span class="line">    REGISTER_DEMUXER  (ADF, adf);</span><br><span class="line">    REGISTER_MUXER    (ADTS, adts);</span><br><span class="line">    REGISTER_MUXDEMUX (ADX, adx);</span><br><span class="line">    REGISTER_DEMUXER  (AEA, aea);</span><br><span class="line">    REGISTER_MUXDEMUX (AIFF, aiff);</span><br><span class="line">    REGISTER_MUXDEMUX (AMR, amr);</span><br><span class="line">    REGISTER_DEMUXER  (ANM, anm);</span><br><span class="line">    REGISTER_DEMUXER  (APC, apc);</span><br><span class="line">    REGISTER_DEMUXER  (APE, ape);</span><br><span class="line">    REGISTER_DEMUXER  (APPLEHTTP, applehttp);</span><br><span class="line">    REGISTER_MUXDEMUX (ASF, asf);</span><br><span class="line">    REGISTER_MUXDEMUX (ASS, ass);</span><br><span class="line">    REGISTER_MUXER    (ASF_STREAM, asf_stream);</span><br><span class="line">    REGISTER_MUXDEMUX (AU, au);</span><br><span class="line">    REGISTER_MUXDEMUX (AVI, avi);</span><br><span class="line">    REGISTER_DEMUXER  (AVISYNTH, avisynth);</span><br><span class="line">    REGISTER_MUXER    (AVM2, avm2);</span><br><span class="line">    REGISTER_DEMUXER  (AVS, avs);</span><br><span class="line">    REGISTER_DEMUXER  (BETHSOFTVID, bethsoftvid);</span><br><span class="line">    REGISTER_DEMUXER  (BFI, bfi);</span><br><span class="line">    REGISTER_DEMUXER  (BINTEXT, bintext);</span><br><span class="line">    REGISTER_DEMUXER  (BINK, bink);</span><br><span class="line">    REGISTER_MUXDEMUX (BIT, bit);</span><br><span class="line">    REGISTER_DEMUXER  (BMV, bmv);</span><br><span class="line">    REGISTER_DEMUXER  (C93, c93);</span><br><span class="line">    REGISTER_MUXDEMUX (CAF, caf);</span><br><span class="line">    REGISTER_MUXDEMUX (CAVSVIDEO, cavsvideo);</span><br><span class="line">    REGISTER_DEMUXER  (CDG, cdg);</span><br><span class="line">    REGISTER_MUXER    (CRC, crc);</span><br><span class="line">    REGISTER_MUXDEMUX (DAUD, daud);</span><br><span class="line">    REGISTER_DEMUXER  (DFA, dfa);</span><br><span class="line">    REGISTER_MUXDEMUX (DIRAC, dirac);</span><br><span class="line">    REGISTER_MUXDEMUX (DNXHD, dnxhd);</span><br><span class="line">    REGISTER_DEMUXER  (DSICIN, dsicin);</span><br><span class="line">    REGISTER_MUXDEMUX (DTS, dts);</span><br><span class="line">    REGISTER_MUXDEMUX (DV, dv);</span><br><span class="line">    REGISTER_DEMUXER  (DXA, dxa);</span><br><span class="line">    REGISTER_DEMUXER  (EA, ea);</span><br><span class="line">    REGISTER_DEMUXER  (EA_CDATA, ea_cdata);</span><br><span class="line">    REGISTER_MUXDEMUX (EAC3, eac3);</span><br><span class="line">    REGISTER_MUXDEMUX (FFM, ffm);</span><br><span class="line">    REGISTER_MUXDEMUX (FFMETADATA, ffmetadata);</span><br><span class="line">    REGISTER_MUXDEMUX (FILMSTRIP, filmstrip);</span><br><span class="line">    REGISTER_MUXDEMUX (FLAC, flac);</span><br><span class="line">    REGISTER_DEMUXER  (FLIC, flic);</span><br><span class="line">    REGISTER_MUXDEMUX (FLV, flv);</span><br><span class="line">    REGISTER_DEMUXER  (FOURXM, fourxm);</span><br><span class="line">    REGISTER_MUXER    (FRAMECRC, framecrc);</span><br><span class="line">    REGISTER_MUXER    (FRAMEMD5, framemd5);</span><br><span class="line">    REGISTER_MUXDEMUX (G722, g722);</span><br><span class="line">    REGISTER_MUXDEMUX (G723_1, g723_1);</span><br><span class="line">    REGISTER_DEMUXER  (G729, g729);</span><br><span class="line">    REGISTER_MUXER    (GIF, gif);</span><br><span class="line">    REGISTER_DEMUXER  (GSM, gsm);</span><br><span class="line">    REGISTER_MUXDEMUX (GXF, gxf);</span><br><span class="line">    REGISTER_MUXDEMUX (H261, h261);</span><br><span class="line">    REGISTER_MUXDEMUX (H263, h263);</span><br><span class="line">    REGISTER_MUXDEMUX (H264, h264);</span><br><span class="line">    REGISTER_DEMUXER  (ICO, ico);</span><br><span class="line">    REGISTER_DEMUXER  (IDCIN, idcin);</span><br><span class="line">    REGISTER_DEMUXER  (IDF, idf);</span><br><span class="line">    REGISTER_DEMUXER  (IFF, iff);</span><br><span class="line">    REGISTER_MUXDEMUX (IMAGE2, image2);</span><br><span class="line">    REGISTER_MUXDEMUX (IMAGE2PIPE, image2pipe);</span><br><span class="line">    REGISTER_DEMUXER  (INGENIENT, ingenient);</span><br><span class="line">    REGISTER_DEMUXER  (IPMOVIE, ipmovie);</span><br><span class="line">    REGISTER_MUXER    (IPOD, ipod);</span><br><span class="line">    REGISTER_MUXER    (ISMV, ismv);</span><br><span class="line">    REGISTER_DEMUXER  (ISS, iss);</span><br><span class="line">    REGISTER_DEMUXER  (IV8, iv8);</span><br><span class="line">    REGISTER_MUXDEMUX (IVF, ivf);</span><br><span class="line">    REGISTER_DEMUXER  (JV, jv);</span><br><span class="line">    REGISTER_MUXDEMUX (LATM, latm);</span><br><span class="line">    REGISTER_DEMUXER  (LMLM4, lmlm4);</span><br><span class="line">    REGISTER_DEMUXER  (LOAS, loas);</span><br><span class="line">    REGISTER_DEMUXER  (LXF, lxf);</span><br><span class="line">    REGISTER_MUXDEMUX (M4V, m4v);</span><br><span class="line">    REGISTER_MUXER    (MD5, md5);</span><br><span class="line">    REGISTER_MUXDEMUX (MATROSKA, matroska);</span><br><span class="line">    REGISTER_MUXER    (MATROSKA_AUDIO, matroska_audio);</span><br><span class="line">    REGISTER_MUXDEMUX (MICRODVD, microdvd);</span><br><span class="line">    REGISTER_MUXDEMUX (MJPEG, mjpeg);</span><br><span class="line">    REGISTER_MUXDEMUX (MLP, mlp);</span><br><span class="line">    REGISTER_DEMUXER  (MM, mm);</span><br><span class="line">    REGISTER_MUXDEMUX (MMF, mmf);</span><br><span class="line">    REGISTER_MUXDEMUX (MOV, mov);</span><br><span class="line">    REGISTER_MUXER    (MP2, mp2);</span><br><span class="line">    REGISTER_MUXDEMUX (MP3, mp3);</span><br><span class="line">    REGISTER_MUXER    (MP4, mp4);</span><br><span class="line">    REGISTER_DEMUXER  (MPC, mpc);</span><br><span class="line">    REGISTER_DEMUXER  (MPC8, mpc8);</span><br><span class="line">    REGISTER_MUXER    (MPEG1SYSTEM, mpeg1system);</span><br><span class="line">    REGISTER_MUXER    (MPEG1VCD, mpeg1vcd);</span><br><span class="line">    REGISTER_MUXER    (MPEG1VIDEO, mpeg1video);</span><br><span class="line">    REGISTER_MUXER    (MPEG2DVD, mpeg2dvd);</span><br><span class="line">    REGISTER_MUXER    (MPEG2SVCD, mpeg2svcd);</span><br><span class="line">    REGISTER_MUXER    (MPEG2VIDEO, mpeg2video);</span><br><span class="line">    REGISTER_MUXER    (MPEG2VOB, mpeg2vob);</span><br><span class="line">    REGISTER_DEMUXER  (MPEGPS, mpegps);</span><br><span class="line">    REGISTER_MUXDEMUX (MPEGTS, mpegts);</span><br><span class="line">    REGISTER_DEMUXER  (MPEGTSRAW, mpegtsraw);</span><br><span class="line">    REGISTER_DEMUXER  (MPEGVIDEO, mpegvideo);</span><br><span class="line">    REGISTER_MUXER    (MPJPEG, mpjpeg);</span><br><span class="line">    REGISTER_DEMUXER  (MSNWC_TCP, msnwc_tcp);</span><br><span class="line">    REGISTER_DEMUXER  (MTV, mtv);</span><br><span class="line">    REGISTER_DEMUXER  (MVI, mvi);</span><br><span class="line">    REGISTER_MUXDEMUX (MXF, mxf);</span><br><span class="line">    REGISTER_MUXER    (MXF_D10, mxf_d10);</span><br><span class="line">    REGISTER_DEMUXER  (MXG, mxg);</span><br><span class="line">    REGISTER_DEMUXER  (NC, nc);</span><br><span class="line">    REGISTER_DEMUXER  (NSV, nsv);</span><br><span class="line">    REGISTER_MUXER    (<span class="literal">NULL</span>, null);</span><br><span class="line">    REGISTER_MUXDEMUX (NUT, nut);</span><br><span class="line">    REGISTER_DEMUXER  (NUV, nuv);</span><br><span class="line">    REGISTER_MUXDEMUX (OGG, ogg);</span><br><span class="line">    REGISTER_MUXDEMUX (OMA, oma);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_ALAW,  pcm_alaw);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_MULAW, pcm_mulaw);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_F64BE, pcm_f64be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_F64LE, pcm_f64le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_F32BE, pcm_f32be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_F32LE, pcm_f32le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S32BE, pcm_s32be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S32LE, pcm_s32le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S24BE, pcm_s24be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S24LE, pcm_s24le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S16BE, pcm_s16be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S16LE, pcm_s16le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_S8,    pcm_s8);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U32BE, pcm_u32be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U32LE, pcm_u32le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U24BE, pcm_u24be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U24LE, pcm_u24le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U16BE, pcm_u16be);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U16LE, pcm_u16le);</span><br><span class="line">    REGISTER_MUXDEMUX (PCM_U8,    pcm_u8);</span><br><span class="line">    REGISTER_DEMUXER  (PMP, pmp);</span><br><span class="line">    REGISTER_MUXER    (PSP, psp);</span><br><span class="line">    REGISTER_DEMUXER  (PVA, pva);</span><br><span class="line">    REGISTER_DEMUXER  (QCP, qcp);</span><br><span class="line">    REGISTER_DEMUXER  (R3D, r3d);</span><br><span class="line">    REGISTER_MUXDEMUX (RAWVIDEO, rawvideo);</span><br><span class="line">    REGISTER_DEMUXER  (RL2, rl2);</span><br><span class="line">    REGISTER_MUXDEMUX (RM, rm);</span><br><span class="line">    REGISTER_MUXDEMUX (ROQ, roq);</span><br><span class="line">    REGISTER_DEMUXER  (RPL, rpl);</span><br><span class="line">    REGISTER_MUXDEMUX (RSO, rso);</span><br><span class="line">    REGISTER_MUXDEMUX (RTP, rtp);</span><br><span class="line">    REGISTER_MUXDEMUX (RTSP, rtsp);</span><br><span class="line">    REGISTER_MUXDEMUX (SAP, sap);</span><br><span class="line">    REGISTER_DEMUXER  (SBG, sbg);</span><br><span class="line">    REGISTER_DEMUXER  (SDP, sdp);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_RTPDEC</span></span><br><span class="line">    av_register_rtp_dynamic_payload_handlers();</span><br><span class="line">    av_register_rdt_dynamic_payload_handlers();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    REGISTER_DEMUXER  (SEGAFILM, segafilm);</span><br><span class="line">    REGISTER_MUXER    (SEGMENT, segment);</span><br><span class="line">    REGISTER_DEMUXER  (SHORTEN, shorten);</span><br><span class="line">    REGISTER_DEMUXER  (SIFF, siff);</span><br><span class="line">    REGISTER_DEMUXER  (SMACKER, smacker);</span><br><span class="line">    REGISTER_MUXDEMUX (SMJPEG, smjpeg);</span><br><span class="line">    REGISTER_DEMUXER  (SOL, sol);</span><br><span class="line">    REGISTER_MUXDEMUX (SOX, sox);</span><br><span class="line">    REGISTER_MUXDEMUX (SPDIF, spdif);</span><br><span class="line">    REGISTER_MUXDEMUX (SRT, srt);</span><br><span class="line">    REGISTER_DEMUXER  (STR, str);</span><br><span class="line">    REGISTER_MUXDEMUX (SWF, swf);</span><br><span class="line">    REGISTER_MUXER    (TG2, tg2);</span><br><span class="line">    REGISTER_MUXER    (TGP, tgp);</span><br><span class="line">    REGISTER_DEMUXER  (THP, thp);</span><br><span class="line">    REGISTER_DEMUXER  (TIERTEXSEQ, tiertexseq);</span><br><span class="line">    REGISTER_MUXER    (MKVTIMESTAMP_V2, mkvtimestamp_v2);</span><br><span class="line">    REGISTER_DEMUXER  (TMV, tmv);</span><br><span class="line">    REGISTER_MUXDEMUX (TRUEHD, truehd);</span><br><span class="line">    REGISTER_DEMUXER  (TTA, tta);</span><br><span class="line">    REGISTER_DEMUXER  (TXD, txd);</span><br><span class="line">    REGISTER_DEMUXER  (TTY, tty);</span><br><span class="line">    REGISTER_DEMUXER  (VC1, vc1);</span><br><span class="line">    REGISTER_MUXDEMUX (VC1T, vc1t);</span><br><span class="line">    REGISTER_DEMUXER  (VMD, vmd);</span><br><span class="line">    REGISTER_MUXDEMUX (VOC, voc);</span><br><span class="line">    REGISTER_DEMUXER  (VQF, vqf);</span><br><span class="line">    REGISTER_DEMUXER  (W64, w64);</span><br><span class="line">    REGISTER_MUXDEMUX (WAV, wav);</span><br><span class="line">    REGISTER_DEMUXER  (WC3, wc3);</span><br><span class="line">    REGISTER_MUXER    (WEBM, webm);</span><br><span class="line">    REGISTER_DEMUXER  (WSAUD, wsaud);</span><br><span class="line">    REGISTER_DEMUXER  (WSVQA, wsvqa);</span><br><span class="line">    REGISTER_MUXDEMUX (WTV, wtv);</span><br><span class="line">    REGISTER_DEMUXER  (WV, wv);</span><br><span class="line">    REGISTER_DEMUXER  (XA, xa);</span><br><span class="line">    REGISTER_DEMUXER  (XBIN, xbin);</span><br><span class="line">    REGISTER_DEMUXER  (XMV, xmv);</span><br><span class="line">    REGISTER_DEMUXER  (XWMA, xwma);</span><br><span class="line">    REGISTER_DEMUXER  (YOP, yop);</span><br><span class="line">    REGISTER_MUXDEMUX (YUV4MPEGPIPE, yuv4mpegpipe);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* external libraries */</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_LIBMODPLUG</span></span><br><span class="line">    REGISTER_DEMUXER  (LIBMODPLUG, libmodplug);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    REGISTER_MUXDEMUX (LIBNUT, libnut);</span><br><span class="line">    <span class="comment">// 注册所有的 Protocol（位于 DEMUXER 之前（我的理解~~））</span></span><br><span class="line">    <span class="comment">// 文件也是一种Protocol</span></span><br><span class="line">    <span class="comment">/* protocols */</span></span><br><span class="line">    REGISTER_PROTOCOL (APPLEHTTP, applehttp);</span><br><span class="line">    REGISTER_PROTOCOL (CACHE, cache);</span><br><span class="line">    REGISTER_PROTOCOL (CONCAT, concat);</span><br><span class="line">    REGISTER_PROTOCOL (CRYPTO, crypto);</span><br><span class="line">    REGISTER_PROTOCOL (FILE, file);</span><br><span class="line">    REGISTER_PROTOCOL (GOPHER, gopher);</span><br><span class="line">    REGISTER_PROTOCOL (HTTP, http);</span><br><span class="line">    REGISTER_PROTOCOL (HTTPPROXY, httpproxy);</span><br><span class="line">    REGISTER_PROTOCOL (HTTPS, https);</span><br><span class="line">    REGISTER_PROTOCOL (MMSH, mmsh);</span><br><span class="line">    REGISTER_PROTOCOL (MMST, mmst);</span><br><span class="line">    REGISTER_PROTOCOL (MD5,  md5);</span><br><span class="line">    REGISTER_PROTOCOL (PIPE, pipe);</span><br><span class="line">    REGISTER_PROTOCOL (RTMP, rtmp);</span><br><span class="line"><span class="comment">// 如果包含了 LibRTMP</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> CONFIG_LIBRTMP</span></span><br><span class="line">    REGISTER_PROTOCOL (RTMP, rtmpt);</span><br><span class="line">    REGISTER_PROTOCOL (RTMP, rtmpe);</span><br><span class="line">    REGISTER_PROTOCOL (RTMP, rtmpte);</span><br><span class="line">    REGISTER_PROTOCOL (RTMP, rtmps);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    REGISTER_PROTOCOL (RTP, rtp);</span><br><span class="line">    REGISTER_PROTOCOL (TCP, tcp);</span><br><span class="line">    REGISTER_PROTOCOL (TLS, tls);</span><br><span class="line">    REGISTER_PROTOCOL (UDP, udp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>整个代码没太多可说的，首先确定是不是已经初始化过了（initialized），如果没有，就调用 <code>avcodec_register_all()</code> 注册编解码器（这个先不分析），然后就是注册，注册，注册…直到完成所有注册。</p><p>PS：曾经研究过一阵子 RTMP 协议，以及对应的开源工程 librtmp。在这里发现有一点值得注意，ffmpeg自带了 RTMP 协议的支持，只有使用 <code>rtmpt://, rtmpe://, rtmpte://</code> 等的时候才会使用 librtmp 库。</p><p>函数调用关系图如下图所示。<code>av_register_all()</code> 调用了 <code>avcodec_register_all()</code> 。 <code>avcodec_register_all()</code> 注册了和编解码器有关的组件：硬件加速器，解码器，编码器，Parser，Bitstream Filter。<code>av_register_all()</code> 除了调用 <code>avcodec_register_all()</code> 之外，还注册了复用器，解复用器，协议处理器。</p><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/av_register_all.png" class="" title="av_register_all"><p>下面附上复用器，解复用器，协议处理器的代码。</p><p>注册复用器的函数是 <code>av_register_output_format()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_register_output_format</span><span class="params">(AVOutputFormat *format)</span></span><br><span class="line">&#123;</span><br><span class="line">    AVOutputFormat **p;</span><br><span class="line">    p = &amp;first_oformat;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="literal">NULL</span>) p = &amp;(*p)-&gt;next;</span><br><span class="line">    *p = format;</span><br><span class="line">    format-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册解复用器的函数是 <code>av_register_input_format()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_register_input_format</span><span class="params">(AVInputFormat *format)</span></span><br><span class="line">&#123;</span><br><span class="line">    AVInputFormat **p;</span><br><span class="line">    p = &amp;first_iformat;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="literal">NULL</span>) p = &amp;(*p)-&gt;next;</span><br><span class="line">    *p = format;</span><br><span class="line">    format-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注册协议处理器的函数是 <code>ffurl_register_protocol()</code> 。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">ffurl_register_protocol</span><span class="params">(URLProtocol *protocol)</span></span><br><span class="line">&#123;</span><br><span class="line">    URLProtocol **p;</span><br><span class="line">    p = &amp;first_protocol;</span><br><span class="line">    <span class="keyword">while</span> (*p)</span><br><span class="line">        p = &amp;(*p)-&gt;next;</span><br><span class="line">    *p = protocol;</span><br><span class="line">    protocol-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-3-2-avcodec-register-all"><a href="#1-3-2-avcodec-register-all" class="headerlink" title="1.3.2 avcodec_register_all()"></a>1.3.2 avcodec_register_all()</h3><p>ffmpeg注册编解码器等的函数 <code>avcodec_register_all()</code>（注意不是 <code>av_register_all()</code>，那是注册所有东西的）。该函数在所有基于ffmpeg的应用程序中几乎都是第一个被调用的。只有调用了该函数，才能使用编解码器等。</p><p>其实注册编解码器和注册复用器解复用器道理是差不多的，重复的内容不再多说。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 编码器的注册是：</span></span><br><span class="line">REGISTER_ENCODER (X,x);REGISTER_ENCODER (LJPEG, ljpeg);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解码器的注册是：</span></span><br><span class="line">REGISTER_DECODER (X,x);REGISTER_DECODER (H264, h264);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 既包含编码器有包含解码器的注册是：</span></span><br><span class="line">REGISTER_ENCDEC  (X,x);REGISTER_ENCDEC  (BMP, bmp);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 此外还有几种注册：</span></span><br><span class="line"><span class="comment">// Parser：</span></span><br><span class="line">REGISTER_PARSER  (X,x);REGISTER_PARSER  (H264, h264);</span><br><span class="line"></span><br><span class="line"><span class="comment">// BSF（bitstream filters，比特流滤镜，有一个常用：h264_mp4toannexb）：</span></span><br><span class="line">REGISTER_BSF     (X,x);REGISTER_BSF (H264_MP4TOANNEXB, h264_mp4toannexb);</span><br><span class="line"></span><br><span class="line"><span class="comment">// HWACCEL（hardware accelerators，硬件加速器）：</span></span><br><span class="line">REGISTER_HWACCEL (X,x);REGISTER_HWACCEL (H264_DXVA2, h264_dxva2);</span><br></pre></td></tr></table></figure><p>我们来看一下宏的定义，这里以编解码器为例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_ENCODER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVCodec ff_##x##_encoder; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_ENCODER)  avcodec_register(&amp;ff_##x##_encoder); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_DECODER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVCodec ff_##x##_decoder; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_DECODER)  avcodec_register(&amp;ff_##x##_decoder); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_ENCDEC(X,x)  REGISTER_ENCODER(X,x); REGISTER_DECODER(X,x)</span></span><br></pre></td></tr></table></figure><p>在这里，我发现其实编码器和解码器用的注册函数都是一样的：<code>avcodec_register()</code></p><p>以 <code>REGISTER_DECODER (H264, h264)</code> 为例，就是等效于</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> AVCodec ff_h264_decoder; </span><br><span class="line"><span class="keyword">if</span>(CONFIG_H264_DECODER)  avcodec_register(&amp;ff_h264_decoder);</span><br></pre></td></tr></table></figure><p>下面看一下 <code>avcodec_register()</code> 的源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注册所有的AVCodec</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">avcodec_register</span><span class="params">(AVCodec *codec)</span></span><br><span class="line">&#123;</span><br><span class="line">    AVCodec **p;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    avcodec_init();</span><br><span class="line">    <span class="comment">//从第一个开始</span></span><br><span class="line">    p = &amp;first_avcodec;</span><br><span class="line">    <span class="keyword">while</span> (*p != <span class="literal">NULL</span>) p = &amp;(*p)-&gt;next;</span><br><span class="line">    *p = codec;</span><br><span class="line">    codec-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (codec-&gt;init_static_data)</span><br><span class="line">        codec-&gt;init_static_data(codec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码是比较容易理解的。首先先提一点，first_avcdec 是就是 AVCodec 链表的头部地址，是一个全局静态变量，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* encoder management */</span></span><br><span class="line"><span class="type">static</span> AVCodec *first_avcodec = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><p>由此我们可以分析出avcodec_register()的含义，一句话概括就是：遍历链表并把当前的AVCodec加到链表的尾部。</p><p>同理，<strong>Parser，BSF（bitstream filters，比特流滤镜），HWACCEL（hardware accelerators，硬件加速器）</strong>的注册方式都是类似的。不再详述。</p><details><summary>下面贴出它的原代码：</summary><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;avcodec.h&quot;</span></span></span><br><span class="line"><span class="comment">// 硬件加速</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_HWACCEL(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVHWAccel ff_##x##_hwaccel; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_HWACCEL) av_register_hwaccel(&amp;ff_##x##_hwaccel); &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_ENCODER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVCodec ff_##x##_encoder; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_ENCODER)  avcodec_register(&amp;ff_##x##_encoder); &#125;</span></span><br><span class="line"><span class="comment">// 定义的宏？宏的速度会快一点？注册AVCodec</span></span><br><span class="line"><span class="comment">// extern AVCodec ff_##x##_decoder;</span></span><br><span class="line"><span class="comment">// 注意：extern 表明全局唯一</span></span><br><span class="line"><span class="comment">// 在h264中，对应的就是 ff_h264_decoder</span></span><br><span class="line"><span class="comment">// 由此可见 AVCodecParser 的名字是固定的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_DECODER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVCodec ff_##x##_decoder; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_DECODER)  avcodec_register(&amp;ff_##x##_decoder); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_ENCDEC(X,x)  REGISTER_ENCODER(X,x); REGISTER_DECODER(X,x)</span></span><br><span class="line"><span class="comment">// 定义的宏？宏的速度会快一点？注册AVCodecParser</span></span><br><span class="line"><span class="comment">// extern AVCodecParser ff_##x##_parser;</span></span><br><span class="line"><span class="comment">// 在h264中，对应的就是ff_h264_parser</span></span><br><span class="line"><span class="comment">// 由此可见AVCodecParser的名字是固定的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_PARSER(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVCodecParser ff_##x##_parser; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_PARSER)  av_register_codec_parser(&amp;ff_##x##_parser); &#125;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> REGISTER_BSF(X,x) &#123; \</span></span><br><span class="line"><span class="meta">          extern AVBitStreamFilter ff_##x##_bsf; \</span></span><br><span class="line"><span class="meta">          <span class="keyword">if</span>(CONFIG_##X##_BSF)     av_register_bitstream_filter(&amp;ff_##x##_bsf); &#125;</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">avcodec_register_all</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">int</span> initialized;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (initialized)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    initialized = <span class="number">1</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* hardware accelerators */</span></span><br><span class="line">    REGISTER_HWACCEL (H263_VAAPI, h263_vaapi);</span><br><span class="line">    REGISTER_HWACCEL (H264_DXVA2, h264_dxva2);</span><br><span class="line">    REGISTER_HWACCEL (H264_VAAPI, h264_vaapi);</span><br><span class="line">    REGISTER_HWACCEL (H264_VDA, h264_vda);</span><br><span class="line">    REGISTER_HWACCEL (MPEG1_VDPAU, mpeg1_vdpau);</span><br><span class="line">    REGISTER_HWACCEL (MPEG2_DXVA2, mpeg2_dxva2);</span><br><span class="line">    REGISTER_HWACCEL (MPEG2_VAAPI, mpeg2_vaapi);</span><br><span class="line">    REGISTER_HWACCEL (MPEG2_VDPAU, mpeg2_vdpau);</span><br><span class="line">    REGISTER_HWACCEL (MPEG4_VAAPI, mpeg4_vaapi);</span><br><span class="line">    REGISTER_HWACCEL (VC1_DXVA2, vc1_dxva2);</span><br><span class="line">    REGISTER_HWACCEL (VC1_VAAPI, vc1_vaapi);</span><br><span class="line">    REGISTER_HWACCEL (WMV3_DXVA2, wmv3_dxva2);</span><br><span class="line">    REGISTER_HWACCEL (WMV3_VAAPI, wmv3_vaapi);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* video codecs */</span></span><br><span class="line">    REGISTER_ENCODER (A64MULTI, a64multi);</span><br><span class="line">    REGISTER_ENCODER (A64MULTI5, a64multi5);</span><br><span class="line">    REGISTER_DECODER (AASC, aasc);</span><br><span class="line">    REGISTER_ENCDEC  (AMV, amv);</span><br><span class="line">    REGISTER_DECODER (ANM, anm);</span><br><span class="line">    REGISTER_DECODER (ANSI, ansi);</span><br><span class="line">    REGISTER_ENCDEC  (ASV1, asv1);</span><br><span class="line">    REGISTER_ENCDEC  (ASV2, asv2);</span><br><span class="line">    REGISTER_DECODER (AURA, aura);</span><br><span class="line">    REGISTER_DECODER (AURA2, aura2);</span><br><span class="line">    REGISTER_ENCDEC  (AVRP, avrp);</span><br><span class="line">    REGISTER_DECODER (AVS, avs);</span><br><span class="line">    REGISTER_DECODER (BETHSOFTVID, bethsoftvid);</span><br><span class="line">    REGISTER_DECODER (BFI, bfi);</span><br><span class="line">    REGISTER_DECODER (BINK, bink);</span><br><span class="line">    REGISTER_ENCDEC  (BMP, bmp);</span><br><span class="line">    REGISTER_DECODER (BMV_VIDEO, bmv_video);</span><br><span class="line">    REGISTER_DECODER (C93, c93);</span><br><span class="line">    REGISTER_DECODER (CAVS, cavs);</span><br><span class="line">    REGISTER_DECODER (CDGRAPHICS, cdgraphics);</span><br><span class="line">    REGISTER_DECODER (CINEPAK, cinepak);</span><br><span class="line">    REGISTER_ENCDEC  (CLJR, cljr);</span><br><span class="line">    REGISTER_DECODER (CSCD, cscd);</span><br><span class="line">    REGISTER_DECODER (CYUV, cyuv);</span><br><span class="line">    REGISTER_DECODER (DFA, dfa);</span><br><span class="line">    REGISTER_DECODER (DIRAC, dirac);</span><br><span class="line">    REGISTER_ENCDEC  (DNXHD, dnxhd);</span><br><span class="line">    REGISTER_ENCDEC  (DPX, dpx);</span><br><span class="line">    REGISTER_DECODER (DSICINVIDEO, dsicinvideo);</span><br><span class="line">    REGISTER_ENCDEC  (DVVIDEO, dvvideo);</span><br><span class="line">    REGISTER_DECODER (DXA, dxa);</span><br><span class="line">    REGISTER_DECODER (DXTORY, dxtory);</span><br><span class="line">    REGISTER_DECODER (EACMV, eacmv);</span><br><span class="line">    REGISTER_DECODER (EAMAD, eamad);</span><br><span class="line">    REGISTER_DECODER (EATGQ, eatgq);</span><br><span class="line">    REGISTER_DECODER (EATGV, eatgv);</span><br><span class="line">    REGISTER_DECODER (EATQI, eatqi);</span><br><span class="line">    REGISTER_DECODER (EIGHTBPS, eightbps);</span><br><span class="line">    REGISTER_DECODER (EIGHTSVX_EXP, eightsvx_exp);</span><br><span class="line">    REGISTER_DECODER (EIGHTSVX_FIB, eightsvx_fib);</span><br><span class="line">    REGISTER_DECODER (ESCAPE124, escape124);</span><br><span class="line">    REGISTER_DECODER (ESCAPE130, escape130);</span><br><span class="line">    REGISTER_ENCDEC  (FFV1, ffv1);</span><br><span class="line">    REGISTER_ENCDEC  (FFVHUFF, ffvhuff);</span><br><span class="line">    REGISTER_ENCDEC  (FLASHSV, flashsv);</span><br><span class="line">    REGISTER_ENCDEC  (FLASHSV2, flashsv2);</span><br><span class="line">    REGISTER_DECODER (FLIC, flic);</span><br><span class="line">    REGISTER_ENCDEC  (FLV, flv);</span><br><span class="line">    REGISTER_DECODER (FOURXM, fourxm);</span><br><span class="line">    REGISTER_DECODER (FRAPS, fraps);</span><br><span class="line">    REGISTER_DECODER (FRWU, frwu);</span><br><span class="line">    REGISTER_ENCDEC  (GIF, gif);</span><br><span class="line">    REGISTER_ENCDEC  (H261, h261);</span><br><span class="line">    REGISTER_ENCDEC  (H263, h263);</span><br><span class="line">    REGISTER_DECODER (H263I, h263i);</span><br><span class="line">    REGISTER_ENCODER (H263P, h263p);</span><br><span class="line">    REGISTER_DECODER (H264, h264);</span><br><span class="line">    REGISTER_DECODER (H264_CRYSTALHD, h264_crystalhd);</span><br><span class="line">    REGISTER_DECODER (H264_VDPAU, h264_vdpau);</span><br><span class="line">    REGISTER_ENCDEC  (HUFFYUV, huffyuv);</span><br><span class="line">    REGISTER_DECODER (IDCIN, idcin);</span><br><span class="line">    REGISTER_DECODER (IFF_BYTERUN1, iff_byterun1);</span><br><span class="line">    REGISTER_DECODER (IFF_ILBM, iff_ilbm);</span><br><span class="line">    REGISTER_DECODER (INDEO2, indeo2);</span><br><span class="line">    REGISTER_DECODER (INDEO3, indeo3);</span><br><span class="line">    REGISTER_DECODER (INDEO4, indeo4);</span><br><span class="line">    REGISTER_DECODER (INDEO5, indeo5);</span><br><span class="line">    REGISTER_DECODER (INTERPLAY_VIDEO, interplay_video);</span><br><span class="line">    REGISTER_ENCDEC  (JPEG2000, jpeg2000);</span><br><span class="line">    REGISTER_ENCDEC  (JPEGLS, jpegls);</span><br><span class="line">    REGISTER_DECODER (JV, jv);</span><br><span class="line">    REGISTER_DECODER (KGV1, kgv1);</span><br><span class="line">    REGISTER_DECODER (KMVC, kmvc);</span><br><span class="line">    REGISTER_DECODER (LAGARITH, lagarith);</span><br><span class="line">    REGISTER_ENCODER (LJPEG, ljpeg);</span><br><span class="line">    REGISTER_DECODER (LOCO, loco);</span><br><span class="line">    REGISTER_DECODER (MDEC, mdec);</span><br><span class="line">    REGISTER_DECODER (MIMIC, mimic);</span><br><span class="line">    REGISTER_ENCDEC  (MJPEG, mjpeg);</span><br><span class="line">    REGISTER_DECODER (MJPEGB, mjpegb);</span><br><span class="line">    REGISTER_DECODER (MMVIDEO, mmvideo);</span><br><span class="line">    REGISTER_DECODER (MOTIONPIXELS, motionpixels);</span><br><span class="line">    REGISTER_DECODER (MPEG_XVMC, mpeg_xvmc);</span><br><span class="line">    REGISTER_ENCDEC  (MPEG1VIDEO, mpeg1video);</span><br><span class="line">    REGISTER_ENCDEC  (MPEG2VIDEO, mpeg2video);</span><br><span class="line">    REGISTER_ENCDEC  (MPEG4, mpeg4);</span><br><span class="line">    REGISTER_DECODER (MPEG4_CRYSTALHD, mpeg4_crystalhd);</span><br><span class="line">    REGISTER_DECODER (MPEG4_VDPAU, mpeg4_vdpau);</span><br><span class="line">    REGISTER_DECODER (MPEGVIDEO, mpegvideo);</span><br><span class="line">    REGISTER_DECODER (MPEG_VDPAU, mpeg_vdpau);</span><br><span class="line">    REGISTER_DECODER (MPEG1_VDPAU, mpeg1_vdpau);</span><br><span class="line">    REGISTER_DECODER (MPEG2_CRYSTALHD, mpeg2_crystalhd);</span><br><span class="line">    REGISTER_DECODER (MSMPEG4_CRYSTALHD, msmpeg4_crystalhd);</span><br><span class="line">    REGISTER_DECODER (MSMPEG4V1, msmpeg4v1);</span><br><span class="line">    REGISTER_ENCDEC  (MSMPEG4V2, msmpeg4v2);</span><br><span class="line">    REGISTER_ENCDEC  (MSMPEG4V3, msmpeg4v3);</span><br><span class="line">    REGISTER_DECODER (MSRLE, msrle);</span><br><span class="line">    REGISTER_ENCDEC  (MSVIDEO1, msvideo1);</span><br><span class="line">    REGISTER_DECODER (MSZH, mszh);</span><br><span class="line">    REGISTER_DECODER (MXPEG, mxpeg);</span><br><span class="line">    REGISTER_DECODER (NUV, nuv);</span><br><span class="line">    REGISTER_ENCDEC  (PAM, pam);</span><br><span class="line">    REGISTER_ENCDEC  (PBM, pbm);</span><br><span class="line">    REGISTER_ENCDEC  (PCX, pcx);</span><br><span class="line">    REGISTER_ENCDEC  (PGM, pgm);</span><br><span class="line">    REGISTER_ENCDEC  (PGMYUV, pgmyuv);</span><br><span class="line">    REGISTER_DECODER (PICTOR, pictor);</span><br><span class="line">    REGISTER_ENCDEC  (PNG, png);</span><br><span class="line">    REGISTER_ENCDEC  (PPM, ppm);</span><br><span class="line">    REGISTER_ENCDEC  (PRORES, prores);</span><br><span class="line">    REGISTER_DECODER (PRORES_LGPL, prores_lgpl);</span><br><span class="line">    REGISTER_DECODER (PTX, ptx);</span><br><span class="line">    REGISTER_DECODER (QDRAW, qdraw);</span><br><span class="line">    REGISTER_DECODER (QPEG, qpeg);</span><br><span class="line">    REGISTER_ENCDEC  (QTRLE, qtrle);</span><br><span class="line">    REGISTER_ENCDEC  (R10K,  r10k);</span><br><span class="line">    REGISTER_ENCDEC  (R210,  r210);</span><br><span class="line">    REGISTER_ENCDEC  (RAWVIDEO, rawvideo);</span><br><span class="line">    REGISTER_DECODER (RL2, rl2);</span><br><span class="line">    REGISTER_ENCDEC  (ROQ, roq);</span><br><span class="line">    REGISTER_DECODER (RPZA, rpza);</span><br><span class="line">    REGISTER_ENCDEC  (RV10, rv10);</span><br><span class="line">    REGISTER_ENCDEC  (RV20, rv20);</span><br><span class="line">    REGISTER_DECODER (RV30, rv30);</span><br><span class="line">    REGISTER_DECODER (RV40, rv40);</span><br><span class="line">    REGISTER_DECODER (S302M, s302m);</span><br><span class="line">    REGISTER_ENCDEC  (SGI, sgi);</span><br><span class="line">    REGISTER_DECODER (SMACKER, smacker);</span><br><span class="line">    REGISTER_DECODER (SMC, smc);</span><br><span class="line">    REGISTER_ENCDEC  (SNOW, snow);</span><br><span class="line">    REGISTER_DECODER (SP5X, sp5x);</span><br><span class="line">    REGISTER_DECODER (SUNRAST, sunrast);</span><br><span class="line">    REGISTER_ENCDEC  (SVQ1, svq1);</span><br><span class="line">    REGISTER_DECODER (SVQ3, svq3);</span><br><span class="line">    REGISTER_ENCDEC  (TARGA, targa);</span><br><span class="line">    REGISTER_DECODER (THEORA, theora);</span><br><span class="line">    REGISTER_DECODER (THP, thp);</span><br><span class="line">    REGISTER_DECODER (TIERTEXSEQVIDEO, tiertexseqvideo);</span><br><span class="line">    REGISTER_ENCDEC  (TIFF, tiff);</span><br><span class="line">    REGISTER_DECODER (TMV, tmv);</span><br><span class="line">    REGISTER_DECODER (TRUEMOTION1, truemotion1);</span><br><span class="line">    REGISTER_DECODER (TRUEMOTION2, truemotion2);</span><br><span class="line">    REGISTER_DECODER (TSCC, tscc);</span><br><span class="line">    REGISTER_DECODER (TXD, txd);</span><br><span class="line">    REGISTER_DECODER (ULTI, ulti);</span><br><span class="line">    REGISTER_DECODER (UTVIDEO, utvideo);</span><br><span class="line">    REGISTER_ENCDEC  (V210,  v210);</span><br><span class="line">    REGISTER_DECODER (V210X, v210x);</span><br><span class="line">    REGISTER_ENCDEC  (V308, v308);</span><br><span class="line">    REGISTER_ENCDEC  (V410, v410);</span><br><span class="line">    REGISTER_DECODER (VB, vb);</span><br><span class="line">    REGISTER_DECODER (VBLE, vble);</span><br><span class="line">    REGISTER_DECODER (VC1, vc1);</span><br><span class="line">    REGISTER_DECODER (VC1_CRYSTALHD, vc1_crystalhd);</span><br><span class="line">    REGISTER_DECODER (VC1_VDPAU, vc1_vdpau);</span><br><span class="line">    REGISTER_DECODER (VC1IMAGE, vc1image);</span><br><span class="line">    REGISTER_DECODER (VCR1, vcr1);</span><br><span class="line">    REGISTER_DECODER (VMDVIDEO, vmdvideo);</span><br><span class="line">    REGISTER_DECODER (VMNC, vmnc);</span><br><span class="line">    REGISTER_DECODER (VP3, vp3);</span><br><span class="line">    REGISTER_DECODER (VP5, vp5);</span><br><span class="line">    REGISTER_DECODER (VP6, vp6);</span><br><span class="line">    REGISTER_DECODER (VP6A, vp6a);</span><br><span class="line">    REGISTER_DECODER (VP6F, vp6f);</span><br><span class="line">    REGISTER_DECODER (VP8, vp8);</span><br><span class="line">    REGISTER_DECODER (VQA, vqa);</span><br><span class="line">    REGISTER_ENCDEC  (WMV1, wmv1);</span><br><span class="line">    REGISTER_ENCDEC  (WMV2, wmv2);</span><br><span class="line">    REGISTER_DECODER (WMV3, wmv3);</span><br><span class="line">    REGISTER_DECODER (WMV3_CRYSTALHD, wmv3_crystalhd);</span><br><span class="line">    REGISTER_DECODER (WMV3_VDPAU, wmv3_vdpau);</span><br><span class="line">    REGISTER_DECODER (WMV3IMAGE, wmv3image);</span><br><span class="line">    REGISTER_DECODER (WNV1, wnv1);</span><br><span class="line">    REGISTER_DECODER (XAN_WC3, xan_wc3);</span><br><span class="line">    REGISTER_DECODER (XAN_WC4, xan_wc4);</span><br><span class="line">    REGISTER_DECODER (XL, xl);</span><br><span class="line">    REGISTER_ENCDEC  (XWD, xwd);</span><br><span class="line">    REGISTER_ENCDEC  (Y41P, y41p);</span><br><span class="line">    REGISTER_DECODER (YOP, yop);</span><br><span class="line">    REGISTER_ENCDEC  (YUV4, yuv4);</span><br><span class="line">    REGISTER_ENCDEC  (ZLIB, zlib);</span><br><span class="line">    REGISTER_ENCDEC  (ZMBV, zmbv);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* audio codecs */</span></span><br><span class="line">    REGISTER_ENCDEC  (AAC, aac);</span><br><span class="line">    REGISTER_DECODER (AAC_LATM, aac_latm);</span><br><span class="line">    REGISTER_ENCDEC  (AC3, ac3);</span><br><span class="line">    REGISTER_ENCODER (AC3_FIXED, ac3_fixed);</span><br><span class="line">    REGISTER_ENCDEC  (ALAC, alac);</span><br><span class="line">    REGISTER_DECODER (ALS, als);</span><br><span class="line">    REGISTER_DECODER (AMRNB, amrnb);</span><br><span class="line">    REGISTER_DECODER (AMRWB, amrwb);</span><br><span class="line">    REGISTER_DECODER (APE, ape);</span><br><span class="line">    REGISTER_DECODER (ATRAC1, atrac1);</span><br><span class="line">    REGISTER_DECODER (ATRAC3, atrac3);</span><br><span class="line">    REGISTER_DECODER (BINKAUDIO_DCT, binkaudio_dct);</span><br><span class="line">    REGISTER_DECODER (BINKAUDIO_RDFT, binkaudio_rdft);</span><br><span class="line">    REGISTER_DECODER (BMV_AUDIO, bmv_audio);</span><br><span class="line">    REGISTER_DECODER (COOK, cook);</span><br><span class="line">    REGISTER_ENCDEC  (DCA, dca);</span><br><span class="line">    REGISTER_DECODER (DSICINAUDIO, dsicinaudio);</span><br><span class="line">    REGISTER_ENCDEC  (EAC3, eac3);</span><br><span class="line">    REGISTER_DECODER (FFWAVESYNTH, ffwavesynth);</span><br><span class="line">    REGISTER_ENCDEC  (FLAC, flac);</span><br><span class="line">    REGISTER_ENCDEC  (G723_1, g723_1);</span><br><span class="line">    REGISTER_DECODER (G729, g729);</span><br><span class="line">    REGISTER_DECODER (GSM, gsm);</span><br><span class="line">    REGISTER_DECODER (GSM_MS, gsm_ms);</span><br><span class="line">    REGISTER_DECODER (IMC, imc);</span><br><span class="line">    REGISTER_DECODER (MACE3, mace3);</span><br><span class="line">    REGISTER_DECODER (MACE6, mace6);</span><br><span class="line">    REGISTER_DECODER (MLP, mlp);</span><br><span class="line">    REGISTER_DECODER (MP1, mp1);</span><br><span class="line">    REGISTER_DECODER (MP1FLOAT, mp1float);</span><br><span class="line">    REGISTER_ENCDEC  (MP2, mp2);</span><br><span class="line">    REGISTER_DECODER (MP2FLOAT, mp2float);</span><br><span class="line">    REGISTER_DECODER (MP3, mp3);</span><br><span class="line">    REGISTER_DECODER (MP3FLOAT, mp3float);</span><br><span class="line">    REGISTER_DECODER (MP3ADU, mp3adu);</span><br><span class="line">    REGISTER_DECODER (MP3ADUFLOAT, mp3adufloat);</span><br><span class="line">    REGISTER_DECODER (MP3ON4, mp3on4);</span><br><span class="line">    REGISTER_DECODER (MP3ON4FLOAT, mp3on4float);</span><br><span class="line">    REGISTER_DECODER (MPC7, mpc7);</span><br><span class="line">    REGISTER_DECODER (MPC8, mpc8);</span><br><span class="line">    REGISTER_ENCDEC  (NELLYMOSER, nellymoser);</span><br><span class="line">    REGISTER_DECODER (QCELP, qcelp);</span><br><span class="line">    REGISTER_DECODER (QDM2, qdm2);</span><br><span class="line">    REGISTER_ENCDEC  (RA_144, ra_144);</span><br><span class="line">    REGISTER_DECODER (RA_288, ra_288);</span><br><span class="line">    REGISTER_DECODER (SHORTEN, shorten);</span><br><span class="line">    REGISTER_DECODER (SIPR, sipr);</span><br><span class="line">    REGISTER_DECODER (SMACKAUD, smackaud);</span><br><span class="line">    REGISTER_ENCDEC  (SONIC, sonic);</span><br><span class="line">    REGISTER_ENCODER (SONIC_LS, sonic_ls);</span><br><span class="line">    REGISTER_DECODER (TRUEHD, truehd);</span><br><span class="line">    REGISTER_DECODER (TRUESPEECH, truespeech);</span><br><span class="line">    REGISTER_DECODER (TTA, tta);</span><br><span class="line">    REGISTER_DECODER (TWINVQ, twinvq);</span><br><span class="line">    REGISTER_DECODER (VMDAUDIO, vmdaudio);</span><br><span class="line">    REGISTER_ENCDEC  (VORBIS, vorbis);</span><br><span class="line">    REGISTER_DECODER (WAVPACK, wavpack);</span><br><span class="line">    REGISTER_DECODER (WMALOSSLESS, wmalossless);</span><br><span class="line">    REGISTER_DECODER (WMAPRO, wmapro);</span><br><span class="line">    REGISTER_ENCDEC  (WMAV1, wmav1);</span><br><span class="line">    REGISTER_ENCDEC  (WMAV2, wmav2);</span><br><span class="line">    REGISTER_DECODER (WMAVOICE, wmavoice);</span><br><span class="line">    REGISTER_DECODER (WS_SND1, ws_snd1);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* PCM codecs */</span></span><br><span class="line">    REGISTER_ENCDEC  (PCM_ALAW, pcm_alaw);</span><br><span class="line">    REGISTER_DECODER (PCM_BLURAY, pcm_bluray);</span><br><span class="line">    REGISTER_DECODER (PCM_DVD, pcm_dvd);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_F32BE, pcm_f32be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_F32LE, pcm_f32le);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_F64BE, pcm_f64be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_F64LE, pcm_f64le);</span><br><span class="line">    REGISTER_DECODER (PCM_LXF, pcm_lxf);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_MULAW, pcm_mulaw);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S8, pcm_s8);</span><br><span class="line">    REGISTER_DECODER (PCM_S8_PLANAR, pcm_s8_planar);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S16BE, pcm_s16be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S16LE, pcm_s16le);</span><br><span class="line">    REGISTER_DECODER (PCM_S16LE_PLANAR, pcm_s16le_planar);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S24BE, pcm_s24be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S24DAUD, pcm_s24daud);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S24LE, pcm_s24le);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S32BE, pcm_s32be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_S32LE, pcm_s32le);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U8, pcm_u8);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U16BE, pcm_u16be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U16LE, pcm_u16le);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U24BE, pcm_u24be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U24LE, pcm_u24le);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U32BE, pcm_u32be);</span><br><span class="line">    REGISTER_ENCDEC  (PCM_U32LE, pcm_u32le);</span><br><span class="line">    REGISTER_DECODER (PCM_ZORK , pcm_zork);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* DPCM codecs */</span></span><br><span class="line">    REGISTER_DECODER (INTERPLAY_DPCM, interplay_dpcm);</span><br><span class="line">    REGISTER_ENCDEC  (ROQ_DPCM, roq_dpcm);</span><br><span class="line">    REGISTER_DECODER (SOL_DPCM, sol_dpcm);</span><br><span class="line">    REGISTER_DECODER (XAN_DPCM, xan_dpcm);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* ADPCM codecs */</span></span><br><span class="line">    REGISTER_DECODER (ADPCM_4XM, adpcm_4xm);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_ADX, adpcm_adx);</span><br><span class="line">    REGISTER_DECODER (ADPCM_CT, adpcm_ct);</span><br><span class="line">    REGISTER_DECODER (ADPCM_EA, adpcm_ea);</span><br><span class="line">    REGISTER_DECODER (ADPCM_EA_MAXIS_XA, adpcm_ea_maxis_xa);</span><br><span class="line">    REGISTER_DECODER (ADPCM_EA_R1, adpcm_ea_r1);</span><br><span class="line">    REGISTER_DECODER (ADPCM_EA_R2, adpcm_ea_r2);</span><br><span class="line">    REGISTER_DECODER (ADPCM_EA_R3, adpcm_ea_r3);</span><br><span class="line">    REGISTER_DECODER (ADPCM_EA_XAS, adpcm_ea_xas);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_G722, adpcm_g722);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_G726, adpcm_g726);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_AMV, adpcm_ima_amv);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_APC, adpcm_ima_apc);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_DK3, adpcm_ima_dk3);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_DK4, adpcm_ima_dk4);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_EA_EACS, adpcm_ima_ea_eacs);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_EA_SEAD, adpcm_ima_ea_sead);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_ISS, adpcm_ima_iss);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_IMA_QT, adpcm_ima_qt);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_SMJPEG, adpcm_ima_smjpeg);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_IMA_WAV, adpcm_ima_wav);</span><br><span class="line">    REGISTER_DECODER (ADPCM_IMA_WS, adpcm_ima_ws);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_MS, adpcm_ms);</span><br><span class="line">    REGISTER_DECODER (ADPCM_SBPRO_2, adpcm_sbpro_2);</span><br><span class="line">    REGISTER_DECODER (ADPCM_SBPRO_3, adpcm_sbpro_3);</span><br><span class="line">    REGISTER_DECODER (ADPCM_SBPRO_4, adpcm_sbpro_4);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_SWF, adpcm_swf);</span><br><span class="line">    REGISTER_DECODER (ADPCM_THP, adpcm_thp);</span><br><span class="line">    REGISTER_DECODER (ADPCM_XA, adpcm_xa);</span><br><span class="line">    REGISTER_ENCDEC  (ADPCM_YAMAHA, adpcm_yamaha);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* subtitles */</span></span><br><span class="line">    REGISTER_ENCDEC  (ASS, ass);</span><br><span class="line">    REGISTER_ENCDEC  (DVBSUB, dvbsub);</span><br><span class="line">    REGISTER_ENCDEC  (DVDSUB, dvdsub);</span><br><span class="line">    REGISTER_DECODER (PGSSUB, pgssub);</span><br><span class="line">    REGISTER_ENCDEC  (SRT, srt);</span><br><span class="line">    REGISTER_ENCDEC  (XSUB, xsub);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* external libraries */</span></span><br><span class="line">    REGISTER_ENCODER (LIBAACPLUS, libaacplus);</span><br><span class="line">    REGISTER_DECODER (LIBCELT, libcelt);</span><br><span class="line">    REGISTER_ENCDEC  (LIBDIRAC, libdirac);</span><br><span class="line">    REGISTER_ENCODER (LIBFAAC, libfaac);</span><br><span class="line">    REGISTER_ENCDEC  (LIBGSM, libgsm);</span><br><span class="line">    REGISTER_ENCDEC  (LIBGSM_MS, libgsm_ms);</span><br><span class="line">    REGISTER_ENCODER (LIBMP3LAME, libmp3lame);</span><br><span class="line">    REGISTER_ENCDEC  (LIBOPENCORE_AMRNB, libopencore_amrnb);</span><br><span class="line">    REGISTER_DECODER (LIBOPENCORE_AMRWB, libopencore_amrwb);</span><br><span class="line">    REGISTER_ENCDEC (LIBOPENJPEG, libopenjpeg);</span><br><span class="line">    REGISTER_ENCDEC  (LIBSCHROEDINGER, libschroedinger);</span><br><span class="line">    REGISTER_ENCDEC  (LIBSPEEX, libspeex);</span><br><span class="line">    REGISTER_DECODER (LIBSTAGEFRIGHT_H264, libstagefright_h264);</span><br><span class="line">    REGISTER_ENCODER (LIBTHEORA, libtheora);</span><br><span class="line">    REGISTER_DECODER (LIBUTVIDEO, libutvideo);</span><br><span class="line">    REGISTER_ENCODER (LIBVO_AACENC, libvo_aacenc);</span><br><span class="line">    REGISTER_ENCODER (LIBVO_AMRWBENC, libvo_amrwbenc);</span><br><span class="line">    REGISTER_ENCODER (LIBVORBIS, libvorbis);</span><br><span class="line">    REGISTER_ENCDEC  (LIBVPX, libvpx);</span><br><span class="line">    REGISTER_ENCODER (LIBX264, libx264);</span><br><span class="line">    REGISTER_ENCODER (LIBX264RGB, libx264rgb);</span><br><span class="line">    REGISTER_ENCODER (LIBXAVS, libxavs);</span><br><span class="line">    REGISTER_ENCODER (LIBXVID, libxvid);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* text */</span></span><br><span class="line">    REGISTER_DECODER (BINTEXT, bintext);</span><br><span class="line">    REGISTER_DECODER  (XBIN, xbin);</span><br><span class="line">    REGISTER_DECODER  (IDF, idf);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* parsers */</span></span><br><span class="line">    REGISTER_PARSER  (AAC, aac);</span><br><span class="line">    REGISTER_PARSER  (AAC_LATM, aac_latm);</span><br><span class="line">    REGISTER_PARSER  (AC3, ac3);</span><br><span class="line">    REGISTER_PARSER  (ADX, adx);</span><br><span class="line">    REGISTER_PARSER  (CAVSVIDEO, cavsvideo);</span><br><span class="line">    REGISTER_PARSER  (DCA, dca);</span><br><span class="line">    REGISTER_PARSER  (DIRAC, dirac);</span><br><span class="line">    REGISTER_PARSER  (DNXHD, dnxhd);</span><br><span class="line">    REGISTER_PARSER  (DVBSUB, dvbsub);</span><br><span class="line">    REGISTER_PARSER  (DVDSUB, dvdsub);</span><br><span class="line">    REGISTER_PARSER  (FLAC, flac);</span><br><span class="line">    REGISTER_PARSER  (GSM, gsm);</span><br><span class="line">    REGISTER_PARSER  (H261, h261);</span><br><span class="line">    REGISTER_PARSER  (H263, h263);</span><br><span class="line">    REGISTER_PARSER  (H264, h264);</span><br><span class="line">    REGISTER_PARSER  (MJPEG, mjpeg);</span><br><span class="line">    REGISTER_PARSER  (MLP, mlp);</span><br><span class="line">    REGISTER_PARSER  (MPEG4VIDEO, mpeg4video);</span><br><span class="line">    REGISTER_PARSER  (MPEGAUDIO, mpegaudio);</span><br><span class="line">    REGISTER_PARSER  (MPEGVIDEO, mpegvideo);</span><br><span class="line">    REGISTER_PARSER  (PNM, pnm);</span><br><span class="line">    REGISTER_PARSER  (RV30, rv30);</span><br><span class="line">    REGISTER_PARSER  (RV40, rv40);</span><br><span class="line">    REGISTER_PARSER  (VC1, vc1);</span><br><span class="line">    REGISTER_PARSER  (VP3, vp3);</span><br><span class="line">    REGISTER_PARSER  (VP8, vp8);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* bitstream filters */</span></span><br><span class="line">    REGISTER_BSF     (AAC_ADTSTOASC, aac_adtstoasc);</span><br><span class="line">    REGISTER_BSF     (CHOMP, chomp);</span><br><span class="line">    REGISTER_BSF     (DUMP_EXTRADATA, dump_extradata);</span><br><span class="line">    REGISTER_BSF     (H264_MP4TOANNEXB, h264_mp4toannexb);</span><br><span class="line">    REGISTER_BSF     (IMX_DUMP_HEADER, imx_dump_header);</span><br><span class="line">    REGISTER_BSF     (MJPEG2JPEG, mjpeg2jpeg);</span><br><span class="line">    REGISTER_BSF     (MJPEGA_DUMP_HEADER, mjpega_dump_header);</span><br><span class="line">    REGISTER_BSF     (MP3_HEADER_COMPRESS, mp3_header_compress);</span><br><span class="line">    REGISTER_BSF     (MP3_HEADER_DECOMPRESS, mp3_header_decompress);</span><br><span class="line">    REGISTER_BSF     (MOV2TEXTSUB, mov2textsub);</span><br><span class="line">    REGISTER_BSF     (NOISE, noise);</span><br><span class="line">    REGISTER_BSF     (REMOVE_EXTRADATA, remove_extradata);</span><br><span class="line">    REGISTER_BSF     (TEXT2MOVSUB, text2movsub);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></details><p>整个代码的过程就是首先确定是不是已经初始化过了（initialized），如果没有，就注册，注册，注册…直到完成所有注册。</p><p>函数的调用关系图如下图所示。<code>av_register_all()</code> 调用了 <code>avcodec_register_all()</code>。因此如果调用过 <code>av_register_all() </code> 的话就不需要再调用 <code>avcodec_register_all()</code> 了。</p><img data-src="/2019/05/18/FFmpeg/FFmpegSDL%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8/av_register_all.png" class="" title="av_register_all"><p>下面附上硬件加速器，编码器&#x2F;解码器，parser，Bitstream Filter的注册代码。</p><p>硬件加速器注册函数是 <code>av_register_hwaccel()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_register_hwaccel</span><span class="params">(AVHWAccel *hwaccel)</span></span><br><span class="line">&#123;</span><br><span class="line">    AVHWAccel **p = last_hwaccel;</span><br><span class="line">    hwaccel-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(*p || avpriv_atomic_ptr_cas((<span class="type">void</span> * <span class="keyword">volatile</span> *)p, <span class="literal">NULL</span>, hwaccel))</span><br><span class="line">        p = &amp;(*p)-&gt;next;</span><br><span class="line">    last_hwaccel = &amp;hwaccel-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编解码器注册函数是 <code>avcodec_register()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">av_cold <span class="type">void</span> <span class="title function_">avcodec_register</span><span class="params">(AVCodec *codec)</span></span><br><span class="line">&#123;</span><br><span class="line">    AVCodec **p;</span><br><span class="line">    avcodec_init();</span><br><span class="line">    p = last_avcodec;</span><br><span class="line">    codec-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">while</span>(*p || avpriv_atomic_ptr_cas((<span class="type">void</span> * <span class="keyword">volatile</span> *)p, <span class="literal">NULL</span>, codec))</span><br><span class="line">        p = &amp;(*p)-&gt;next;</span><br><span class="line">    last_avcodec = &amp;codec-&gt;next;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (codec-&gt;init_static_data)</span><br><span class="line">        codec-&gt;init_static_data(codec);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>parser注册函数是 <code>av_register_codec_parser()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_register_codec_parser</span><span class="params">(AVCodecParser *parser)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        parser-&gt;next = av_first_parser;</span><br><span class="line">    &#125; <span class="keyword">while</span> (parser-&gt;next != avpriv_atomic_ptr_cas((<span class="type">void</span> * <span class="keyword">volatile</span> *)&amp;av_first_parser, parser-&gt;next, parser));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Bitstream Filter注册函数是 <code>av_register_bitstream_filter()</code>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">av_register_bitstream_filter</span><span class="params">(AVBitStreamFilter *bsf)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        bsf-&gt;next = first_bitstream_filter;</span><br><span class="line">    &#125; <span class="keyword">while</span>(bsf-&gt;next != avpriv_atomic_ptr_cas((<span class="type">void</span> * <span class="keyword">volatile</span> *)&amp;first_bitstream_filter, bsf-&gt;next, bsf));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后两个函数中的 <code>avpriv_atomic_ptr_cas()</code> 定义如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> *<span class="title function_">avpriv_atomic_ptr_cas</span><span class="params">(<span class="type">void</span> * <span class="keyword">volatile</span> *ptr, <span class="type">void</span> *oldval, <span class="type">void</span> *newval)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (*ptr == oldval) &#123;</span><br><span class="line">        *ptr = newval;</span><br><span class="line">        <span class="keyword">return</span> oldval;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *ptr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/HatsuneMikuV/FFmpeg_Leixiaohua&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/leixiaohua1020/column/info/ffmpeg-devel/7&quot;&gt;FFmpeg&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/leixiaohua1020/article/details/12677129&quot;&gt;ffmpeg 源代码简单分析&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-100行代码实现最简单的基于FFMPEG-SDL的视频播放器&quot;&gt;&lt;a href=&quot;#1-100行代码实现最简单的基于FFMPEG-SDL的视频播放器&quot; class=&quot;headerlink&quot; title=&quot;1. 100行代码实现最简单的基于FFMPEG+SDL的视频播放器&quot;&gt;&lt;/a&gt;1. 100行代码实现最简单的基于FFMPEG+SDL的视频播放器&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/leixiaohua1020/simplest_ffmpeg_player&quot;&gt;simplest_ffmpeg_player&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;该播放器虽然简单，但是几乎包含了使用FFMPEG播放一个视频所有必备的API，并且使用SDL显示解码出来的视频。&lt;/p&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg命令大全</title>
    <link href="http://miaopei.github.io/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/"/>
    <id>http://miaopei.github.io/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/</id>
    <published>2019-05-04T02:14:50.000Z</published>
    <updated>2024-06-13T08:32:29.976Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>FFMPEG 是特别强大的专门用于处理音视频的开源库。你既可以使用它的 API 对音视频进行处理，也可以使用它提供的工具，如 ffmpeg, ffplay, ffprobe，来编辑你的音视频文件。</p><p>本文将简要介绍一下 FFMPEG 库的基本目录结构及其功能，然后详细介绍一下我们在日常工作中，如何使用 ffmpeg 提供的工具来处理音视频文件。</p><span id="more"></span><h2 id="2-FFMPEG-目录及作用"><a href="#2-FFMPEG-目录及作用" class="headerlink" title="2. FFMPEG 目录及作用"></a>2. FFMPEG 目录及作用</h2><ul><li>libavcodec： 提供了一系列编码器的实现。</li><li>libavformat： 实现在流协议，容器格式及其本IO访问。</li><li>libavutil： 包括了hash器，解码器和各类工具函数。</li><li>libavfilter： 提供了各种音视频过滤器。</li><li>libavdevice： 提供了访问捕获设备和回放设备的接口。</li><li>libswresample： 实现了混音和重采样。</li><li>libswscale： 实现了色彩转换和缩放工能。</li></ul><h2 id="3-FFMPEG-基本概念"><a href="#3-FFMPEG-基本概念" class="headerlink" title="3. FFMPEG 基本概念"></a>3. FFMPEG 基本概念</h2><p>在讲解 FFMPEG 命令之前，我们先要介绍一些音视频格式的基要概念。</p><ul><li><p>音／视频流</p><p>在音视频领域，我们把一路音／视频称为一路<strong>流</strong>。如我们小时候经常使用VCD看港片，在里边可以选择粤语或国语声音，其实就是CD视频文件中存放了两路音频流，用户可以选择其中一路进行播放。</p></li><li><p>容器</p><p>我们一般把 MP4､ FLV、MOV 等文件格式称之为<strong>容器</strong>。也就是在这些常用格式文件中，可以存放多路音视频文件。以 MP4 为例，就可以存放一路视频流，多路音频流，多路字幕流。</p></li><li><p>channel</p><p>channel 是音频中的概念，称之为声道。在一路音频流中，可以有单声道，双声道或立体声。</p></li></ul><h2 id="4-FFMPEG-命令"><a href="#4-FFMPEG-命令" class="headerlink" title="4. FFMPEG 命令"></a>4. FFMPEG 命令</h2><p>我们按使用目的可以将 FFMPEG 命令分成以下几类：</p><ul><li>基本信息查询命令</li><li>录制</li><li>分解 &#x2F; 复用</li><li>处理原始数据</li><li>滤镜</li><li>切割与合并</li><li>图／视互转</li><li>直播相关</li></ul><p>除了 FFMPEG 的基本信息查询命令外，其它命令都按下图所示的流程处理音视频。</p><img data-src="/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/%E9%9F%B3%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B.png" class="" title="音视频处理流程"><p>然后将编码的数据包传送给解码器（除非为数据流选择了流拷贝，请参阅进一步描述）。 解码器产生未压缩的帧（原始视频&#x2F; PCM音频&#x2F; …），可以通过滤波进一步处理（见下一节）。 在过滤之后，帧被传递到编码器，编码器并输出编码的数据包。 最后，这些传递给复用器，将编码的数据包写入输出文件。</p><p>默认情况下，ffmpeg只包含输入文件中每种类型（视频，音频，字幕）的一个流，并将其添加到每个输出文件中。 它根据以下标准挑选每一个的“最佳”：对于视频，它是具有最高分辨率的流，对于音频，它是具有最多channel的流，对于字幕，是第一个字幕流。 在相同类型的几个流相等的情况下，选择具有最低索引的流。</p><p>您可以通过使用 <code>-vn / -an / -sn / -dn</code> 选项来禁用某些默认设置。 要进行全面的手动控制，请使用 <code>-map</code>选项，该选项禁用刚描述的默认设置。</p><p>下面我们就来详细介绍一下这些命令。</p><h2 id="5-基本信息查询命令"><a href="#5-基本信息查询命令" class="headerlink" title="5. 基本信息查询命令"></a>5. 基本信息查询命令</h2><p>FFMPEG 可以使用下面的参数进行基本信息查询。例如，想查询一下现在使用的 FFMPEG 都支持哪些 filter，就可以用 <code>ffmpeg -filters</code> 来查询。详细参数说明如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-version</td><td>显示版本。</td></tr><tr><td>-formats</td><td>显示可用的格式（包括设备）。</td></tr><tr><td>-demuxers</td><td>显示可用的demuxers。</td></tr><tr><td>-muxers</td><td>显示可用的muxers。</td></tr><tr><td>-devices</td><td>显示可用的设备。</td></tr><tr><td>-codecs</td><td>显示libavcodec已知的所有编解码器。</td></tr><tr><td>-decoders</td><td>显示可用的解码器。</td></tr><tr><td>-encoders</td><td>显示所有可用的编码器。</td></tr><tr><td>-bsfs</td><td>显示可用的比特流filter。</td></tr><tr><td>-protocols</td><td>显示可用的协议。</td></tr><tr><td>-filters</td><td>显示可用的libavfilter过滤器。</td></tr><tr><td>-pix_fmts</td><td>显示可用的像素格式。</td></tr><tr><td>-sample_fmts</td><td>显示可用的采样格式。</td></tr><tr><td>-layouts</td><td>显示channel名称和标准channel布局。</td></tr><tr><td>-colors</td><td>显示识别的颜色名称。</td></tr></tbody></table><p>接下来介绍的是 FFMPEG 处理音视频时使用的命令格式与参数。</p><h2 id="6-命令基本格式及参数"><a href="#6-命令基本格式及参数" class="headerlink" title="6. 命令基本格式及参数"></a>6. 命令基本格式及参数</h2><p>下面是 FFMPEG 的基本命令格式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg [global_options] &#123;[input_file_options] -i input_url&#125; ...</span></span><br><span class="line">                         &#123;[output_file_options] output_url&#125; ...</span><br></pre></td></tr></table></figure><p>ffmpeg 通过 <code>-i</code> 选项读取输任意数量的输入“文件”（可以是常规文件，管道，网络流，抓取设备等），并写入任意数量的输出“文件”。</p><p>原则上，每个输入 &#x2F; 输出“文件”都可以包含任意数量的不同类型的视频流（视频 &#x2F; 音频 &#x2F; 字幕 &#x2F; 附件 &#x2F; 数据）。 <strong>流的数量和 &#x2F; 或类型是由容器格式来限制</strong>。 选择从哪个输入进入到哪个输出将自动完成或使用 <code>-map</code> 选项。</p><p>要引用选项中的输入文件，您必须使用它们的索引（从 0 开始）。 例如。 第一个输入文件是0，第二个输入文件是1，等等。类似地，文件内的流被它们的索引引用。 <strong>例如： 2：3 是指第三个输入文件中的第四个流</strong>。</p><p>上面就是 FFMPEG 处理音视频的常用命令，下面是一些常用参数：</p><h3 id="6-1-主要参数"><a href="#6-1-主要参数" class="headerlink" title="6.1 主要参数"></a>6.1 主要参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-f fmt（输入&#x2F;输出）</td><td>强制输入或输出文件格式。 格式通常是自动检测输入文件，并从输出文件的文件扩展名中猜测出来，所以在大多数情况下这个选项是不需要的。</td></tr><tr><td>-i url（输入）</td><td>输入文件的网址</td></tr><tr><td>-y（全局参数）</td><td>覆盖输出文件而不询问。</td></tr><tr><td>-n（全局参数）</td><td>不要覆盖输出文件，如果指定的输出文件已经存在，请立即退出。</td></tr><tr><td>-c [：stream_specifier] codec（输入&#x2F;输出，每个流）</td><td>选择一个编码器（当在输出文件之前使用）或解码器（当在输入文件之前使用时）用于一个或多个流。codec 是解码器&#x2F;编码器的名称或 copy（仅输出）以指示该流不被重新编码。如：<code>ffmpeg -i INPUT -map 0 -c:v libx264 -c:a copy OUTPUT</code></td></tr><tr><td>-codec [：stream_specifier]编解码器（输入&#x2F;输出，每个流）</td><td>同 -c</td></tr><tr><td>-t duration（输入&#x2F;输出）</td><td>当用作输入选项（在-i之前）时，限制从输入文件读取的数据的持续时间。当用作输出选项时（在输出url之前），在持续时间到达持续时间之后停止输出。</td></tr><tr><td>-ss位置（输入&#x2F;输出）</td><td>当用作输入选项时（在-i之前），在这个输入文件中寻找位置。 请注意，在大多数格式中，不可能精确搜索，因此ffmpeg将在位置之前寻找最近的搜索点。 当转码和-accurate_seek被启用时（默认），搜索点和位置之间的这个额外的分段将被解码和丢弃。 当进行流式复制或使用-noaccurate_seek时，它将被保留。当用作输出选项（在输出url之前）时，解码但丢弃输入，直到时间戳到达位置。</td></tr><tr><td>-frames [：stream_specifier] framecount（output，per-stream）</td><td>停止在帧计数帧之后写入流。</td></tr><tr><td>-filter [：stream_specifier] filtergraph（output，per-stream）</td><td>创建由filtergraph指定的过滤器图，并使用它来过滤流。filtergraph是应用于流的filtergraph的描述，并且必须具有相同类型的流的单个输入和单个输出。在过滤器图形中，输入与标签中的标签相关联，标签中的输出与标签相关联。有关filtergraph语法的更多信息，请参阅ffmpeg-filters手册。</td></tr></tbody></table><h3 id="6-2-视频参数"><a href="#6-2-视频参数" class="headerlink" title="6.2 视频参数"></a>6.2 视频参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-vframes num（输出）</td><td>设置要输出的视频帧的数量。对于-frames：v，这是一个过时的别名，您应该使用它。</td></tr><tr><td>-r [：stream_specifier] fps（输入&#x2F;输出，每个流）</td><td>设置帧率（Hz值，分数或缩写）。作为输入选项，忽略存储在文件中的任何时间戳，根据速率生成新的时间戳。这与用于-framerate选项不同（它在FFmpeg的旧版本中使用的是相同的）。如果有疑问，请使用-framerate而不是输入选项-r。作为输出选项，复制或丢弃输入帧以实现恒定输出帧频fps。</td></tr><tr><td>-s [：stream_specifier]大小（输入&#x2F;输出，每个流）</td><td>设置窗口大小。作为输入选项，这是video_size专用选项的快捷方式，由某些分帧器识别，其帧尺寸未被存储在文件中。作为输出选项，这会将缩放视频过滤器插入到相应过滤器图形的末尾。请直接使用比例过滤器将其插入到开头或其他地方。格式是’wxh’（默认 - 与源相同）。</td></tr><tr><td>-aspect [：stream_specifier] 宽高比（输出，每个流）</td><td>设置方面指定的视频显示宽高比。aspect可以是浮点数字符串，也可以是num：den形式的字符串，其中num和den是宽高比的分子和分母。例如“4：3”，“16：9”，“1.3333”和“1.7777”是有效的参数值。如果与-vcodec副本一起使用，则会影响存储在容器级别的宽高比，但不会影响存储在编码帧中的宽高比（如果存在）。</td></tr><tr><td>-vn（输出）</td><td>禁用视频录制。</td></tr><tr><td>-vcodec编解码器（输出）</td><td>设置视频编解码器。这是 <code>-codec：v</code> 的别名。</td></tr><tr><td>-vf filtergraph（输出）</td><td>创建由filtergraph指定的过滤器图，并使用它来过滤流。</td></tr></tbody></table><h3 id="6-3-音频参数"><a href="#6-3-音频参数" class="headerlink" title="6.3 音频参数"></a>6.3 音频参数</h3><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>-aframes（输出）</td><td>设置要输出的音频帧的数量。这是 <code>-frames：a</code> 的一个过时的别名。</td></tr><tr><td>-ar [：stream_specifier] freq（输入&#x2F;输出，每个流）</td><td>设置音频采样频率。对于输出流，它默认设置为相应输入流的频率。对于输入流，此选项仅适用于音频捕获设备和原始分路器，并映射到相应的分路器选件。</td></tr><tr><td>-ac [：stream_specifier]通道（输入&#x2F;输出，每个流）</td><td>设置音频通道的数量。对于输出流，它默认设置为输入音频通道的数量。对于输入流，此选项仅适用于音频捕获设备和原始分路器，并映射到相应的分路器选件。</td></tr><tr><td>-an（输出）</td><td>禁用录音。</td></tr><tr><td>-acodec编解码器（输入&#x2F;输出）</td><td>设置音频编解码器。这是-codec的别名：a。</td></tr><tr><td>-sample_fmt [：stream_specifier] sample_fmt（输出，每个流）</td><td>设置音频采样格式。使用-sample_fmts获取支持的样本格式列表。</td></tr><tr><td>-af filtergraph（输出）</td><td>创建由filtergraph指定的过滤器图，并使用它来过滤流。</td></tr></tbody></table><p>了解了这些基本信息后，接下来我们看看 FFMPEG 具体都能干些什么吧。</p><h2 id="7-录制"><a href="#7-录制" class="headerlink" title="7. 录制"></a>7. 录制</h2><p>首先通过下面的命令查看一下 mac 上都有哪些设备。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -f avfoundation -list_devices <span class="literal">true</span> -i <span class="string">&quot;&quot;</span></span></span><br></pre></td></tr></table></figure><p><strong>录屏</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -f avfoundation -i 1 -r 30 out.yuv</span></span><br></pre></td></tr></table></figure><ul><li><p>-f 指定使用 avfoundation 采集数据。</p></li><li><p>-i 指定从哪儿采集数据，它是一个文件索引号。在我的MAC上，1代表桌面（可以通过上面的命令查询设备索引号）。</p></li><li><p>-r 指定帧率。按ffmpeg官方文档说-r与-framerate作用相同，但实际测试时发现不同。-framerate 用于限制输入，而 -r 用于限制输出。</p></li></ul><p>注意：桌面的输入对帧率没有要求，所以不用限制桌面的帧率。其实限制了也没用。</p><p><strong>录屏+声音</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg  -f avfoundation -i 1:0  -r 29.97 -c:v libx264 -crf 0 -c:a libfdk_aac -profile:a aac_he_v2 -b:a 32k  out.flv</span></span><br></pre></td></tr></table></figure><ul><li><p>-i 1:0 冒号前面的 “1” 代表的屏幕索引号。冒号后面的”0”代表的声音索相号。</p></li><li><p>-c:v 与参数 -vcodec 一样，表示视频编码器。c 是 codec 的缩写，v 是video的缩写。</p></li><li><p>-crf 是 x264 的参数。 0 表式无损压缩。</p></li><li><p>-c:a 与参数 -acodec 一样，表示音频编码器。</p></li><li><p>-profile 是 fdk_aac 的参数。 aac_he_v2 表式使用 AAC_HE v2 压缩数据。</p></li><li><p>-b:a 指定音频码率。 b 是 bitrate的缩写, a是 audio的缩与。</p></li></ul><p><strong>录视频</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -framerate 30 -f avfoundation -i 0 out.mp4</span></span><br></pre></td></tr></table></figure><ul><li><p>-framerate 限制视频的采集帧率。这个必须要根据提示要求进行设置，如果不设置就会报错。</p></li><li><p>-f 指定使用 avfoundation 采集数据。</p></li><li><p>-i 指定视频设备的索引号。</p></li></ul><p><strong>视频+音频</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -framerate 30 -f avfoundation -i 0:0 out.mp4</span> </span><br></pre></td></tr></table></figure><p><strong>录音</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -f avfoundation -i :0 out.wav</span></span><br></pre></td></tr></table></figure><p><strong>录制音频裸数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg  -f avfoundation -i :0 -ar 44100 -f s16le out.pcm</span></span><br></pre></td></tr></table></figure><h2 id="8-分解与复用"><a href="#8-分解与复用" class="headerlink" title="8. 分解与复用"></a>8. 分解与复用</h2><p>流拷贝是通过将 copy 参数提供给-codec选项来选择流的模式。它使得ffmpeg省略了指定流的解码和编码步骤，所以它只能进行多路分解和多路复用。 这对于更改容器格式或修改容器级元数据很有用。 在这种情况下，上图将简化为：</p><img data-src="/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/%E5%88%86%E8%A7%A3%E4%B8%8E%E5%A4%8D%E7%94%A8.png" class="" title="分解与复用"><p>由于没有解码或编码，速度非常快，没有质量损失。 但是，由于许多因素，在某些情况下可能无法正常工作。 应用过滤器显然也是不可能的，因为过滤器处理未压缩的数据。</p><p><strong>抽取音频流</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i input.mp4 -acodec copy -vn out.aac</span></span><br></pre></td></tr></table></figure><ul><li><p>acodec: 指定音频编码器，copy 指明只拷贝，不做编解码。</p></li><li><p>vn: v 代表视频，n 代表 no 也就是无视频的意思。</p></li></ul><p><strong>抽取视频流</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i input.mp4 -vcodec copy -an out.h264</span></span><br></pre></td></tr></table></figure><ul><li><p>vcodec: 指定视频编码器，copy 指明只拷贝，不做编解码。</p></li><li><p>an: a 代表视频，n 代表 no 也就是无音频的意思。</p></li></ul><p><strong>转格式</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -vcodec copy -acodec copy out.flv</span></span><br></pre></td></tr></table></figure><p>上面的命令表式的是音频、视频都直接 copy，只是将 mp4 的封装格式转成了 flv。</p><p><strong>音视频合并</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.h264 -i out.aac -vcodec copy -acodec copy out.mp4</span></span><br></pre></td></tr></table></figure><h2 id="9-处理原始数据"><a href="#9-处理原始数据" class="headerlink" title="9. 处理原始数据"></a>9. <strong>处理原始数据</strong></h2><p><strong>提取YUV数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i input.mp4 -an -c:v rawvideo -pixel_format yuv420p out.yuv</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffplay -s wxh out.yuv</span></span><br></pre></td></tr></table></figure><ul><li><p>-c:v rawvideo 指定将视频转成原始数据</p></li><li><p>-pixel_format yuv420p 指定转换格式为 yuv420p</p></li></ul><p><strong>YUV 转 H264</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -f rawvideo -pix_fmt yuv420p -s 320x240 -r 30 -i out.yuv -c:v libx264 -f rawvideo out.h264</span></span><br></pre></td></tr></table></figure><p><strong>提取 PCM 数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -vn -ar 44100 -ac 2 -f s16le out.pcm</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffplay -ar 44100 -ac 2 -f s16le -i out.pcm</span></span><br></pre></td></tr></table></figure><p><strong>PCM 转 WAV</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -f s16be -ar 8000 -ac 2 -acodec pcm_s16be -i input.raw output.wav</span></span><br></pre></td></tr></table></figure><h2 id="10-滤镜"><a href="#10-滤镜" class="headerlink" title="10. 滤镜"></a>10. <strong>滤镜</strong></h2><p>在编码之前，ffmpeg 可以使用 libavfilter 库中的过滤器处理原始音频和视频帧。 几个链式过滤器形成一个过滤器图形。 ffmpeg 区分两种类型的过滤器图形：简单和复杂。</p><h3 id="10-1-简单滤镜"><a href="#10-1-简单滤镜" class="headerlink" title="10.1 简单滤镜"></a>10.1 简单滤镜</h3><p>简单的过滤器图是那些只有一个输入和输出，都是相同的类型。 在上面的图中，它们可以通过在解码和编码之间插入一个额外的步骤来表示：</p><img data-src="/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/%E7%AE%80%E5%8D%95%E6%BB%A4%E9%95%9C.png" class="" title="简单滤镜"><p>简单的 filtergraphs 配置了 per-stream-filter 选项（分别为视频和音频使用 <code>-vf</code> 和 <code>-af</code> 别名）。 一个简单的视频 filtergraph 可以看起来像这样的例子：</p><img data-src="/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/%E7%AE%80%E5%8D%95%E6%BB%A4%E9%95%9C-01.png" class="" title="简单滤镜-01"><p>请注意，某些滤镜会更改帧属性，但不会改变帧内容。 例如。 上例中的 fps 过滤器会改变帧数，但不会触及帧内容。 另一个例子是 setpts 过滤器，它只设置时间戳，否则不改变帧。</p><h3 id="10-2-复杂滤镜"><a href="#10-2-复杂滤镜" class="headerlink" title="10.2 复杂滤镜"></a>10.2 复杂滤镜</h3><p>复杂的过滤器图是那些不能简单描述为应用于一个流的线性处理链的过滤器图。 例如，当图形有多个输入和&#x2F;或输出，或者当输出流类型与输入不同时，就是这种情况。 他们可以用下图来表示：</p><img data-src="/2019/05/04/FFmpeg/FFmpeg%E5%91%BD%E4%BB%A4%E5%A4%A7%E5%85%A8/%E5%A4%8D%E6%9D%82%E6%BB%A4%E9%95%9C.png" class="" title="复杂滤镜"><p>复杂的过滤器图使用 <code>-filter_complex</code> 选项进行配置。 请注意，此选项是全局性的，因为复杂的过滤器图形本质上不能与单个流或文件明确关联。</p><p><code>-lavfi</code> 选项等同于 <code>-filter_complex</code>。</p><p>一个复杂的过滤器图的一个简单的例子是覆盖过滤器，它有两个视频输入和一个视频输出，包含一个视频叠加在另一个上面。 它的音频对应是 amix 滤波器。</p><p><strong>添加水印</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4  -vf <span class="string">&quot;movie=logo.png,scale=64:48[watermask];[in][watermask] overlay=30:10 [out]&quot;</span> water.mp4</span></span><br></pre></td></tr></table></figure><ul><li>-vf 中的 movie 指定 logo 位置。scale 指定 logo 大小。overlay 指定 logo 摆放的位置。</li></ul><p><strong>删除水印</strong></p><p>先通过 ffplay 找到要删除 LOGO 的位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffplay -i test.flv -vf delogo=x=806:y=20:w=70:h=80:show=1</span></span><br></pre></td></tr></table></figure><p>使用 delogo 滤镜删除 LOGO</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i test.flv -vf delogo=x=806:y=20:w=70:h=80 output.flv</span></span><br></pre></td></tr></table></figure><p><strong>视频缩小一倍</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -vf scale=iw/2:-1 scale.mp4</span></span><br></pre></td></tr></table></figure><ul><li>-vf scale 指定使用简单过滤器 scale，<code>iw/2:-1</code> 中的 iw 指定按整型取视频的宽度。 -1 表示高度随宽度一起变化。</li></ul><p><strong>视频裁剪</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i VR.mov  -vf crop=in_w-200:in_h-200 -c:v libx264 -c:a copy -video_size 1280x720 vr_new.mp4</span></span><br></pre></td></tr></table></figure><p>crop 格式：<code>crop=out_w:out_h:x:y</code></p><ul><li><p>out_w: 输出的宽度。可以使用 in_w 表式输入视频的宽度。</p></li><li><p>out_h: 输出的高度。可以使用 in_h 表式输入视频的高度。</p></li><li><p>x : X坐标</p></li><li><p>y : Y坐标</p></li></ul><p>如果 x 和 y 设置为 0, 说明从左上角开始裁剪。如果不写是从中心点裁剪。</p><p><strong>倍速播放</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -filter_complex <span class="string">&quot;[0:v]setpts=0.5*PTS[v];[0:a]atempo=2.0[a]&quot;</span> -map <span class="string">&quot;[v]&quot;</span> -map <span class="string">&quot;[a]&quot;</span> speed2.0.mp4</span></span><br></pre></td></tr></table></figure><ul><li><p>-filter_complex 复杂滤镜，<code>[0:v]</code> 表示第一个（文件索引号是 0）文件的视频作为输入。<code>setpts=0.5*PTS</code> 表示每帧视频的 pts 时间戳都乘 0.5 ，也就是差少一半。<code>[v]</code> 表示输出的别名。音频同理就不详述了。</p></li><li><p>map 可用于处理复杂输出，如可以将指定的多路流输出到一个输出文件，也可以指定输出到多个文件。”[v]” 复杂滤镜输出的别名作为输出文件的一路流。上面 map的用法是将复杂滤镜输出的视频和音频输出到指定文件中。</p></li></ul><p><strong>对称视频</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg  -i out.mp4 -filter_complex <span class="string">&quot;[0:v]pad=w=2*iw[a];[0:v]hflip[b];[a][b]overlay=x=w&quot;</span> duicheng.mp4</span></span><br></pre></td></tr></table></figure><ul><li>hflip 水平翻转</li></ul><p>如果要修改为垂直翻转可以用 vflip。</p><p><strong>画中画</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -i out1.mp4 -filter_complex <span class="string">&quot;[1:v]scale=w=176:h=144:force_original_aspect_ratio=decrease[ckout];[0:v][ckout]overlay=x=W-w-10:y=0[out]&quot;</span> -map <span class="string">&quot;[out]&quot;</span> -movflags faststart new.mp4</span></span><br></pre></td></tr></table></figure><p><strong>录制画中画</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg  -f avfoundation -i <span class="string">&quot;1&quot;</span> -framerate 30 -f avfoundation -i <span class="string">&quot;0:0&quot;</span></span> </span><br><span class="line">-r 30 -c:v libx264 -preset ultrafast </span><br><span class="line">-c:a libfdk_aac -profile:a aac_he_v2 -ar 44100 -ac 2 </span><br><span class="line">-filter_complex &quot;[1:v]scale=w=176:h=144:force_original_aspect_ratio=decrease[a];[0:v][a]overlay=x=W-w-10:y=0[out]&quot; </span><br><span class="line">-map &quot;[out]&quot; -movflags faststart -map 1:a b.mp4</span><br></pre></td></tr></table></figure><p><strong>多路视频拼接</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg  -f avfoundation -i <span class="string">&quot;1&quot;</span> -framerate 30 -f avfoundation   -i <span class="string">&quot;0:0&quot;</span> -r 30 -c:v libx264 -preset ultrafast -c:a libfdk_aac -profile:a aac_he_v2 -ar 44100 -ac 2 -filter_complex <span class="string">&quot;[0:v]scale=320:240[a];[a]pad=640:240[b];[b][1:v]overlay=320:0[out]&quot;</span> -map <span class="string">&quot;[out]&quot;</span> -movflags faststart  -map 1:a  c.mp4</span></span><br></pre></td></tr></table></figure><h2 id="11-音视频的拼接与裁剪"><a href="#11-音视频的拼接与裁剪" class="headerlink" title="11. 音视频的拼接与裁剪"></a>11. <strong>音视频的拼接与裁剪</strong></h2><p><strong>裁剪</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -ss 00:00:00 -t 10 out1.mp4</span></span><br></pre></td></tr></table></figure><ul><li><p>-ss 指定裁剪的开始时间，精确到秒</p></li><li><p>-t 被裁剪后的时长。</p></li></ul><p><strong>合并</strong></p><p>首先创建一个 inputs.txt 文件，文件内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file <span class="string">&#x27;1.flv&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file <span class="string">&#x27;2.flv&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">file <span class="string">&#x27;3.flv&#x27;</span></span></span><br></pre></td></tr></table></figure><p>然后执行下面的命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -f concat -i inputs.txt -c copy output.flv</span></span><br></pre></td></tr></table></figure><p><strong>hls切片</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -c:v libx264 -c:a libfdk_aac -strict -2 -f hls  out.m3u8</span></span><br></pre></td></tr></table></figure><ul><li><p>-strict -2 指明音频使有AAC。</p></li><li><p>-f hls 转成 m3u8 格式。</p></li></ul><h2 id="12-视频图片互转"><a href="#12-视频图片互转" class="headerlink" title="12. 视频图片互转"></a>12. 视频图片互转</h2><p><strong>视频转 JPEG</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i test.flv -r 1 -f image2 image-%3d.jpeg</span></span><br></pre></td></tr></table></figure><p><strong>视频转 gif</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i out.mp4 -ss 00:00:00 -t 10 out.gif</span></span><br></pre></td></tr></table></figure><p><strong>图片转视频</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg  -f image2 -i image-%3d.jpeg images.mp4</span></span><br></pre></td></tr></table></figure><h2 id="13-直播相关"><a href="#13-直播相关" class="headerlink" title="13. 直播相关"></a>13. <strong>直播相关</strong></h2><p><strong>推流</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -re -i out.mp4 -c copy -f flv rtmp://server/live/streamName</span></span><br></pre></td></tr></table></figure><p><strong>拉流保存</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i rtmp://server/live/streamName -c copy dump.flv</span></span><br></pre></td></tr></table></figure><p><strong>转流</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -i rtmp://server/live/originalStream -c:a copy -c:v copy -f flv rtmp://server/live/h264Stream</span></span><br></pre></td></tr></table></figure><p><strong>实时推流</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffmpeg -framerate 15 -f avfoundation -i <span class="string">&quot;1&quot;</span> -s 1280x720 -c:v libx264  -f  flv rtmp://localhost:1935/live/room</span></span><br></pre></td></tr></table></figure><h2 id="14-ffplay"><a href="#14-ffplay" class="headerlink" title="14. ffplay"></a>14. <strong>ffplay</strong></h2><p><strong>播放 YUV 数据</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffplay -pix_fmt nv12 -s 192x144 1.yuv</span></span><br></pre></td></tr></table></figure><p><strong>播放 YUV 中的 Y 平面</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">ffplay -pix_fmt nv21 -s 640x480 -vf extractplanes=<span class="string">&#x27;y&#x27;</span> 1.yuv</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1. 前言&quot;&gt;&lt;/a&gt;1. 前言&lt;/h2&gt;&lt;p&gt;FFMPEG 是特别强大的专门用于处理音视频的开源库。你既可以使用它的 API 对音视频进行处理，也可以使用它提供的工具，如 ffmpeg, ffplay, ffprobe，来编辑你的音视频文件。&lt;/p&gt;
&lt;p&gt;本文将简要介绍一下 FFMPEG 库的基本目录结构及其功能，然后详细介绍一下我们在日常工作中，如何使用 ffmpeg 提供的工具来处理音视频文件。&lt;/p&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>音视频核心技术</title>
    <link href="http://miaopei.github.io/2019/04/30/FFmpeg/%E9%9F%B3%E8%A7%86%E9%A2%91%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/"/>
    <id>http://miaopei.github.io/2019/04/30/FFmpeg/%E9%9F%B3%E8%A7%86%E9%A2%91%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF/</id>
    <published>2019-04-30T06:14:50.000Z</published>
    <updated>2024-06-13T07:12:12.262Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="825c322e6d67f19ec75e50ea54f3d62aa97a93bdd37d8b00477e994377cae7bb"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>音视频入门知识</title>
    <link href="http://miaopei.github.io/2019/04/23/FFmpeg/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8/"/>
    <id>http://miaopei.github.io/2019/04/23/FFmpeg/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%9F%B3%E8%A7%86%E9%A2%91%E5%85%A5%E9%97%A8/</id>
    <published>2019-04-23T02:14:50.000Z</published>
    <updated>2024-06-13T01:40:57.250Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="60ee7efdb68831f6f39e6a57d0efe624756d8a430841b36e9901587594e88220"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-xray">      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>      </label>      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>      </svg>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">有东西被加密了, 请输入密码查看.</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg入门</title>
    <link href="http://miaopei.github.io/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/"/>
    <id>http://miaopei.github.io/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/</id>
    <published>2019-04-20T02:14:50.000Z</published>
    <updated>2024-06-13T08:46:04.848Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本文以文档的形式来描述FFmpeg怎么入门，这也是为以后写文档做的一个大题框架格式。</p></blockquote><h1 id="1-文档介绍"><a href="#1-文档介绍" class="headerlink" title="1. 文档介绍"></a>1. 文档介绍</h1><h2 id="1-1-文档目的"><a href="#1-1-文档目的" class="headerlink" title="1.1 文档目的"></a>1.1 文档目的</h2><p>整理出开源代码 ffmpeg 的资料，方便公司同事后续使用。</p><span id="more"></span><h2 id="1-2-文档范围"><a href="#1-2-文档范围" class="headerlink" title="1.2 文档范围"></a>1.2 文档范围</h2><p>较为详细的介绍 ffmpeg 的功能、使用以及二次开发。</p><h2 id="1-3-读者对象"><a href="#1-3-读者对象" class="headerlink" title="1.3 读者对象"></a>1.3 读者对象</h2><p>希望了解 ffmpeg 知识，从事 USM 及 IPTV 的同事。</p><h2 id="1-4-参考文献"><a href="#1-4-参考文献" class="headerlink" title="1.4 参考文献"></a>1.4 参考文献</h2><p>TODO</p><h2 id="1-5-术语与缩写解释"><a href="#1-5-术语与缩写解释" class="headerlink" title="1.5 术语与缩写解释"></a>1.5 术语与缩写解释</h2><table><thead><tr><th>缩略语&#x2F;术语</th><th>全 称</th><th>说 明</th></tr></thead><tbody><tr><td>ffmpeg</td><td>Fast forword mpeg</td><td>音视频转换器</td></tr><tr><td>ffplay</td><td>Fast forword play</td><td>用 ffmpeg 实现的播放器</td></tr><tr><td>ffserver</td><td>Fast forword server</td><td>用 ffmpeg 实现的 rstp 服务器</td></tr><tr><td>ffprobe</td><td>Fast forword probe</td><td>用来输入分析输入流。</td></tr></tbody></table><h1 id="2-FFmpeg-支持能力说明"><a href="#2-FFmpeg-支持能力说明" class="headerlink" title="2. FFmpeg 支持能力说明"></a>2. FFmpeg 支持能力说明</h1><h2 id="2-1-FFmpeg-介绍及安装"><a href="#2-1-FFmpeg-介绍及安装" class="headerlink" title="2.1 FFmpeg 介绍及安装"></a>2.1 FFmpeg 介绍及安装</h2><h3 id="2-1-1-FFmpeg-简介"><a href="#2-1-1-FFmpeg-简介" class="headerlink" title="2.1.1 FFmpeg 简介"></a>2.1.1 FFmpeg 简介</h3><p>FFmpeg 是一个开源免费跨平台的视频和音频流方案，属于自由软件，采用 LGPL 或 GPL 许可证（依据你选择的组件）。它提供了录制、转换以及流化音视频的完整解决方案。它包含了非常先进的音频&#x2F;视频编解码库 libavcodec，为了保证高可移植性和编解码质量，libavcodec 里很多 codec 都是从头开发的。</p><p>FFmpeg 项目由以下几部分组成:</p><p>（1）ffmpeg 视频文件转换命令行工具, 也支持经过实时电视卡抓取和编码成视频文件.</p><p>（2）ffserver 基于 HTTP、RTSP 用于实时广播的多媒体服务器. 也支持时间平移</p><p>（3）ffplay 用 SDL 和 FFmpeg 库开发的一个简单的媒体播放器</p><p>（4）libavcodec 一个包含了所有 FFmpeg 音视频编解码器的库. 为了保证最优性能和高可复用性, 大多数编解码器从头开发的.</p><p>（5）libavformat 一个包含了所有的普通音视格式的解析器和产生器的库</p><h3 id="2-1-2-FFmpeg-安装"><a href="#2-1-2-FFmpeg-安装" class="headerlink" title="2.1.2 FFmpeg 安装"></a>2.1.2 FFmpeg 安装</h3><p>将所有源代码压缩在一个文件夹中，例如 <code>/绝对路径/ffmpeg</code>。</p><p>在终端输入以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /绝对路径/ffmpeg</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure   <span class="comment">#(此时，会出现问题。然后重新输入./configure –disable-yasm-)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">Make</span></span><br></pre></td></tr></table></figure><p>至此，ffmpeg 安装编译通过，可以进行对音视频的操作。</p><p>ffplay 的编译需要依赖于 SDL 库，所以要想编译成功 ffplay，必须先安装 SDL 库，</p><p>安装方法：下载最新版本的 SDL 相应版本的 SDL 源码，编译，即可生成 SDL 库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">首先下载 SDL 软件包</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">configure --prefix=/usr/local</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make &amp;&amp; make install</span></span><br></pre></td></tr></table></figure><h2 id="2-2-FFmpeg-参数说明"><a href="#2-2-FFmpeg-参数说明" class="headerlink" title="2.2 FFmpeg 参数说明"></a>2.2 FFmpeg 参数说明</h2><h3 id="2-2-1-通用选项"><a href="#2-2-1-通用选项" class="headerlink" title="2.2.1 通用选项"></a>2.2.1 通用选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-L license</span><br><span class="line">-h 帮助</span><br><span class="line">-fromats 显示可用的格式，编解码的，协议的。</span><br><span class="line">-f fmt 强迫采用格式 fmt</span><br><span class="line">-i filename 输入文件</span><br><span class="line">-y 覆盖输出文件</span><br><span class="line">-t duration 设置纪录时间 hh:mm:ss[.xxx]格式的记录时间也支持</span><br><span class="line">-ss position 搜索到指定的时间 [-]hh:mm:ss[.xxx]的格式也支持</span><br><span class="line">-title string 设置标题</span><br><span class="line">-author string 设置作者</span><br><span class="line">-copyright string 设置版权</span><br><span class="line">-comment string 设置评论</span><br><span class="line">-target type 设置目标文件类型(vcd，svcd，dvd) 所有的格式选项（比特率，编解码以及缓冲区大小）自动设置 ，只需要输入如下的就可以了：</span><br><span class="line">ffmpeg -i myfile.avi -target vcd /tmp/vcd.mpg</span><br><span class="line">-hq 激活高质量设置</span><br><span class="line">-itsoffset offset 设置以秒为基准的时间偏移，该选项影响所有后面的输入文件。该偏移被加到输 入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset 秒。</span><br><span class="line">[-]hh:mm:ss[.xxx] 的格式也支持</span><br></pre></td></tr></table></figure><h3 id="2-2-2-视频选项"><a href="#2-2-2-视频选项" class="headerlink" title="2.2.2 视频选项"></a>2.2.2 视频选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">-b bitrate 设置比特率，缺省 200kb/s</span><br><span class="line">-r fps 设置帧频 缺省 25</span><br><span class="line">-s size 设置帧大小 格式为 WXH 缺省 160X128.下面的简写也可以直接使用：</span><br><span class="line">Sqcif 128X96 qcif 176X144 cif 252X288 4cif 704X576</span><br><span class="line">-aspect aspect 设置横纵比 4:3 16:9 或 1.3333 1.7777</span><br><span class="line">-croptop size 设置顶部切除带大小 像素单位</span><br><span class="line">-cropbottom size –cropleft size –cropright size 底部，左边，右边切除带大小。</span><br><span class="line">-padtop size 设置顶部补齐的大小 像素单位</span><br><span class="line">-padbottom size –padleft size –padright size –padcolor color 设置补齐条大小</span><br><span class="line">和颜色(hex，6 个 16 进制的数，红:绿:兰排列，比如 000000 代表黑色)</span><br><span class="line">-vn 不做视频记录</span><br><span class="line">-bt tolerance 设置视频码率容忍度 kbit/s</span><br><span class="line">-maxrate bitrate 设置最大视频码率容忍度</span><br><span class="line">-minrate bitreate 设置最小视频码率容忍度</span><br><span class="line">-bufsize size 设置码率控制缓冲区大小</span><br><span class="line">-vcodec codec 强制使用 codec 编解码方式。 如果用 copy 表示原始编解码数据必须被拷贝。</span><br><span class="line">-sameq 使用同样视频质量作为源（VBR）</span><br><span class="line">-pass n 选择处理遍数（1 或者 2）。两遍编码非常有用。第一遍生成统计信息，第二遍生成精确的请求的码率</span><br><span class="line">-passlogfile file 选择两遍的纪录文件名为 file</span><br></pre></td></tr></table></figure><h3 id="2-2-3-高级视频选项"><a href="#2-2-3-高级视频选项" class="headerlink" title="2.2.3 高级视频选项"></a>2.2.3 高级视频选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">-g gop_size 设置图像组大小</span><br><span class="line">-intra 仅适用帧内编码</span><br><span class="line">-qscale q 使用固定的视频量化标度(VBR)</span><br><span class="line">-qmin q 最小视频量化标度(VBR)</span><br><span class="line">-qmax q 最大视频量化标度(VBR)</span><br><span class="line">-qdiff q 量化标度间最大偏差 (VBR)</span><br><span class="line">-qblur blur 视频量化标度柔化(VBR)</span><br><span class="line">-qcomp compression 视频量化标度压缩(VBR)</span><br><span class="line">-rc_init_cplx complexity 一遍编码的初始复杂度</span><br><span class="line">-b_qfactor factor 在 p 和 b 帧间的 qp 因子</span><br><span class="line">-i_qfactor factor 在 p 和 i 帧间的 qp 因子</span><br><span class="line">-b_qoffset offset 在 p 和 b 帧间的 qp 偏差</span><br><span class="line">-i_qoffset offset 在 p 和 i 帧间的 qp 偏差</span><br><span class="line">-rc_eq equation 设置码率控制方程 默认 tex^qComp</span><br><span class="line">-rc_override override 特定间隔下的速率控制重载</span><br><span class="line">-me method 设置运动估计的方法 可用方法有 zero phods log x1 epzs(缺省) full</span><br><span class="line">-dct_algo algo 设置 dct 的算法可用的有 0 FF_DCT_AUTO 缺省的 DCT </span><br><span class="line">1 FF_DCT_FASTINT </span><br><span class="line">2 FF_DCT_INT </span><br><span class="line">3 FF_DCT_MMX </span><br><span class="line">4 FF_DCT_MLIB </span><br><span class="line">5 FF_DCT_ALTIVEC</span><br><span class="line">-idct_algo algo 设置 idct 算法。可用的有 0 FF_IDCT_AUTO 缺省的 IDCT </span><br><span class="line">1 FF_IDCT_INT </span><br><span class="line">2 FF_IDCT_SIMPLE </span><br><span class="line">3 FF_IDCT_SIMPLEMMX </span><br><span class="line">4 FF_IDCT_LIBMPEG2MMX </span><br><span class="line">5 FF_IDCT_PS2 </span><br><span class="line">6 FF_IDCT_MLIB </span><br><span class="line">7 FF_IDCT_ARM </span><br><span class="line">8 FF_IDCT_ALTIVEC </span><br><span class="line">9 FF_IDCT_SH4 </span><br><span class="line">10 FF_IDCT_SIMPLEARM</span><br><span class="line">-er n 设置错误残留为 n 1 FF_ER_CAREFULL 缺省 </span><br><span class="line">2 FF_ER_COMPLIANT </span><br><span class="line">3 FF_ER_AGGRESSIVE </span><br><span class="line">4 FF_ER_VERY_AGGRESSIVE</span><br><span class="line">-ec bit_mask 设置错误掩蔽为 bit_mask ， 该值为如下值的位掩码 </span><br><span class="line">1 FF_EC_GUESS_MVS (default=enabled) </span><br><span class="line">2 FF_EC_DEBLOCK (default=enabled)</span><br><span class="line">-bf frames 使用 frames B 帧，支持 mpeg1，mpeg2，mpeg4</span><br><span class="line">-mbd mode 宏块决策 0 FF_MB_DECISION_SIMPLE 使 用 mb_cmp </span><br><span class="line">1 FF_MB_DECISION_BITS </span><br><span class="line">2 FF_MB_DECISION_RD</span><br><span class="line">-4mv 使用 4 个运动矢量 仅用于 mpeg4</span><br><span class="line">-part 使用数据划分 仅用于 mpeg4</span><br><span class="line">-bug param 绕过没有被自动监测到编码器的问题</span><br><span class="line">-strict strictness 跟标准的严格性</span><br><span class="line">-aic 使能高级帧内编码 h263+</span><br><span class="line">-umv 使能无限运动矢量 h263+</span><br><span class="line">-deinterlace 不采用交织方法</span><br><span class="line">-interlace 强迫交织法编码 仅对 mpeg2 和 mpeg4 有效。当你的输入是交织的并且你想要保持交织以最小图像损失的时候采用该选项。可选的方法是不交织，但是损失更大</span><br><span class="line">-psnr 计算压缩帧的 psnr</span><br><span class="line">-vstats 输出视频编码统计到 vstats_hhmmss.log</span><br><span class="line">-vhook module 插入视频处理模块 module 包括了模块名和参数，用空格分开</span><br></pre></td></tr></table></figure><h3 id="2-2-4-音频选项"><a href="#2-2-4-音频选项" class="headerlink" title="2.2.4 音频选项"></a>2.2.4 音频选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-ab bitrate 设置音频码率</span><br><span class="line">-ar freq 设置音频采样率</span><br><span class="line">-ac channels 设置通道 缺省为 1</span><br><span class="line">-an 不使能音频纪录</span><br><span class="line">-acodec codec 使用 codec 编解码</span><br></pre></td></tr></table></figure><h3 id="2-2-5-音频-视频捕获选项"><a href="#2-2-5-音频-视频捕获选项" class="headerlink" title="2.2.5 音频&#x2F;视频捕获选项"></a>2.2.5 音频&#x2F;视频捕获选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-vd device 设置视频捕获设备。比如/dev/video0</span><br><span class="line">-vc channel 设置视频捕获通道 DV1394 专用</span><br><span class="line">-tvstd standard 设置电视标准 NTSC PAL(SECAM)</span><br><span class="line">-dv1394 设置 DV1394 捕获</span><br><span class="line">-av device 设置音频设备 比如/dev/dsp</span><br></pre></td></tr></table></figure><h3 id="2-2-6-高级选项"><a href="#2-2-6-高级选项" class="headerlink" title="2.2.6 高级选项"></a>2.2.6 高级选项</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-map file:stream 设置输入流映射</span><br><span class="line">-debug 打印特定调试信息</span><br><span class="line">-benchmark 为基准测试加入时间</span><br><span class="line">-hex 倾倒每一个输入包</span><br><span class="line">-bitexact 仅使用位精确算法 用于编解码测试</span><br><span class="line">-ps size 设置包大小，以 bits 为单位</span><br><span class="line">-re 以本地帧频读数据，主要用于模拟捕获设备</span><br><span class="line">-loop 循环输入流。只工作于图像流，用于 ffserver 测试</span><br></pre></td></tr></table></figure><h3 id="2-2-7-FFmpeg-参数实例"><a href="#2-2-7-FFmpeg-参数实例" class="headerlink" title="2.2.7 FFmpeg 参数实例"></a>2.2.7 FFmpeg 参数实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg -y -i /rootVideoConverter/123.avi -ab 56 -ar 22050 -b 1500 -r 15 -qscale 10 –s 480x350 /root/VideoConverter/234.flv</span></span><br><span class="line">============================================================</span><br><span class="line">-y （覆盖输出文件，即如果 1.***文件已经存在的话，不经提示就覆盖掉了）</span><br><span class="line">-i &quot;1.avi&quot;（输入文件是和 ffmpeg 在同一目录下的 1.avi 文件，可以自己加路径，改名字）</span><br><span class="line">-s （输出的分辨率，注意片源一定要是 16:9 的不然会变形）</span><br><span class="line">-r （帧数，一般就用这个吧）</span><br><span class="line">-b 1500（视频数据流量，用-b xxxx 的指令则使用固定码率，数字随便改，1500 以上没效果；</span><br><span class="line">还可以用动态码率如：-qscale 4 和-qscale 6，4 的质量比 6 高）</span><br><span class="line">-acodec aac（音频编码用 AAC）</span><br><span class="line">-ac 2 （声道数 1 或 2）</span><br><span class="line">-ar 24000（声音的采样频率，好像 PSP 只能支持 24000Hz）</span><br><span class="line">-ab 128 （ 音频数据流量，一般选择 32、64、96、128）</span><br><span class="line">-vol 200（200%的音量，自己改）</span><br><span class="line">-f psp （输出 psp 专用格式）</span><br><span class="line">-muxvb 768（给 PSP 机器识别的码率，一般选择 384、512 和 768）</span><br><span class="line">-ab bitrate 设置音频码率</span><br><span class="line">-ar freq 设置音频采样率</span><br><span class="line">-ss 指定时间点开始转换任务，(time_off set the start time offset)，-ss 后跟的时间单位为秒 .</span><br><span class="line">-s 320x240 指定分辨率</span><br><span class="line">-r 29.97 桢速率</span><br><span class="line">-bitexact 使用标准比特率</span><br><span class="line">-vcodec xvid 使用 xvid 压缩</span><br></pre></td></tr></table></figure><h2 id="2-3-FFmpeg-支持能力说明"><a href="#2-3-FFmpeg-支持能力说明" class="headerlink" title="2.3 FFmpeg 支持能力说明"></a>2.3 FFmpeg 支持能力说明</h2><h3 id="2-3-1-FFmpeg-对编码解码器的支持"><a href="#2-3-1-FFmpeg-对编码解码器的支持" class="headerlink" title="2.3.1 FFmpeg 对编码解码器的支持"></a>2.3.1 FFmpeg 对编码解码器的支持</h3><p>ffmpeg 支持的编解码器种类共有 280 多种，涵盖了几乎所有常见音视频编码格式，能解码几乎所有的音视频，每种音视频编解码器的实现都在 libavcodec 目录下有具体的C 语言实现，具体的支持情况参见：</p><blockquote><p><a href="">ffmpeg支持的编解码器</a></p></blockquote><p>注：编码器和解码器的名称不是完全匹配的，因此有些编码器没有对应相同名称的解码器，反之，<br>解码器也一样。即使编码和解码都支持也不一定是完全对应的，例如 h263 解码器对应有 h263p 和 h263 编码器。</p><h3 id="2-3-2-FFmpeg-对容器格式的支持"><a href="#2-3-2-FFmpeg-对容器格式的支持" class="headerlink" title="2.3.2 FFmpeg 对容器格式的支持"></a>2.3.2 FFmpeg 对容器格式的支持</h3><p>ffmpeg 支持对绝大多数的容器格式的读写操作，共计 190 多种，涵盖了互联网上各种常见媒体格式及日常生活中及专业应用中的各种媒体格式。详细的支持情况参见：</p><blockquote><p><a href="">FFmpeg支持的媒体文件格式</a></p></blockquote><h3 id="2-3-3-FFmpeg-对过滤器的支持"><a href="#2-3-3-FFmpeg-对过滤器的支持" class="headerlink" title="2.3.3 FFmpeg 对过滤器的支持"></a>2.3.3 FFmpeg 对过滤器的支持</h3><table><thead><tr><th>Filters</th><th>说明</th></tr></thead><tbody><tr><td>aformat</td><td>Convert the input audio to one of the specified formats.</td></tr><tr><td>anull</td><td>Pass the source unchanged to the output.</td></tr><tr><td>aresample</td><td>Resample audio data.</td></tr><tr><td>ashowinfo</td><td>Show textual information for each audio frame.</td></tr><tr><td>abuffer</td><td>Buffer audio frames， and make them accessible to the filterchain.</td></tr><tr><td>anullsrc</td><td>Null audio source， never return audio frames.</td></tr><tr><td>abuffersink</td><td>Buffer audio frames， and make them available to the end of the filter graph.</td></tr><tr><td>anullsink</td><td>Do absolutely nothing with the input audio.</td></tr><tr><td>copy</td><td>Copy the input video unchanged to the output.</td></tr><tr><td>crop</td><td>Crop the input video to <code>width:height:x:y</code>.</td></tr><tr><td>drawbox</td><td>Draw a colored box on the input video.</td></tr><tr><td>fade</td><td>Fade in&#x2F;out input video</td></tr><tr><td>fieldorder</td><td>Set the field order.</td></tr><tr><td>fifo</td><td>Buffer input images and send them when they are requested.</td></tr><tr><td>format</td><td>Convert the input video to one of the specified pixel formats.</td></tr><tr><td>gradfun</td><td>Debands video quickly using gradients.</td></tr><tr><td>hflip</td><td>Horizontally flip the input video.</td></tr><tr><td>lut</td><td>Compute and apply a lookup table to the RGB&#x2F;YUV input video.</td></tr><tr><td>lutrgb</td><td>Compute and apply a lookup table to the RGB input video.</td></tr><tr><td>lutyuv</td><td>Compute and apply a lookup table to the YUV input video.</td></tr><tr><td>negate</td><td>Negate input video.</td></tr><tr><td>noformat</td><td>Force libavfilter not to use any of the specified pixel formats for the input to the next filter.</td></tr><tr><td>null</td><td>Pass the source unchanged to the output.</td></tr><tr><td>overlay</td><td>Overlay a video source on top of the input.</td></tr><tr><td>pad</td><td>Pad input image to <code>width:height[:x:y[:color]] (default x and y: 0， default color: black)</code>.</td></tr><tr><td>pixdesctest</td><td>Test pixel format definitions.</td></tr><tr><td>scale</td><td>Scale the input video to width:height size and&#x2F;or convert the image format.</td></tr><tr><td>select</td><td>Select frames to pass in output.</td></tr><tr><td>setdar</td><td>Set the frame display aspect ratio.</td></tr><tr><td>setpts</td><td>Set PTS for the output video frame.</td></tr><tr><td>setsar</td><td>Set the pixel sample aspect ratio.</td></tr><tr><td>settb</td><td>Set timebase for the output link.</td></tr><tr><td>showinfo</td><td>Show textual information for each video frame.</td></tr><tr><td>slicify</td><td>Pass the images of input video on to next video filter as multiple slices.</td></tr><tr><td>split</td><td>Pass on the input to two outputs.</td></tr><tr><td>transpose</td><td>Transpose input video.</td></tr><tr><td>unsharp</td><td>Sharpen or blur the input video.</td></tr><tr><td>vflip</td><td>Flip the input video vertically.</td></tr><tr><td>buffer</td><td>Buffer video frames， and make them accessible to the filterchain.</td></tr><tr><td>color</td><td>Provide an uniformly colored input， syntax is: [color[:size[:rate]]]</td></tr><tr><td>movie</td><td>Read from a movie source.</td></tr><tr><td>nullsrc</td><td>Null video source， never return images.</td></tr><tr><td>rgbtestsrc</td><td>Generate RGB test pattern.</td></tr><tr><td>testsrc</td><td>Generate test pattern.</td></tr><tr><td>buffersink</td><td>Buffer video frames， and make them available to the end of the filter graph.</td></tr><tr><td>nullsink</td><td>Do absolutely nothing with the input video.</td></tr></tbody></table><h3 id="2-3-4-FFmpeg-对图像颜色空间的支持"><a href="#2-3-4-FFmpeg-对图像颜色空间的支持" class="headerlink" title="2.3.4 FFmpeg 对图像颜色空间的支持"></a>2.3.4 FFmpeg 对图像颜色空间的支持</h3><p>ffmpeg 支持常见的图像颜色空间，并且在 libavswcale 中定义了颜色空间转换的相关函数实现各种颜色模式的互转。具体的支持情况见:</p><blockquote><p><a href="">FFmpeg支持的图像颜色空间</a></p></blockquote><h2 id="2-4-FFmpeg-功能及使用说明"><a href="#2-4-FFmpeg-功能及使用说明" class="headerlink" title="2.4 FFmpeg 功能及使用说明"></a>2.4 FFmpeg 功能及使用说明</h2><h3 id="2-4-1-ffplay-对多媒体的支持能力验证"><a href="#2-4-1-ffplay-对多媒体的支持能力验证" class="headerlink" title="2.4.1 ffplay 对多媒体的支持能力验证"></a>2.4.1 ffplay 对多媒体的支持能力验证</h3><p><strong>一、视频</strong></p><p><code>3gp 177X144</code> 支持播放，在 windows 下播放正常，但是在 linux 下面偶有 BUG 如果发现画面无法显示而声音可以播放的情况下 可以试着切换全屏或者切换分辨率。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">AVI 208X176 支持</span><br><span class="line"> 320X240 支持</span><br><span class="line"> 720X400 支持</span><br><span class="line"> 720X576 支持</span><br><span class="line">DAT 352X288 支持</span><br><span class="line">DiVX 720X576 支持</span><br><span class="line">MKV 320X240 支持</span><br><span class="line">352X288 支持</span><br><span class="line"> 704X304 支持</span><br><span class="line"> 720X576 支持</span><br><span class="line">MP4 320X240 支持</span><br><span class="line">352X288 支持</span><br><span class="line">        720X400 支持</span><br><span class="line">MPG 320X240 支持</span><br><span class="line"> 352X288 支持</span><br><span class="line"> 480X576 支持</span><br><span class="line"> 720X576 支持</span><br><span class="line"> 720X480 支持</span><br><span class="line">VOB 352X288 支持</span><br><span class="line">XVID 720X576 支持</span><br><span class="line">MOV 支持</span><br><span class="line">RMVB 支持 </span><br></pre></td></tr></table></figure><p><strong>二、音频</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">AC3 48KHZ 支持</span><br><span class="line">APE 11KHZ 支持</span><br><span class="line"> 22KHZ 支持</span><br><span class="line"> 44KHZ 支持</span><br><span class="line"> 48KHZ 支持</span><br><span class="line">MP3 32KHZ 64Kbps 支持</span><br><span class="line">        32KHZ 128KbpS 支持</span><br><span class="line">        32KHZ 160Kbps 支持</span><br><span class="line">        32KHZ 192Kbps 支持</span><br><span class="line">        32KHZ 320Kbps 支持</span><br><span class="line">        44KHZ64Kbps 支持</span><br><span class="line">        44KHZ 128Kbps 支持</span><br><span class="line">        44KHZ 160Kbps 支持</span><br><span class="line">        44KHZ 192Kbps 支持</span><br><span class="line">        44KHZ 320Kbps 支持</span><br><span class="line">        48KHZ 64Kbps 支持</span><br><span class="line">        48KHZ 128Kbps 支持</span><br><span class="line">        48KHZ 160Kbps 支持</span><br><span class="line">        48KHZ 192Kbps 支持</span><br><span class="line">        48KHZ 320Kbps 支持</span><br><span class="line">OGG 32KHZ 128Kbps 支持</span><br><span class="line">        32KHZ 192Kbps 支持</span><br><span class="line">        44KHZ 64Kbps 支持</span><br><span class="line">        44KHZ 128Kbps 支持</span><br><span class="line">        44KHZ 192Kbps 支持</span><br><span class="line">        48KHZ 64Kbps 支持</span><br><span class="line">        44KHZ 128Kbps 支持</span><br><span class="line">        44KHZ 192Kbps 支持</span><br><span class="line">WAV 11KHZ 支持</span><br><span class="line">        22KHZ 16Kbps 支持</span><br><span class="line">        44KHZ 16Kbps 支持</span><br><span class="line">        48KHZ 16Kbps 支持</span><br><span class="line">WMA 8KHZ 16Kbps 支持</span><br><span class="line">        11KHZ 16Kbps 支持</span><br><span class="line">        16KHZ 16Kbps 支持</span><br><span class="line">        22KHZ 16Kbps 支持</span><br><span class="line">        44KHZ 16Kbps 支持</span><br><span class="line">        48KHZ 16Kbps 支持</span><br></pre></td></tr></table></figure><p><strong>三、图像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PNG 支持</span><br><span class="line">JPG 支持</span><br><span class="line">JPEG 支持</span><br><span class="line">GIF 支持</span><br><span class="line">BMP 支持</span><br></pre></td></tr></table></figure><h3 id="2-4-2-FFmpeg-格式转换"><a href="#2-4-2-FFmpeg-格式转换" class="headerlink" title="2.4.2 FFmpeg 格式转换"></a>2.4.2 FFmpeg 格式转换</h3><p><strong>第一步：准备媒体</strong></p><p>前面已经讲的很清楚了，ffmpeg 如何安装不在赘述。准备好相应的文件，如图 2-1所示。</p><img data-src="/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/2-1.png" class="" title="2-1"><p><strong>第二步：启动 ffmpeg</strong></p><p>由于做的是格式转换，在 ffserver 上不能直观的看见结果，故我是在 linux 下进行的。打开终端，值得一提的是格式转换需要超级用户才能进行，故在命令行输入：<code>su，&lt;回车&gt;</code>，输入密码进入超级用户，本例中，以 FFmpeg 将 test.avi 转换为 test.mpg。在命令行中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi –r 25 –s 720x400 test.mpg</span></span><br></pre></td></tr></table></figure><p>其中原格式分辨率为 320x240，将转为 720x400，-r 前面已经解释其含义，表示设置帧频为 25。转换成功后如图 2-2 所示，前后两种格式播放效果如图 2-3 所示。相应的，转换为其他格式做相应的变化即可。</p><p>同时还可以在转换格式时进行强制的音视频转换，如 <code>–vcodec + 格式</code>，将会强制将视频按指定格式编码，<code>-acodec +格式</code>，将会强制按指定格式编码音频信息。在转换中有很多其他参数可以指定，如码率、分辨率、帧率等，具体按照 ffmpeg 的参数说明指定参数即可。但有一条转低不转高的原则需要注意，即品质差的音视频转换不建议转换到品质好的音视频。</p><img data-src="/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/2-2.png" class="" title="2-2"><img data-src="/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/2-3.png" class="" title="2-3"><p>再说说如何在转换视频的时候将音频合成到视频中，且覆盖其原来的音频。这个现在摸索出两种方法。</p><p><strong>方法一</strong>：需要两条命令实现，先在命令行中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi -an –r 25 test.mpg</span></span><br></pre></td></tr></table></figure><p>此时将生成一个没有声音的 test.mpg 视频，再在命令行中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.mpg –i test.mp3 –r 25 test1.mpg</span></span><br></pre></td></tr></table></figure><p>此时将会生成一个名为 test1.mpg 的视频。该视频播放时视频为 test.avi 的视频，但音频变为了 test.mp3 的音频了。</p><p><strong>方法二</strong>：只要一条指令即可实现。在命令行中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi –i test.mp3 –vcodec copy –acodec copy –r 25 test2.mpg</span></span><br></pre></td></tr></table></figure><p>此时将会生成一个名为 test2.mpg 的视频，播放时其视频为 test.avi 的视频，音频为 test.mp3。<code>–vcodec copy</code> 为 force video codec(‘copy’ to copy stream)。</p><p>有一点需要注意，文件命名不能有空格，否则会导致编译时不能通过。另外，<code>-an</code> 为不能使音频记录。</p><p><strong>第三步：播放媒体</strong></p><p>播放我们转换的媒体，看看是否满足我们当初的愿望，不出什么差错的话，是完全能够满足我们的要求的。</p><h3 id="2-4-3-FFmpeg-视频截图"><a href="#2-4-3-FFmpeg-视频截图" class="headerlink" title="2.4.3 FFmpeg 视频截图"></a>2.4.3 FFmpeg 视频截图</h3><p>截取一张 <code>300x200</code> 尺寸大小的格式为 jpg 的一张图片：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi –y –f image2 –t 0.001 –s 300x200 test.jpg</span></span><br></pre></td></tr></table></figure><p>要截取指定时间的图片，如 5 秒之后的：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi –y –f image2 –ss 5 –t 0.001 –s 300x200 test.jpg</span></span><br></pre></td></tr></table></figure><p>其中，<code>-ss</code> 后的单位为秒，也可写成：<code>-ss 00:00:05</code>。</p><p>把视频的前 30 帧转换为一个动态的 gif 图。需要说明的是，转换成功之后，如果用 ffplay 播放是看不出效果的，建议换成其他图片播放器播放。其转换命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi –vframes 30 –pix_fmt rgb24–y –f gif test.gif</span></span><br></pre></td></tr></table></figure><p>也可以从视频中的第 10 秒开始截取后面的 5 秒内容转换为一个无限重播的动态 gif 图。其命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i test.avi –pix_fmt rgb24 –ss 10 –t 5 –y –f gif test.gif</span></span><br></pre></td></tr></table></figure><p>上面两种动态 gif 都是只播一次，想让其一直播，可再加一个参数：<code>-loop_output 0</code>。</p><h3 id="2-4-4-FFmpeg-屏幕录制"><a href="#2-4-4-FFmpeg-屏幕录制" class="headerlink" title="2.4.4 FFmpeg 屏幕录制"></a>2.4.4 FFmpeg 屏幕录制</h3><p>屏幕录制其命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg -f x11grab -r 25 -s wxga -i :0.0 /tmp/outputFile.mpg</span></span><br></pre></td></tr></table></figure><p>其他相关参数可自行添加。需要说明的是，各个版本的 ffmpeg 对屏幕录制的命令不一。如果你只想录制一个应用程序窗口或者桌面上的一个固定区域，那么可以指定偏移位置和区域大小。使用 <code>xwininfo -frame</code> 命令可以完成查找上述参数。</p><p>注：ffmpeg 的屏幕录制功能只能在 Linux 环境下有效。并且在配置时需要添加 <code>–enable-x11grub</code> 指令，默认关闭。</p><h3 id="2-4-5-FFmpeg-音视频采集"><a href="#2-4-5-FFmpeg-音视频采集" class="headerlink" title="2.4.5 FFmpeg 音视频采集"></a>2.4.5 FFmpeg 音视频采集</h3><p>把摄像头的实时视频录制下来，存储为文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg -f video4linux -s 320x240 -r 10 -i /dev/video0 test.asf</span></span><br></pre></td></tr></table></figure><p>录音，其命令为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg –i /dev/dsp -f oss test.mp3</span></span><br></pre></td></tr></table></figure><h2 id="2-5-FFmpeg-应用实例"><a href="#2-5-FFmpeg-应用实例" class="headerlink" title="2.5 FFmpeg 应用实例"></a>2.5 FFmpeg 应用实例</h2><h3 id="2-5-1-用-FFserver-从文件生成流媒体"><a href="#2-5-1-用-FFserver-从文件生成流媒体" class="headerlink" title="2.5.1 用 FFserver 从文件生成流媒体"></a>2.5.1 用 FFserver 从文件生成流媒体</h3><p><strong>一、安装 ffmpeg</strong></p><p>在 ubuntu 下，运行 <code>sudo apt-get ffmpeg</code> 安装 ffmpeg，在其他 linux 操作系统下，见 ffmpeg 的编译过程（编译完成后可执行自动安装）。</p><p><strong>二、准备预播放的媒体文件</strong></p><p>如 test.Mp3，在本文档中，默认放入用户文件夹下得 Music 文件夹内.(直接从设备采集不在本文档叙述范围之内)</p><p><strong>三、修改 ffserver 配置信息</strong></p><p>ffserver 配置文件为: <code>/etc/ffserver.conf</code> 打开，填写配置信息.配置信息包括三方面:</p><p>（1）端口绑定等基本信息，在 ·&#x2F;etc&#x2F;ffserver.conf· 中有详细注释，在此不再重复，最终配置信息为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Port 8090</span><br><span class="line">BindAddress 0.0.0.0</span><br><span class="line">MaxHTTPConnections 2000</span><br><span class="line">MaxClients 1000</span><br><span class="line">MaxBandwidth 1000</span><br></pre></td></tr></table></figure><p>（2）媒体文件配置信息.本信息根据具体的媒体文件类型直接在配置文件中取消注释掉相应文件类型的配置信息，然后填写文件路径即可:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MP3 audio</span></span><br><span class="line">&lt;Stream test.mp3&gt;</span><br><span class="line">File &quot;/home/xiaoma/Music/test.mp3&quot;</span><br><span class="line">Format mp2</span><br><span class="line">NoVideo</span><br><span class="line">&lt;/Stream&gt;</span><br></pre></td></tr></table></figure><p><strong>四、启动 ffserver</strong></p><p>在终端中运行: <code>sudo ffserver -f /etc/ffserver.conf</code>  启动 ffserver.</p><p><strong>五、播放流媒体</strong></p><p>在浏览器中输入 <a href="">http://127.0.0.1:8090/test.mp3</a> 即可播放音乐.</p><p>在终端中输入 <code>ffplay http://localhost:8090/test.mp3</code> 可播放流媒体.</p><h3 id="2-5-2-用-FFserver-从设备生成实时流"><a href="#2-5-2-用-FFserver-从设备生成实时流" class="headerlink" title="2.5.2 用 FFserver 从设备生成实时流"></a>2.5.2 用 FFserver 从设备生成实时流</h3><p><strong>一、准备媒体</strong></p><p>按照上节步骤安装 ffmpeg，保证摄像头和声卡可用，将从摄像头和声卡获取音视频信息。</p><p><strong>二、修改 ffserver 配置信息</strong></p><p>ffserver 配置文件为: <code>/etc/ffserver.conf</code> 打开，填写配置信息.配置信息包括三方面:</p><p>（1）端口绑定等基本信息，在 <code>/etc/ffserver.conf</code> 中有详细注释，在此不再重复，最终配<br>置信息为:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Port 8090</span><br><span class="line">BindAddress 0.0.0.0</span><br><span class="line">MaxHTTPConnections 2000</span><br><span class="line">MaxClients 1000</span><br><span class="line">MaxBandwidth 1000</span><br></pre></td></tr></table></figure><p>（2）fend(传冲信息)，在文件播放中，基本不用动本配置信息，只需要根据具体情况分配缓冲文件.最终配置信息如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;Feed feed1.ffm&gt;</span><br><span class="line">File /tmp/feed1.ffm</span><br><span class="line">FileMaxSize 2M</span><br><span class="line">ACL allow 127.0.0.1</span><br><span class="line">&lt;/Feed&gt;</span><br></pre></td></tr></table></figure><p>（3）媒体文件配置信息.本信息根据具体的媒体文件类型直接在配置文件中取消注释掉相应文件类型的配置信息，然后填写文件路径即可:</p><p>(中间会有很多很多配置信息，都是关于音视频的，有些配置还不懂，慢慢摸索吧)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;Stream test1.mpg&gt;</span><br><span class="line">Feed feed1.ffm</span><br><span class="line">Format mpeg</span><br><span class="line">AudioBitRate 32</span><br><span class="line">AudioChannels 1</span><br><span class="line">AudioSampleRate 44100</span><br><span class="line">VideoBitRate 64</span><br><span class="line">VideoBufferSize 40</span><br><span class="line">VideoFrameRate 3</span><br><span class="line">VideoSize 160x128</span><br><span class="line">VideoGopSize 12</span><br><span class="line">&lt;/Stream&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Flash</span></span><br><span class="line">&lt;Stream test.swf&gt;</span><br><span class="line">Feed feed1.ffm</span><br><span class="line">Format swf</span><br><span class="line">VideoFrameRate 2</span><br><span class="line">VideoIntraOnly</span><br><span class="line">NoAudio</span><br><span class="line">&lt;/Stream&gt;</span><br></pre></td></tr></table></figure><p><strong>三、启动 FFserver</strong></p><p>在终端中运行: <code>sudo ffserver -f /etc/ffserver.conf</code> 启动 ffserver.</p><p><strong>四、启动 ffmpeg</strong></p><p>本例中，以 ffmpeg 作为实时摄像头采集输入.在命令行中输入:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg -f video4linux2 -r 25 -i /dev/video0 /tmp/feed1.ffm</span></span><br></pre></td></tr></table></figure><p>如果有音频设备，则采集音频的命令如下:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./ffmpeg -f oss -i /dev/dsp -f video4linux2 -r 25 -i /dev/video0 /tmp/feed1.ffm</span></span><br></pre></td></tr></table></figure><p>(音频格式参数自己配置)</p><p><strong>五、播放流媒体</strong></p><p>在浏览器中输入 <a href="">http://127.0.0.1:8090/test1.mpg</a> 即可播放音乐.</p><p>在终端中输入 <code>ffplay http://localhost:8090/test.swf</code> 可播放流媒体.</p><h1 id="3-FFmpeg-架构"><a href="#3-FFmpeg-架构" class="headerlink" title="3. FFmpeg 架构"></a>3. FFmpeg 架构</h1><h2 id="3-1-FFmpeg-文件结构"><a href="#3-1-FFmpeg-文件结构" class="headerlink" title="3.1 FFmpeg 文件结构"></a>3.1 FFmpeg 文件结构</h2><img data-src="/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/markdown-table.png" class="" title="markdown-table"><table>    <tr>        <td>目录</td>        <td>文件</td>        <td>简要说明</td>    </tr>    <tr>        <td rowspan="14">            <font style="color:red;font-weight:bold;">libavformat</font> </br></br>            主要存放ffmpeg</br>            支持的各种编解码</br>            器的实现及ffmpeg</br>            编解码功能相关的</br>            数据结构定义及函</br>            数定义和声明        </td>           <td >allcodecs.c</td>        <td>简单的注册类函数</td>    </tr>    <tr>        <td >avcodec.h</td>        <td >编解码相关结构体定义和函数原型声明</td>    </tr>    <tr>        <td >dsputil.c</td>        <td >限幅数组初始化</td>    </tr>    <tr>        <td >dsputil.h</td>        <td >限幅数组声明</td>    </tr>    <tr>        <td >imgconvert.c</td>        <td >颜色空间转换相关函数实现</td>    </tr>    <tr>        <td >imgconvert_template.h</td>        <td >颜色空间转换相关结构体定义和函数声明</td>    </tr>    <tr>        <td >utils_codec.c </td>        <td >一些解码相关的工具类函数的实现</td>    </tr>    <tr>        <td >mpeg4audio.c</td>        <td >mpeg4 音频编解码器的函数实现</td>    </tr>    <tr>        <td >mpeg4audio.h</td>        <td >mpeg4 音频编解码器的函数声明</td>    </tr>    <tr>        <td >mpeg4data.h</td>        <td >mpeg4 音视频编解码器的公用的函数声明及数据结构定义</td>    </tr>    <tr>        <td >mpeg4video.c </td>        <td >mpeg4 视频编解码器的函数实现</td>    </tr>    <tr>        <td >mpeg4video.h</td>        <td >mpeg4 视频编解码器的函数的声明及先关数据结构的定义</td>    </tr>    <tr>        <td >mpeg4videodec.c</td>        <td >mpeg4 视频解码器的函数实现</td>    </tr>    <tr>        <td >mpeg4videoenc.c</td>        <td >mpeg4 视频编码器的函数实现</td>    </tr>    <tr>        <td rowspan="14">            <font style="color:red;font-weight:bold;">libavformat</font> </br></br>            主要存放ffmpeg支</br>            持的各种媒体格式</br>            MUXER/DEMUXER</br>            和数据流协议的定</br>            义和实现文件以及</br>            ffmpeg解复用相</br>            关的数据结构及</br>            函数定        </td>           <td >allformats.c</td>        <td>简单注册类函数</td>    </tr>    <tr>        <td >avformat.h</td>        <td >文件和媒体格式相关函数声明和数据结构定义</td>    </tr>    <tr>        <td >avio.c</td>        <td >无缓冲 IO 相关函数实现</td>    </tr>    <tr>        <td >avio.h</td>        <td >无缓冲 IO 相关结构定义和函数声明</td>    </tr>    <tr>        <td >aviobuf.c</td>        <td >有缓冲数据 IO 相关函数实现</td>    </tr>    <tr>        <td >cutils.c</td>        <td >简单的字符串操作函数</td>    </tr>    <tr>        <td >utils_format.c</td>        <td >文件和媒体格式相关的工具函数的实现</td>    </tr>    <tr>        <td >file.c</td>        <td >文件 io 相关函数</td>    </tr>    <tr>        <td >......</td>        <td >其他相关媒体流 IO 的函数和数据结构实现文件。如：rtsp、http 等。</td>    </tr>    <tr>        <td >avi.c</td>        <td >AVI 格式的相关函数定西</td>    </tr>    <tr>        <td >avi.h</td>        <td >AVI 格式的相关函数声明及数据结构定义</td>    </tr>    <tr>        <td >avidec.c</td>        <td >AVI 格式 DEMUXER 相关函数定义</td>    </tr>    <tr>        <td >avienc.c</td>        <td >AVI 格式 MUXER 相关函数定义</td>    </tr>    <tr>        <td >......</td>        <td >其他媒体格式的 muxer/demuxer 相关函数及数据结构定义和声明文件</td>    </tr>    <tr>        <td rowspan="14">            <font style="color:red;font-weight:bold;">libavutil</font> </br></br>            主要存放ffmpeg</br>            工具类函数的定义        </td>           <td >avutil.h</td>        <td>简单的像素格式宏定义</td>    </tr>    <tr>        <td >bswap.h</td>        <td >简单的大小端转换函数的实现</td>    </tr>    <tr>        <td >commom.h</td>        <td >公共的宏定义和简单函数的实现</td>    </tr><tr>        <td >mathematics.c</td>        <td >数学运算函数实现</td>    </tr>    <tr>        <td >rational.h</td>        <td >分数相关表示的函数实现</td>    </tr></table><h2 id="3-2-I-O-模块分析"><a href="#3-2-I-O-模块分析" class="headerlink" title="3.2 I\O 模块分析"></a>3.2 I\O 模块分析</h2><h3 id="3-2-1-概述"><a href="#3-2-1-概述" class="headerlink" title="3.2.1 概述"></a>3.2.1 概述</h3><p>ffmpeg 项目的数据 IO 部分主要是在 libavformat 库中实现，某些对于内存的操作部分在 libavutil 库中。数据 IO 是基于文件格式（Format）以及文件传输协议(Protocol)的，与具体的编解码标准无关。</p><p>ffmpeg 工程转码时数据 IO 层次关系如图所示：</p><img data-src="/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/ffmpeg%E8%BD%AC%E7%A0%81%E6%95%B0%E6%8D%AEIO%E6%B5%81%E7%A8%8B.png" class="" title="ffmpeg转码数据IO流程"><p>对于上面的数据 IO 流程，具体可以用下面的例子来说明，我们从一个 http 服务器获取音视频数据，格式是 flv 的，需要通过转码后变成 avi 格式，然后通过 udp 协议进行发布。其过程就如下所示：</p><ul><li>读入 http 协议数据流，根据 http 协议获取真正的文件数据（去除无关报文信息）；</li><li>根据 flv 格式对数据进行解封装；</li><li>读取帧进行转码操作；</li><li>按照目标格式 avi 进行封装；</li><li>通过 udp 协议发送出去。</li></ul><h3 id="3-2-2-相关数据结构介绍"><a href="#3-2-2-相关数据结构介绍" class="headerlink" title="3.2.2 相关数据结构介绍"></a>3.2.2 相关数据结构介绍</h3><p>在 libavformat 库中与数据 IO 相关的数据结构主要有 URLProtocol、URLContext、ByteIOContext、AVFormatContext 等，各结构之间的关系如图所示。</p><img data-src="/2019/04/20/FFmpeg/FFmpeg%E5%85%A5%E9%97%A8/libavformat%E5%BA%93%E4%B8%ADIO%E7%9B%B8%E5%85%B3%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB.png" class="" title="libavformat库中IO相关数据结构之间的关系"><p><strong>1、URLProtocol 结构</strong></p><p>表示广义的输入文件，该结构体提供了很多的功能函数，每一种广义的输入文件（如：file、pipe、tcp、rtp 等等）对应着一个 <code>URLProtocol</code> 结构，在 <code>av_register_all()</code> 中将该结构体初始化为一个链表，表头为 <code>avio.c</code> 里的 <code>URLProtocol *first_protocol = NULL;</code> 保存所有支持的输入文件协议，该结构体的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">URLProtocol</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">int</span> (*url_open)(URLContext *h， <span class="type">const</span> <span class="type">char</span> *url， <span class="type">int</span> flags);</span><br><span class="line">    <span class="type">int</span> (*url_read)(URLContext *h， <span class="type">unsigned</span> <span class="type">char</span> *buf， <span class="type">int</span> size);</span><br><span class="line">    <span class="type">int</span> (*url_write)(URLContext *h， <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf， <span class="type">int</span> size);</span><br><span class="line">    <span class="type">int64_t</span> (*url_seek)(URLContext *h， <span class="type">int64_t</span> pos， <span class="type">int</span> whence);</span><br><span class="line">    <span class="type">int</span> (*url_close)(URLContext *h);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">URLProtocol</span> *<span class="title">next</span>;</span></span><br><span class="line">    <span class="type">int</span> (*url_read_pause)(URLContext *h， <span class="type">int</span> pause);</span><br><span class="line">    <span class="type">int64_t</span> (*url_read_seek)(URLContext *h， <span class="type">int</span> stream_index，</span><br><span class="line">                             <span class="type">int64_t</span> timestamp， <span class="type">int</span> flags);</span><br><span class="line">    <span class="type">int</span> (*url_get_file_handle)(URLContext *h);</span><br><span class="line">    <span class="type">int</span> priv_data_size;</span><br><span class="line">    <span class="type">const</span> AVClass *priv_data_class;</span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">    <span class="type">int</span> (*url_check)(URLContext *h， <span class="type">int</span> mask);</span><br><span class="line">&#125; URLProtocol;</span><br></pre></td></tr></table></figure><p>注意到，<code>URLProtocol</code> 是一个链表结构，这是为了协议的统一管理，ffmpeg 项目中将所有的用到的协议都存放在一个全局变量 first_protocol 中，协议的注册是在 <code>av_register_all</code> 中完成的，新添加单个协议可以调用 <code>av_register_protocol2</code> 函数实现。而协议的注册就是将具体的协议对象添加至 <code>first_protocol</code> 链表的末尾。</p><p><code>URLProtocol</code> 在各个具体的文件协议中有一个具体的实例，如在 file 协议中定义为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">URLProtocol ff_file_protocol = &#123;</span><br><span class="line">    .name = <span class="string">&quot;file&quot;</span>，</span><br><span class="line">.url_open = file_open，</span><br><span class="line">.url_read = file_read，</span><br><span class="line">    .url_write = file_write，</span><br><span class="line">    .url_seek = file_seek，</span><br><span class="line">    .url_close = file_close，</span><br><span class="line">    .url_get_file_handle = file_get_handle，</span><br><span class="line">    .url_check = file_check，</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>2、URLContext 结构</strong></p><p>URLContext 提供了与当前打开的具体的文件协议（URL）相关数据的描述，在该结构中定义了指定当前 URL（即 filename 项）所要用到的具体的 URLProtocol，即：提供了一个在 URLprotocol 链表中找到具体项的依据，此外还有一些其它的标志性的信息，如 flags， is_streamed 等。它可以看成某一种协议的载体。其结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">URLContext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">const</span> AVClass *av_class; <span class="comment">///&lt; information for av_log(). Set by url_open().</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">URLProtocol</span> *<span class="title">prot</span>;</span></span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">    <span class="type">int</span> is_streamed; <span class="comment">/**&lt; true if streamed (no seek possible)， default = false */</span></span><br><span class="line">    <span class="type">int</span> max_packet_size; <span class="type">void</span> *priv_data;</span><br><span class="line">    <span class="type">char</span> *filename; <span class="comment">/**&lt; specified URL */</span></span><br><span class="line">    <span class="type">int</span> is_connected;</span><br><span class="line">&#125; URLContext;</span><br></pre></td></tr></table></figure><p>那么 ffmpeg 依据什么信息初始化 URLContext？然后又是如何初始化 URLContext的呢？</p><p>在打开一个 URL 时，全局函数 ffurl_open 会根据 filename 的前缀信息来确定 URL所使用的具体协议，并为该协议分配好资源，再调用 ffurl_connect 函数打开具体协议，即调用协议的 url_open，调用关系如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">av_open_input_file</span><span class="params">(AVFormatContext **ic_ptr， <span class="type">const</span> <span class="type">char</span> *filename，</span></span><br><span class="line"><span class="params"> AVInputFormat *fmt，<span class="type">int</span> buf_size，AVFormatParameters *ap)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">avformat_open_input</span><span class="params">(AVFormatContext **ps ， <span class="type">const</span> <span class="type">char</span> *filename ，</span></span><br><span class="line"><span class="params">AVInputFormat *fmt， AVDictionary **options)</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">init_input</span><span class="params">(AVFormatContext *s， <span class="type">const</span> <span class="type">char</span> *filename)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">avio_open</span><span class="params">(AVIOContext **s， <span class="type">const</span> <span class="type">char</span> *filename， <span class="type">int</span> flags)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ffurl_open</span><span class="params">(URLContext **puc， <span class="type">const</span> <span class="type">char</span> *filename， <span class="type">int</span> flags)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">ffurl_alloc</span><span class="params">(URLContext **puc， <span class="type">const</span> <span class="type">char</span> *filename， <span class="type">int</span> flags)</span></span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">url_alloc_for_protocol</span><span class="params">(URLContext **puc， <span class="keyword">struct</span> URLProtocol *up，</span></span><br><span class="line"><span class="params"><span class="type">const</span> <span class="type">char</span> *filename， <span class="type">int</span> flags)</span></span><br></pre></td></tr></table></figure><p>浅蓝色部分的函数完成了 URLContext 函数的初始化，URLContext 使 ffmpeg 外所暴露的接口是统一的，而不是对于不同的协议用不同的函数，这也是面向对象思维的体现。在此结构中还有一个值得说的是 priv_data 项，这是结构的一个可扩展项，具体协议可以根据需要添加相应的结构，将指针保存在这就行。</p><p><strong>3、AVIOContext 结构</strong></p><p>AVIOContext（即：ByteIOContext）是由 URLProtocol 和 URLContext 结构扩展而来，也是 ffmpeg 提供给用户的接口，它将以上两种不带缓冲的读取文件抽象为带缓冲的读取和写入，为用户提供带缓冲的读取和写入操作。数据结构定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buffer; <span class="comment">/**&lt; Start of the buffer. */</span></span><br><span class="line">    <span class="type">int</span> buffer_size; <span class="comment">/**&lt; Maximum buffer size */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf_ptr; <span class="comment">/**&lt; Current position in the buffer */</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *buf_end;</span><br><span class="line">    <span class="type">void</span> *opaque; <span class="comment">//关联 URLContext</span></span><br><span class="line">    <span class="type">int</span> (*read_packet)(<span class="type">void</span> *opaque， <span class="type">uint8_t</span> *buf， <span class="type">int</span> buf_size);</span><br><span class="line">    <span class="type">int</span> (*write_packet)(<span class="type">void</span> *opaque， <span class="type">uint8_t</span> *buf， <span class="type">int</span> buf_size);</span><br><span class="line">    <span class="type">int64_t</span> (*seek)(<span class="type">void</span> *opaque， <span class="type">int64_t</span> offset， <span class="type">int</span> whence);</span><br><span class="line">    <span class="type">int64_t</span> pos;</span><br><span class="line">    <span class="type">int</span> must_flush;</span><br><span class="line">    <span class="type">int</span> eof_reached; <span class="comment">/**&lt; true if eof reached */</span></span><br><span class="line">    <span class="type">int</span> write_flag; <span class="comment">/**&lt; true if open for writing */</span></span><br><span class="line">    <span class="type">int</span> max_packet_size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> checksum;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> *checksum_ptr;</span><br><span class="line">    <span class="type">unsigned</span> <span class="title function_">long</span> <span class="params">(*update_checksum)</span><span class="params">(<span class="type">unsigned</span> <span class="type">long</span> checksum， <span class="type">const</span> <span class="type">uint8_t</span> *buf，</span></span><br><span class="line"><span class="params">                                     <span class="type">unsigned</span> <span class="type">int</span> size)</span>;</span><br><span class="line">    <span class="type">int</span> error;</span><br><span class="line">    <span class="type">int</span> (*read_pause)(<span class="type">void</span> *opaque， <span class="type">int</span> pause);</span><br><span class="line">  <span class="type">int64_t</span> (*read_seek)(<span class="type">void</span> *opaque， <span class="type">int</span> stream_index，<span class="type">int64_t</span> timestamp，<span class="type">int</span> flags);</span><br><span class="line">    <span class="type">int</span> seekable;</span><br><span class="line">&#125; AVIOContext;</span><br></pre></td></tr></table></figure><p>结构简单的为用户提供读写容易实现的四个操作，read_packet write_packet read_pause read_seek，极大的方便了文件的读取，四个函数在加了缓冲机制后被中转到，URLContext 指向的实际的文件协议读写函数中。</p><p>下面给出 0.8 版本中是如何将 AVIOContext 的读写操作中转到实际文件中的。</p><p>在 avio_open（）函数中调用了 ffio_fdopen（）函数完成了对 AVIOContex 的初始化，其调用过程如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">avio_open</span><span class="params">(AVIOContext **s， <span class="type">const</span> <span class="type">char</span> *filename， <span class="type">int</span> flags)</span></span><br><span class="line"><span class="title function_">ffio_fdopen</span><span class="params">(s， h)</span>; <span class="comment">//h 是 URLContext 指针</span></span><br><span class="line">ffio_init_context(*s， buffer， buffer_size，h-&gt;flags &amp; AVIO_FLAG_WRITE， h，</span><br><span class="line">(<span class="type">void</span>*)ffurl_read，(<span class="type">void</span>*)ffurl_write，(<span class="type">void</span>*)ffurl_seek)</span><br></pre></td></tr></table></figure><p>函数调用完成了对 AVIOContext 的初始化，在初始化的过程中，将AVIOContext 的 read_packet 、 write_packet 、 seek 分别初始化为： ffurl_read ffurl_write ffurl_seek ， 而这三个函数又将具体的读写操作中转为：</p><p><code>h-&gt;prot-&gt;url_read、h-&gt;prot-&gt;url_write、h-&gt;prot-&gt;url_seek</code>，另外两个变量初始化时也被相应的中转，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(*s)-&gt;read_pause = (<span class="type">int</span> (*)(<span class="type">void</span> *， <span class="type">int</span>))h-&gt;prot-&gt;url_read_pause;</span><br><span class="line">(*s)-&gt;read_seek = (<span class="type">int64_t</span> (*)(<span class="type">void</span> *， <span class="type">int</span>， <span class="type">int64_t</span>， <span class="type">int</span>))h-&gt;prot-&gt;url_read_seek;</span><br></pre></td></tr></table></figure><p>所以，可以简要的描述为：AVIOContext 的接口口是加了缓冲后的 URLProtocol 的函数接口。</p><p>在 aviobuf.c 中定义了一系列关于 ByteIOContext 这个结构体的函数，如下</p><p><strong>put_xxx 系列：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">put_byte</span><span class="params">(ByteIOContext *s， <span class="type">int</span> b)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_buffer</span><span class="params">(ByteIOContext *s， <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> *buf， <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_le64</span><span class="params">(ByteIOContext *s， <span class="type">uint64_t</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_be64</span><span class="params">(ByteIOContext *s， <span class="type">uint64_t</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_le32</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_be32</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_le24</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_be24</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_le16</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_be16</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">int</span> val)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">put_tag</span><span class="params">(ByteIOContext *s， <span class="type">const</span> <span class="type">char</span> *tag)</span>;</span><br></pre></td></tr></table></figure><p><strong>get_xxx 系列：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">get_buffer</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">char</span> *buf， <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_partial_buffer</span><span class="params">(ByteIOContext *s， <span class="type">unsigned</span> <span class="type">char</span> *buf， <span class="type">int</span> size)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">get_byte</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_le24</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_le32</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">get_le64</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_le16</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">char</span> *<span class="title function_">get_strz</span><span class="params">(ByteIOContext *s， <span class="type">char</span> *buf， <span class="type">int</span> maxlen)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_be16</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_be24</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> <span class="title function_">get_be32</span><span class="params">(ByteIOContext *s)</span>;</span><br><span class="line"><span class="type">uint64_t</span> <span class="title function_">get_be64</span><span class="params">(ByteIOContext *s)</span>;</span><br></pre></td></tr></table></figure><p>这些 put_xxx 及 get_xxx 函数是用于从缓冲区 buffer 中写入或者读取若干个字节，对于读写整型数据，分别实现了大端和小端字节序的版本。而缓冲区 buffer 中的数据又是从何而来呢，有一个 fill_buffer 的函数，在 fill_buffer 函数中调用了ByteIOContext 结构的 read_packet 接口。在调用 put_xxx 函数时，并没有直接进行真<br>正写入操作，而是先缓存起来，直到缓存达到最大限制或调用 flush_buffer 函数对缓冲区进行刷新，才使用 write_packet 函数进行写入操作。</p><h2 id="3-3-Demuxer-和-muxer-模块分析"><a href="#3-3-Demuxer-和-muxer-模块分析" class="headerlink" title="3.3 Demuxer 和 muxer 模块分析"></a>3.3 Demuxer 和 muxer 模块分析</h2><h3 id="3-3-1-概述"><a href="#3-3-1-概述" class="headerlink" title="3.3.1 概述"></a>3.3.1 概述</h3><p>ffmpeg 的 demuxer 和 muxer 接口分别在 AVInputFormat 和 AVOutputFormat 两个结构体中实现，在 av_register_all()函数中将两个结构分别静态初始化为两个链表，保存在全局变量：first_iformat 和 first_oformat 两个变量中。在 FFmpeg 的文件转换或者打开过程中，首先要做的就是根据传入文件和传出文件的后缀名匹配合适的 demuxer和 muxer，得到合适的信息后保存在 AVFormatContext 中。</p><h3 id="3-3-2-相关数据结构介绍"><a href="#3-3-2-相关数据结构介绍" class="headerlink" title="3.3.2 相关数据结构介绍"></a>3.3.2 相关数据结构介绍</h3><p><strong>1、AVInputFormat</strong></p><p>该结构被称为 demuxer，是音视频文件的一个解封装器，它的定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVInputFormat</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *name;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *long_name;</span><br><span class="line">    <span class="type">int</span> priv_data_size; <span class="comment">//具体文件容器格式对应的 Context 的大小，如：avicontext</span></span><br><span class="line">    <span class="type">int</span> (*read_probe)(AVProbeData *);</span><br><span class="line">    <span class="type">int</span> (*read_header)(<span class="keyword">struct</span> AVFormatContext *，AVFormatParameters *ap);</span><br><span class="line">    <span class="type">int</span> (*read_packet)(<span class="keyword">struct</span> AVFormatContext *， AVPacket *pkt);</span><br><span class="line">    <span class="type">int</span> (*read_close)(<span class="keyword">struct</span> AVFormatContext *);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> FF_API_READ_SEEK</span></span><br><span class="line">    attribute_deprecated <span class="title function_">int</span> <span class="params">(*read_seek)</span><span class="params">(<span class="keyword">struct</span> AVFormatContext *，</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> stream_index，<span class="type">int64_t</span> timestamp，<span class="type">int</span> flags)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">int64_t</span> (*read_timestamp)(<span class="keyword">struct</span> AVFormatContext *s， <span class="type">int</span> stream_index，</span><br><span class="line">                              <span class="type">int64_t</span> *pos， <span class="type">int64_t</span> pos_limit);</span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *extensions;</span><br><span class="line">    <span class="type">int</span> value;</span><br><span class="line">    <span class="type">int</span> (*read_play)(<span class="keyword">struct</span> AVFormatContext *);</span><br><span class="line">    <span class="type">int</span> (*read_pause)(<span class="keyword">struct</span> AVFormatContext *);</span><br><span class="line">    <span class="type">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVCodecTag</span> * <span class="title">const</span> *<span class="title">codec_tag</span>;</span></span><br><span class="line">    <span class="type">int</span> (*read_seek2)(<span class="keyword">struct</span> AVFormatContext *s， <span class="type">int</span> stream_index， <span class="type">int64_t</span> min_ts，</span><br><span class="line">                      <span class="type">int64_t</span> ts， <span class="type">int64_t</span> max_ts， <span class="type">int</span> flags);</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> FF_API_OLD_METADATA2</span></span><br><span class="line">    <span class="type">const</span> AVMetadataConv *metadata_conv;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    <span class="type">const</span> AVClass *priv_class; <span class="comment">///&lt; AVClass for the private context</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVInputFormat</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; AVInputFormat;</span><br></pre></td></tr></table></figure><p>对于不同的文件格式要实现相应的函数接口，这样每一种格式都有一个对应的demuxer，所有的 demuxer 都保存在全局变量 first_iformat 中。红色表示提供的接口。</p><p><strong>2、AVOutputFormat</strong></p><p>该结构与 AVInputFormat 类似也是在编译时静态初始化，组织为一个链表结构，提供了多个 muxer 的函数接口。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> (*write_header)(<span class="keyword">struct</span> AVFormatContext *);</span><br><span class="line"><span class="type">int</span> (*write_packet)(<span class="keyword">struct</span> AVFormatContext *， AVPacket *pkt);</span><br><span class="line"><span class="type">int</span> (*write_trailer)(<span class="keyword">struct</span> AVFormatContext *);</span><br></pre></td></tr></table></figure><p>对于不同的文件格式要实现相应的函数接口，这样每一种格式都有一个对应的 muxer，所有的 muxer 都保存在全局变量 first_oformat 中。</p><p><strong>3、AVFormatContext</strong></p><p>该结构表示与程序当前运行的文件容器格式使用的上下文，着重于所有文件容器共有的属性，在运行时动态的确定其值，是 AVInputFormat 和 AVOutputFormat 的载体，但同一个结构对象只能使 AVInputFormat 和 AVOutputFormat 中的某一个有效。每一个输入和输出文件，都在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> AVFormatContext *output_files[MAX_FILES] 和</span><br><span class="line"><span class="type">static</span> AVFormatContext *input_files[MAX_FILES];</span><br></pre></td></tr></table></figure><p>定义的指针数组全局变量中有对应的实体。对于输入和输出，因为共用的是同一个结构体，所以需要分别对该结构中如下定义的 iformat 或 oformat 成员赋值。在转码时读写数据是通过 AVFormatContext 结构进行的。定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVFormatContext</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">const</span> AVClass *av_class;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVInputFormat</span> *<span class="title">iformat</span>;</span> <span class="comment">//指向具体的 demuxer</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVOutputFormat</span> *<span class="title">oformat</span>;</span> <span class="comment">//指向具体的 muxer</span></span><br><span class="line">    <span class="type">void</span> *priv_data; <span class="comment">//具体文件容器格式的 Context 如：avicontext</span></span><br><span class="line">    AVIOContext *pb; <span class="comment">//广义的输入输出；</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> nb_streams; <span class="comment">//本次打开的文件容器中流的数量</span></span><br><span class="line">    AVStream **streams; <span class="comment">//每个流的相关描述</span></span><br><span class="line">    <span class="type">char</span> filename[<span class="number">1024</span>]; <span class="comment">// input or output filename */</span></span><br><span class="line">    <span class="type">int64_t</span> timestamp;</span><br><span class="line">    <span class="type">int</span> ctx_flags;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVPacketList</span> *<span class="title">packet_buffer</span>;</span></span><br><span class="line">    ......</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodecID</span> <span class="title">video_codec_id</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodecID</span> <span class="title">audio_codec_id</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">CodecID</span> <span class="title">subtitle_codec_id</span>;</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> max_index_size;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> max_picture_buffer;</span><br><span class="line">    ......</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVPacketList</span> *<span class="title">raw_packet_buffer</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVPacketList</span> *<span class="title">raw_packet_buffer_end</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">AVPacketList</span> *<span class="title">packet_buffer_end</span>;</span></span><br><span class="line">    ......</span><br><span class="line">&#125; AVFormatContext;</span><br></pre></td></tr></table></figure><p>注释部分的成员是 AVFormatContext 中最为重要的成员变量，这些变量的初始化是ffmpeg 能正常工作的必要条件，那么，AVFormatContext 是如何被初始化的呢？文件的格式是如何被探测到的呢？</p><p>首先我们来探讨：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVInputFormat</span> *<span class="title">iformat</span>;</span> <span class="comment">//指向具体的 demuxer</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">AVOutputFormat</span> *<span class="title">oformat</span>;</span> <span class="comment">//指向具体的 muxer</span></span><br><span class="line"><span class="type">void</span> *priv_data; <span class="comment">//具体文件容器格式的 Context 如：avicontext</span></span><br></pre></td></tr></table></figure><p>三个成员的初始化。</p><p>在 avformat_open_input() 函数中调用了 init_input() 函数，然后用调用了av_probe_input_format（）函数实现了对 AVFormatContext 的初始化。其调用关系如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">av_open_input_file</span><span class="params">(AVFormatContext **ic_ptr， <span class="type">const</span> <span class="type">char</span> *filename，</span></span><br><span class="line"><span class="params">AVInputFormat *fmt，<span class="type">int</span> buf_size，AVFormatParameters *ap)</span>；</span><br><span class="line"><span class="type">int</span> <span class="title function_">avformat_open_input</span><span class="params">(ic_ptr， filename， fmt， &amp;opts)</span>；</span><br><span class="line"><span class="type">static</span> <span class="type">int</span> <span class="title function_">init_input</span><span class="params">(s， filename)</span>；</span><br><span class="line"><span class="title function_">av_probe_input_format</span><span class="params">(&amp;pd， <span class="number">0</span>)</span>；</span><br><span class="line"><span class="title function_">av_probe_input_format</span> <span class="params">(AVProbeData *pd， <span class="type">int</span> is_opened， <span class="type">int</span> *score_max)</span></span><br></pre></td></tr></table></figure><p>函数用途是根据传入的 probe data 数据，依次调用每个 demuxer 的 read_probe 接口，来进行该 demuxer 是否和传入的文件内容匹配的判断。与 demuxer 的匹配不同，muxer的匹配是调用 guess_format 函数，根据 main( ) 函数的 argv 里的输出文件后缀名来进行的。至此完成了前三个重要成员的初始化，具体的做法就不在深入分析。</p><p>下面分别给出 av_read_frame 函数以及 av_write_frame 函数的基本流程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">av_read_frame</span><span class="params">(AVFormatContext *s， AVPacket *pkt)</span>;</span><br><span class="line">-&gt; av_read_frame_internel</span><br><span class="line">-&gt; av_read_packet</span><br><span class="line">-&gt; iformat-&gt;read_packet（在实现中会丢弃多余信息）</span><br><span class="line">-&gt; av_get_packet</span><br><span class="line">-&gt; get_xxx</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">av_write_frame</span><span class="params">(AVFormatContext *s， AVPacket *pkt)</span>;</span><br><span class="line">-&gt; oformat-&gt;write_packet</span><br><span class="line">-&gt; put_xxx</span><br></pre></td></tr></table></figure><p>由上可见，对 AVFormatContext 的读写操作最终是通过 ByteIOContext 来实现的，这样，AVFormatContext 与 URLContext 就由 ByteIOContext 结构联系到一起了。在AVFormat 结构体中有一个 packet 的缓冲区 raw_packet_buffer，是 AVPackList 的指针类型，av_read_packet 函数将读到的包添加至 raw_packet_buffer 链表末尾。</p><h2 id="3-4-Decoder-Encoder-模块"><a href="#3-4-Decoder-Encoder-模块" class="headerlink" title="3.4 Decoder&#x2F;Encoder 模块"></a>3.4 Decoder&#x2F;Encoder 模块</h2><h3 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3.4.1 概述"></a>3.4.1 概述</h3><p>编解码模块主要包含的数据结构为：AVCodec、AVCodecContext 每一个解码类型都会有自己的 Codec 静态对像，Codec 的 int priv_data_size 记录该解码器上下文的结构大小，如 MsrleContext 。这些都是编译时确定的，程序运行时通过avcodec_register_all()将所有的解码器注册成一个链表。在 av_open_input_stream()函数中调用 AVInputFormat 的 read_header()中读文件头信息时，会读出数据流的CodecID，即确定了他的解码器 Codec。</p><p>在 main()函数中除了解析传入参数并初始化 demuxer 与 muxer 的 parse_options( )函数以外，其他的功能都是在 av_encode( )函数里完成的。在 libavcodec\utils.c 中有如下二个函数 : <code>AVCodec *avcodec_find_encoder(enum CodecID id)</code> 和 <code>AVCodec *avcodec_find_decoder(enum CodecID id)</code> 他们的功能就是根据传入的 CodecID，找到匹配的 encoder 和 decoder。在 av_encode( )函数的开头，首先初始化各个 AVInputStream和 AVOutputStream，然后分别调用上述二个函数，并将匹配上的 encoder 与 decoder 分<br>别保存在:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AVInputStream-&gt;AVStream *st-&gt;AVCodecContext *codec-&gt;<span class="class"><span class="keyword">struct</span> <span class="title">AVCodec</span> *<span class="title">codec</span></span></span><br><span class="line"><span class="class">与 <span class="title">AVOutputStream</span>-&gt;</span>AVStream *st-&gt;AVCodecContext *codec-&gt;<span class="class"><span class="keyword">struct</span> <span class="title">AVCodec</span> *<span class="title">codec</span> 变量。</span></span><br></pre></td></tr></table></figure><h3 id="3-4-2-相关数据结构的初始化"><a href="#3-4-2-相关数据结构的初始化" class="headerlink" title="3.4.2 相关数据结构的初始化"></a>3.4.2 相关数据结构的初始化</h3><p>AVCodecContext 结构</p><p>AVCodecContext 保存 AVCodec 指针和与 codec 相关数据，如 video 的 width、height，audio 的 sample rate 等。</p><p>AVCodecContext 中的 codec_type，codec_id 二个变量对于 encoder&#x2F;decoder 的匹配来说，最为重要。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CodecType</span> <span class="title">codec_type</span>;</span> <span class="comment">/* see CODEC_TYPE_xxx */</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">CodecID</span> <span class="title">codec_id</span>;</span> <span class="comment">/* see CODEC_ID_xxx */</span></span><br></pre></td></tr></table></figure><p>如上所示，codec_type 保存的是 CODEC_TYPE_VIDEO，CODEC_TYPE_AUDIO 等媒体类型，codec_id 保存的是 CODEC_ID_FLV1，CODEC_ID_VP6F 等编码方式。</p><p>以支持 flv 格式为例，在前述的 av_open_input_file(…… ) 函数中，匹配到正确的 AVInputFormat demuxer 后，通过 av_open_input_stream( )函数中调用 AVInputFormat的 read_header 接口来执行 flvdec.c 中的 flv_read_header( )函数。flv_read_header( )函数内，根据文件头中的数据，创建相应的视频或音频 AVStream，并设置 AVStream 中AVCodecContext 的正确的 codec_type 值。codec_id 值是在解码过程。flv_read_packet( )<br>函数执行时根据每一个 packet 头中的数据来设置的。</p><p>以 avidec 为例 有如下初始化，我们主要知道的就是 code_id 和 code_type 该字段关联具体的解码器，和解码类型（音视频或 subtitle）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (st-&gt;codec-&gt;stream_codec_tag == AV_RL32(<span class="string">&quot;Axan&quot;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    st-&gt;codec-&gt;codec_id = CODEC_ID_XAN_DPCM;</span><br><span class="line">    st-&gt;codec-&gt;codec_tag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (amv_file_format)</span><br><span class="line">&#123;</span><br><span class="line">    st-&gt;codec-&gt;codec_id = CODEC_ID_ADPCM_IMA_AMV;</span><br><span class="line">    ast-&gt;dshow_block_align = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> AVMEDIA_TYPE_SUBTITLE:</span><br><span class="line">        st-&gt;codec-&gt;codec_type = AVMEDIA_TYPE_SUBTITLE;</span><br><span class="line">        st-&gt;request_probe= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        st-&gt;codec-&gt;codec_type = AVMEDIA_TYPE_DATA;</span><br><span class="line">        st-&gt;codec-&gt;codec_id= CODEC_ID_NONE;</span><br><span class="line">        st-&gt;codec-&gt;codec_tag= <span class="number">0</span>;</span><br><span class="line">        avio_skip(pb， size);</span><br></pre></td></tr></table></figure><h2 id="3-5-其他重要数据结构的初始化"><a href="#3-5-其他重要数据结构的初始化" class="headerlink" title="3.5 其他重要数据结构的初始化"></a>3.5 其他重要数据结构的初始化</h2><h3 id="3-5-1-AVStream"><a href="#3-5-1-AVStream" class="headerlink" title="3.5.1 AVStream"></a>3.5.1 AVStream</h3><p>AVStream 结构保存与数据流相关的编解码器，数据段等信息。比较重要的有如下二个成员：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">AVCodecContext *codec; <span class="comment">/**&lt; codec context */</span></span><br><span class="line"><span class="type">void</span> *priv_data;</span><br></pre></td></tr></table></figure><p>其中 codec 指针保存的就是上节所述的 encoder 或 decoder 结构。priv_data 指针保存的是和具体编解码流相关的数据，如下代码所示，在 ASF 的解码过程中，priv_data保存的就是 ASFStream 结构的数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">AVStream *st;</span><br><span class="line">ASFStream *asf_st;</span><br><span class="line">......</span><br><span class="line">st-&gt;priv_data = asf_st;</span><br></pre></td></tr></table></figure><h3 id="3-5-2-AVInputStream-AVOutputStream"><a href="#3-5-2-AVInputStream-AVOutputStream" class="headerlink" title="3.5.2 AVInputStream&#x2F; AVOutputStream"></a>3.5.2 AVInputStream&#x2F; AVOutputStream</h3><p>根据输入和输出流的不同，前述的 AVStream 结构都是封装在 AVInputStream 和AVOutputStream 结构中，在 av_encode( )函数中使用。AVInputStream 中还保存的有与时间有关的信息。AVOutputStream 中还保存有与音视频同步等相关的信息。</p><h3 id="3-5-3-AVPacket"><a href="#3-5-3-AVPacket" class="headerlink" title="3.5.3 AVPacket"></a>3.5.3 AVPacket</h3><p>AVPacket 结构定义如下，其是用于保存读取的 packet 数据。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">AVPacket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int64_t</span> pts; <span class="comment">///&lt; presentation time stamp in time_base units</span></span><br><span class="line">    <span class="type">int64_t</span> dts; <span class="comment">///&lt; decompression time stamp in time_base units</span></span><br><span class="line">    <span class="type">uint8_t</span> *data;</span><br><span class="line">    <span class="type">int</span> size;</span><br><span class="line">    <span class="type">int</span> stream_index;</span><br><span class="line">    <span class="type">int</span> flags;</span><br><span class="line">    <span class="type">int</span> duration; <span class="comment">///&lt; presentation duration in time_base units</span></span><br><span class="line">    <span class="type">void</span> (*destruct)(<span class="keyword">struct</span> AVPacket *);</span><br><span class="line">    <span class="type">void</span> *priv;</span><br><span class="line">    <span class="type">int64_t</span> pos; <span class="comment">///&lt; byte position in stream， -1 if unknown</span></span><br><span class="line">&#125; AVPacket;</span><br></pre></td></tr></table></figure><p>在 av_encode() 函数中，调用 AVInputFormat 的 <code>(*read_packet)(struct AVFormatContext *， AVPacket *pkt)</code> 接口，读取输入文件的一帧数据保存在当前输入 AVFormatContext 的 AVPacket 成员中。</p><h1 id="4-FFmpeg-裁剪说明"><a href="#4-FFmpeg-裁剪说明" class="headerlink" title="4. FFmpeg 裁剪说明"></a>4. FFmpeg 裁剪说明</h1><p>本文对 ffmpeg 进行裁剪采用的是配置所需的接口，不需要的不配置，而不是采用修改源代码的方式。</p><h2 id="4-1-configure-参数"><a href="#4-1-configure-参数" class="headerlink" title="4.1 configure 参数"></a>4.1 configure 参数</h2><h3 id="4-1-1-通用选项"><a href="#4-1-1-通用选项" class="headerlink" title="4.1.1 通用选项"></a>4.1.1 通用选项</h3><p>在 linux 下进入终端，找到 ffmpeg 解压位置，输入如下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure –<span class="built_in">help</span></span></span><br></pre></td></tr></table></figure><p>得到 configure 的基本选项参数，其并没有中文解释。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">--help 显示此帮助信息|print this message</span><br><span class="line">--log[=FILE|yes|no] 记录测试并输出到 config.err 文件|log tests and output to FILE [config.err]</span><br><span class="line">--prefix=PREFIX 安装程序到指定目录（默认/usr/local）|install in PREFIX [/usr/local]</span><br><span class="line">--libdir=DIR 安装库到指定目录（默认 prefix/lib）|install libs in DIR [PREFIX/lib]</span><br><span class="line">--shlibdir=DIR 指定共享库路径（默认 prefix/lib）|install shared libs in DIR [PREFIX/lib]</span><br><span class="line">--incdir=DIR 指定 includes 路径（默认 prefix/include/ffmpeg）|install includes in DIR[PREFIX/include/ffmpeg]</span><br><span class="line">--mandir=DIR 指定 man page 路径（默认 prefix/man）install man page in DIR [PREFIX/man]</span><br><span class="line">--enable-mp3lame 启用 mp3 编码 libmp3lame（默认关闭）enable MP3 encoding via libmp3lame[default=no]</span><br><span class="line">--enable-libogg 启用 ogg 支持 libogg（默认关闭）enable Ogg support via libogg [default=no]</span><br><span class="line">--enable-vorbis 启用 Vorbis 支持 libvorbis（默认关闭）enable Vorbis support via libvorbis [default=no]</span><br><span class="line">--enable-faad 启用 faad 支持 libfaad（默认关闭）enable FAAD support via libfaad [default=no]</span><br><span class="line">--enable-faadbin 启用 faad 运行时链接支持（默认关闭）build FAAD support with runtime linking[default=no]</span><br><span class="line">--enable-faac 启用 faac 支持 libfaac（默认关闭）enable FAAC support via libfaac [default=no]</span><br><span class="line">--enable-libgsm 启用 GSM 支持 libgsm（默认关闭）enable GSM support via libgsm [default=no]</span><br><span class="line">--enable-xvid 启用 xvid 支持 xvidcore（默认关闭）enable XviD support via xvidcore [default=no]</span><br><span class="line">--enable-x264 启 用 H.264 编码（默认关闭） enable H.264 encoding via x264 [default=no]</span><br><span class="line">--enable-mingw32 启用 MinGW 本地/交叉 win 环境编译|enable MinGW native/cross Windows compile</span><br><span class="line">--enable-mingwce 启用 MinGW 本地/交叉 winCE 环境编译 enable MinGW native/cross WinCE compile</span><br><span class="line">--enable-a52 启用 A52 支持（默认关闭）enable GPLed A52 support [default=no]</span><br><span class="line">--enable-a52bin 启用运行时打开 liba52.so.0（默认关闭）open liba52.so.0 at runtime [default=no]</span><br><span class="line">--enable-dts 启用 DTS 支持（默认关闭）enable GPLed DTS support [default=no]</span><br><span class="line">--enable-pp 启用后加工支持（默认关闭）enable GPLed postprocessing support [default=no]</span><br><span class="line">--enable-static 构建静态库（默认启用）build static libraries [default=yes]</span><br><span class="line">--disable-static 禁止构建静态库（默认关闭）do not build static libraries [default=no]</span><br><span class="line">--enable-shared 构建共享库（默认关闭）build shared libraries [default=no]</span><br><span class="line">--disable-shared 禁止构建共享库（默认启用）do not build shared libraries [default=yes]</span><br><span class="line">--enable-amr_nb 启用 amr_nb float 音频编解码器|enable amr_nb float audio codec</span><br><span class="line">--enable-amr_nb-fixed 启用 fixed amr_nb codec | use fixed point for amr-nb codec</span><br><span class="line">--enable-amr_wb 启用 amr_wb float 音频编解码器|enable amr_wb float audio codec</span><br><span class="line">--enable-amr_if2 启用 amr_wb IF2 音频编解码器|enable amr_wb IF2 audio codec</span><br><span class="line">--enable-sunmlib 启用 Sun medialib（默认关闭） | use Sun medialib [default=no]</span><br><span class="line">--enable-pthreads 启用 pthreads（多线程）（默认关闭）use pthreads [default=no]</span><br><span class="line">--enable-dc1394 启用 libdc1394、libraw1394 抓取 IIDC-1394（默认关闭）enable IIDC-1394 grabbing using libdc1394 and libraw1394 [default=no]</span><br><span class="line">--enable-swscaler 启用计数器支持？（默认关闭）software scaler support [default=no]</span><br><span class="line">--enable-avisynth 允许读取 AVISynth 脚本本件（默认关闭）allow reading AVISynth script files [default=no]</span><br><span class="line">--enable-gpl 允许使用 GPL（默认关闭）allow use of GPL code， the resulting libav* and ffmpeg will be under GPL [default=no] Advanced options (experts only): 高级选项参数（供专业人员使用）</span><br><span class="line">--source-path=PATH 源码的路径（当前为/root/flv/ffmpeg）| path to source code [/root/flv/ffmpeg]</span><br><span class="line">--cross-prefix=PREFIX 为编译工具指定路径 | use PREFIX for compilation tools []</span><br><span class="line">--cross-compile 假定使用了交叉编译 | assume a cross-compiler is used</span><br><span class="line">--cc=CC 指定使用何种 C 编译器（默认 gcc）use C compiler CC [gcc]</span><br><span class="line">--make=MAKE 使用特定的 make | use specified make [make]</span><br><span class="line">--extra-cflags=ECFLAGS 添加 ECFLAGS 到 CFLAGS | add ECFLAGS to CFLAGS []</span><br><span class="line">--extra-ldflags=ELDFLAGS 添加 ELDFLAGS 到 LDFLAGS（默认-Wl，--as-needed）| add ELDFLAGS to LDFLAGS [ -Wl，--as-needed]</span><br><span class="line">--extra-libs=ELIBS 添加 ELIBS | add ELIBS []</span><br><span class="line">--build-suffix=SUFFIX 为专用程序添加后缀 | suffix for application specific build []</span><br><span class="line">--arch=ARCH 选择机器架构（默认 x86）select architecture [x86]</span><br><span class="line">--cpu=CPU 选用最低的 cpu（影响指令的选择，可以在老 CPU 上出错）</span><br><span class="line">| selects the minimum cpu required (affects instruction selection， may crash on older CPUs)</span><br><span class="line">--powerpc-perf-enable 启用 PPC 上面的性能报告（需要启用 PMC）enable performance report on PPC (requires enabling PMC)</span><br><span class="line">--disable-mmx 禁用 MMX | disable MMX usage</span><br><span class="line">--disable-armv5te 禁用 armv5te | disable armv5te usage</span><br><span class="line">--disable-iwmmxt 禁用 iwmmxt | disable iwmmxt usage</span><br><span class="line">--disable-altivec 禁用 AltiVec | disable AltiVec usage</span><br><span class="line">--disable-audio-oss 禁用 OSS 音频支持（默认启用）disable OSS audio support [default=no]</span><br><span class="line">--disable-audio-beos 禁用 BeOS 音频支持（默认启用）disable BeOS audio support [default=no]</span><br><span class="line">--disable-v4l 禁用 video4linux 提取（默认启用）disable video4linux grabbing [default=no]</span><br><span class="line">--disable-v4l2 禁用 video4linux2 提取（默认启用）disable video4linux2 grabbing [default=no]</span><br><span class="line">--disable-bktr 禁用 bktr 视频提取（默认启用）disable bktr video grabbing [default=no]</span><br><span class="line">--disable-dv1394 禁用 DV1394 提取（默认启用）disable DV1394 grabbing [default=no]</span><br><span class="line">--disable-network 禁用网络支持（默认支持）disable network support [default=no]</span><br><span class="line">--disable-ipv6 禁用 ipv6 支持（默认支持）disable ipv6 support [default=no]</span><br><span class="line">--disable-zlib 禁用 zlib（默认支持）disable zlib [default=no]</span><br><span class="line">--disable-simple_idct 禁用 simple IDCT 例程（默认启用）disable simple IDCT routines [default=no]</span><br><span class="line">--disable-vhook 禁用 video hooking 支持 | disable video hooking support</span><br><span class="line">--enable-gprof enable profiling with gprof [no]</span><br><span class="line">--disable-debug 禁用调试符号 | disable debugging symbols</span><br><span class="line">--disable-opts 禁用编译器最优化 | disable compiler optimizations</span><br><span class="line">--disable-mpegaudio-hp 启用更快的解码 MPEG 音频（但精确度较低）（默认禁用）faster (but less accurate) MPEG audio decoding [default=no]</span><br><span class="line">--disable-protocols 禁用 I/O 协议支持（默认启用）disable I/O protocols support [default=no]</span><br><span class="line">--disable-ffserver 禁用生成 ffserver | disable ffserver build</span><br><span class="line">--disable-ffplay 禁用生成 ffplay | disable ffplay build</span><br><span class="line">--enable-small 启用优化文件尺寸大小（牺牲速度）optimize for size instead of speed</span><br><span class="line">--enable-memalign-hack 启用模拟内存排列，由内存调试器干涉？ | emulate memalign，interferes with memory debuggers</span><br><span class="line">--disable-strip 禁用剥离可执行程序和共享库 | disable stripping of executables and shared libraries</span><br><span class="line">--disable-encoder=NAME 禁用 XX 编码器 | disables encoder NAME</span><br><span class="line">--enable-encoder=NAME 启用 XX 编码器 | enables encoder NAME</span><br><span class="line">--disable-decoder=NAME 禁用 XX 解码器 | disables decoder NAME</span><br><span class="line">--enable-decoder=NAME 启用 XX 解码器 | enables decoder NAME</span><br><span class="line">--disable-encoders 禁用所有编码器 | disables all encoders</span><br><span class="line">--disable-decoders 禁用所有解码器 | disables all decoders</span><br><span class="line">--disable-muxer=NAME 禁用 XX 混音器 | disables muxer NAME</span><br><span class="line">--enable-muxer=NAME 启用 XX 混音器 | enables muxer NAME</span><br><span class="line">--disable-muxers 禁用所有混音器 | disables all muxers</span><br><span class="line">--disable-demuxer=NAME 禁用 XX 解轨器 | disables demuxer NAME</span><br><span class="line">--enable-demuxer=NAME 启用 XX 解轨器 | enables demuxer NAME</span><br><span class="line">--disable-demuxers 禁用所有解轨器 | disables all demuxers</span><br><span class="line">--enable-parser=NAME 启用 XX 剖析器 | enables parser NAME</span><br><span class="line">--disable-parser=NAME 禁用 XX 剖析器 | disables parser NAME</span><br><span class="line">--disable-parsers 禁用所有剖析器 | disables all parsers</span><br></pre></td></tr></table></figure><h3 id="4-1-2-基本选项介绍"><a href="#4-1-2-基本选项介绍" class="headerlink" title="4.1.2 基本选项介绍"></a>4.1.2 基本选项介绍</h3><p>以下为配置 ffmpeg 的基本选项，其含义如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--cache-file=FILE</span><br></pre></td></tr></table></figure><p>configure 会在你的系统上测试存在的特性(或者 bug!)。为了加速随后进行的配置，测试的结果会存储在一个 cache file 里。当 configure 到每个子树里都有 configure 脚本的复杂的源码树时，一个很好的 cache file 的存在会有很大帮助。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--help</span><br></pre></td></tr></table></figure><p>输出帮助信息。即使是有经验的用户也偶尔需要使用使用 <code>--help</code> 选项，因为一个复杂的项目会包含附加的选项。例如，GCC 包里的 configure 脚本就包含了允许你控制是否生成和在 GCC 中使用 GNU 汇编器的选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--no-create</span><br></pre></td></tr></table></figure><p>configure 中的一个主要函数会制作输出文件。此选项阻止 configure 生成这个文件。你可以认为这是一种演习(dry run)，尽管缓存(cache)仍然被改写了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">--quiet</span><br><span class="line">--silent</span><br></pre></td></tr></table></figure><p>当 configure 进行他的测试时，会输出简要的信息来告诉用户正在作什么。这样做是因为 configure 可能会比较慢，没有这种输出的话用户将会被扔在一旁疑惑正在发生什么。使用这两个选项中的任何一个都会把你扔到一旁。(译注：这两句话比较有意思，原文是这样的：If there was no such output， the user would be left wondering what is happening. By using this option， you too can be left wondering!)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--version</span><br></pre></td></tr></table></figure><p>打印用来产生 ‘configure’ 脚本的 Autoconf 的版本号。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--prefix=PEWFIX</span><br></pre></td></tr></table></figure><p><code>--prefix</code> 是最常用的选项。制作出的 Makefile 会查看随此选项传递的参数，当一个包在安装时可以彻底的重新安置他的结构独立部分。举一个例子，当安装一个包，例如说Emacs，下面的命令将会使 Emacs Lisp file 被安装到”&#x2F;opt&#x2F;gnu&#x2F;share”：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=/opt/gnu</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--exec-prefix=EPREFIX</span><br></pre></td></tr></table></figure><p>与 <code>--prefix</code> 选项类似，但是他是用来设置结构倚赖的文件的安装位置。编译好的 emacs 二进制文件就是这样一个问件。如果没有设置这个选项的话，默认使用的选项值将被设为和 <code>--prefix</code> 选项值一样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--bindir=DIR</span><br></pre></td></tr></table></figure><p>指定二进制文件的安装位置。这里的二进制文件定义为可以被用户直接执行的程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--sbindir=DIR</span><br></pre></td></tr></table></figure><p>指定超级二进制文件的安装位置。这是一些通常只能由超级用户执行的程序。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--libexecdir=DIR</span><br></pre></td></tr></table></figure><p>指定可执行支持文件的安装位置。与二进制文件相反，这些文件从来不直接由用户执行，但是可以被上面提到的二进制文件所执行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--datadir=DIR</span><br></pre></td></tr></table></figure><p>指定通用数据文件的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--sysconfdir=DIR</span><br></pre></td></tr></table></figure><p>指定在单个机器上使用的只读数据的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--sharedstatedir=DIR</span><br></pre></td></tr></table></figure><p>指定可以在多个机器上共享的可写数据的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--localstatedir=DIR</span><br></pre></td></tr></table></figure><p>指定只能单机使用的可写数据的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--libdir=DIR</span><br></pre></td></tr></table></figure><p>指定库文件的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--includedir=DIR</span><br></pre></td></tr></table></figure><p>指定 C 头文件的安装位置。其他语言如 C++的头文件也可以使用此选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--oldincludedir=DIR</span><br></pre></td></tr></table></figure><p>指定为除 GCC 外编译器安装的 C 头文件的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--infodir=DIR</span><br></pre></td></tr></table></figure><p>指定 Info 格式文档的安装位置。Info 是被 GNU 工程所使用的文档格式。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--mandir=DIR</span><br></pre></td></tr></table></figure><p>指定手册页的安装位置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--srcdir=DIR</span><br></pre></td></tr></table></figure><p>这个选项对安装没有作用。他会告诉 configure 源码的位置。一般来说不用指定此选项，因为 configure 脚本一般和源码文件在同一个目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--program-prefix=PREFIX</span><br></pre></td></tr></table></figure><p>指定将被加到所安装程序的名字上的前缀。例如，使用 <code>--program-prefix=g</code> 来 configure一个名为 tar 的程序将会使安装的程序被命名为 gtar。当和其他的安装选项一起使用时，这个选项只有当他被 Makefile.in 文件使用时才会工作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--program-suffix=SUFFIX</span><br></pre></td></tr></table></figure><p>指定将被加到所安装程序的名字上的后缀。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--program-transform-name=PROGRAM</span><br></pre></td></tr></table></figure><p>这里的 PROGRAM 是一个 sed 脚本。当一个程序被安装时，他的名字将经过 <code>sed -e PROGRAM</code> 来产生安装的名字。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--build=BUILD</span><br></pre></td></tr></table></figure><p>指定软件包安装的系统平台。如果没有指定，默认值将是 <code>--host</code> 选项的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--host=HOST</span><br></pre></td></tr></table></figure><p>指定软件运行的系统平台。如果没有指定，将会运行 config.guess 来检测。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--target=GARGET</span><br></pre></td></tr></table></figure><p>指定软件面向(target to)的系统平台。这主要在程序语言工具如编译器和汇编器上下文中起作用。如果没有指定，默认将使用 <code>--host</code> 选项的值。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--disable-FEATURE</span><br></pre></td></tr></table></figure><p>一些软件包可以选择这个选项来提供为大型选项的编译时配置，例如使用 Kerberos认证系统或者一个实验性的编译器最优配置。如果默认是提供这些特性，可以使用 <code>--disable-FEATURE</code> 来禁用它，这里 FEATURE 是特性的名字。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --disable-gui</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--enable-FEATURE[=ARG]</span><br></pre></td></tr></table></figure><p>相反的，一些软件包可能提供了一些默认被禁止的特性，可以使用 <code>--enable-FEATURE</code> 来起用它。这里 FEATURE 是特性的名字。一个特性可能会接受一个可选的参数。例如：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --enable-buffers=128</span></span><br></pre></td></tr></table></figure><p><code>--enable-FEATURE=no</code> 与上面提到的 <code>--disable-FEATURE</code> 是同义的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--with-PACKAGE[=ARG]</span><br></pre></td></tr></table></figure><p>在自由软件社区里，有使用已有软件包和库的优秀传统。当用 configure 来配置一个源码树时，可以提供其他已经安装的软件包的信息。例如，倚赖于 Tcl 和 Tk 的 BLT 器件工具包。要配置 BLT，可能需要给 configure 提供一些关于我们把 Tcl 和 Tk 装的何处的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --with-tcl=/usr/local --with-tk=/usr/local</span></span><br></pre></td></tr></table></figure><p><code>--with-PACKAGE=no</code> 与下面将提到的 <code>--without-PACKAGE</code> 是同义的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--without-PACKAGE</span><br></pre></td></tr></table></figure><p>有时候你可能不想让你的软件包与系统已有的软件包交互。例如，你可能不想让你的新编译器使用 GNU ld。通过使用这个选项可以做到这一点：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --without-gnu-ld</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--x-includes=DIR</span><br></pre></td></tr></table></figure><p>这个选项是 <code>--with-PACKAGE</code> 选项的一个特例。在 Autoconf 最初被开发出来时，流行使用 configure 来作为 Imake 的一个变通方法来制作运行于 X 的软件。–x-includes 选项提供了向 configure 脚本指明包含 X11 头文件的目录的方法。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">--x-libraries=DIR</span><br></pre></td></tr></table></figure><p>类似的，<code>--x-libraries</code> 选项提供了向 configure 脚本指明包含 X11 库的目录的方法。</p><h2 id="4-2-FFmpeg-裁剪优化实例"><a href="#4-2-FFmpeg-裁剪优化实例" class="headerlink" title="4.2 FFmpeg 裁剪优化实例"></a>4.2 FFmpeg 裁剪优化实例</h2><p>对 ffmpeg 的裁剪优化主要是对 ffplay 的裁剪优化，我们制定的需求是能播放测试文件（视频为 mpeg4 编码、音频为 mp2 编码，且为 AVI 复用），根据需求，找到相应的选项，或禁用或启用，最后的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --disable-yasm --disable-parsers --disable-decoders</span></span><br><span class="line">--disable-encoders --enable-decoder=mpeg4 --disable-muxers</span><br><span class="line">--disable-demuxers --enable-demuxer=avi --enable-decoder=mp2</span><br><span class="line">--disable-protocols --enable-protocol=file --disable-filters --disable-bsfs</span><br></pre></td></tr></table></figure><p>其中针对需求，</p><ul><li><p><code>--disable-parsers</code> 为禁用所有解析器，</p></li><li><p><code>--disable-decoders</code> 为禁用所有解码器，</p></li><li><p><code>--disable-encoders</code> 为禁用所有编码器，</p></li><li><p><code>--enable-decoder=mpeg4</code> 为启用 mpeg4 的编码器 ， </p></li><li><p><code>--disable-muxers</code> 为禁用所有复用， </p></li><li><p><code>--disable-demuxers</code> 为禁用所有解复用，</p></li><li><p><code>--enable-demuxer=avi</code> 为启用 AVI 复用，</p></li><li><p><code>--enable-decoder=mp2</code> 为启用 mp2 编码，</p></li><li><p><code>--disable-protocols</code> 为禁用所有协议， </p></li><li><p><code>--enable-protocol=file</code> 为启用文件协议，</p></li><li><p><code>--disable-filters</code> 为禁用所有过滤器，</p></li><li><p><code>--disable-bsfs</code> 为禁用所有码流过滤器。</p></li></ul><p>通过以上配置之后，编译，安装，就生成了我们要求的 ffplay，其大小为 1.8M（1864012 字节）。此次是在 linux 环境下进行的，在以后的配置中，如果需要其他的什么编码器或什么的，按照选项要求进行配置即可。</p><h2 id="4-3-裁剪优化前后文件比较"><a href="#4-3-裁剪优化前后文件比较" class="headerlink" title="4.3 裁剪优化前后文件比较"></a>4.3 裁剪优化前后文件比较</h2><p>前面已经提到本次裁剪优化的内容。经过裁剪优化之后，对其文件夹进行比较，主要有 3 个地方不同，分别是 config.fate、config.h 和 config.mak。在 config.fate 中，其记录的是配置命令，由于前后两次配置命令不同，故相应内容也不同。在config.h 中，其主要是根据配置命令来改变相应预定义的值，达到裁剪优化之效果。在 config.mak 中，改变的也是配置命令中需要改变的选项。</p><h1 id="5-FFmpeg-SDK"><a href="#5-FFmpeg-SDK" class="headerlink" title="5. FFmpeg SDK"></a>5. FFmpeg SDK</h1><p>FFMpeg 中比较重要的函数以及数据结构如下：</p><p><strong>1、数据结构：</strong></p><p><strong>(1) AVFormatContext</strong></p><p><strong>(2) AVOutputFormat</strong></p><p><strong>(3) AVInputFormat</strong></p><p><strong>(4) AVCodecContext</strong></p><p><strong>(5) AVCodec</strong></p><p><strong>(6) AVFrame</strong></p><p><strong>(7) AVPacket</strong></p><p><strong>(8) AVPicture</strong></p><p>(9) AVStream</p><p><strong>2、初始化函数：</strong></p><p>(1) av_register_all()</p><p>(2) avcodec_open()</p><p>(3) avcodec_close()</p><p>(4) av_open_input_file()</p><p>(5) av_find_input_format()</p><p>(6) av_find_stream_info()</p><p>(7) av_close_input_file()</p><p><strong>3、音视频编解码函数：</strong></p><p>(1) avcodec_find_decoder()</p><p>(2) avcodec_alloc_frame()</p><p>(3) avpicture_get_size()</p><p>(4) avpicture_fill()</p><p>(5) img_convert()</p><p>(6) avcodec_alloc_context()</p><p>(7) avcodec_decode_video()</p><p>(8) av_free_packet()</p><p>(9) av_free()</p><p><strong>4、文件操作：</strong></p><p>(1) avnew_steam()</p><p>(2) av_read_frame()</p><p>(3) av_write_frame()</p><p>(4) dump_format()</p><p><strong>5、其他函数：</strong></p><p>(1) avpicture_deinterlace()</p><p>(2) ImgReSampleContext() </p><h1 id="6-FFmpeg-编译"><a href="#6-FFmpeg-编译" class="headerlink" title="6. FFmpeg 编译"></a>6. FFmpeg 编译</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> http://source.ffmpeg.org/git/ffmpeg.git ffmpeg</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ffmpeg</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure --prefix=./install --enable-gpl --enable-nonfree \</span></span><br><span class="line"><span class="language-bash">--enable-libass --enable-libfdk-aac --enable-libfreetype \</span></span><br><span class="line"><span class="language-bash">--enable-libmp3lame --enable-libopus --enable-libtheora \</span></span><br><span class="line"><span class="language-bash">--enable-libvorbis --enable-libvpx --enable-libx264 --enable-libxvid \</span></span><br><span class="line"><span class="language-bash">--enable-shared --enable-static</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make &amp;&amp; sudo make install</span></span><br></pre></td></tr></table></figure><p>注意：在执行各自的 configure 创建编译配置文件时，最好都强制带上 –enable-static 和 –enable-shared 参数以确保生成静态库和动态库。另外因为是在 Mac OS X 环境下编译，因此在各自编译完后，都要执行 sudo make install，安装到默认的 &#x2F;usr&#x2F;local 目录下相应位置（Mac OS X 下不推荐 &#x2F;usr），因此不要在 configure 时指定 –prefix，就用默认的 &#x2F;usr&#x2F;local 目录前缀即可。完成编译安装后，FFmpeg 的头文件将会复制到 &#x2F;usr&#x2F;local&#x2F;include 下面相应位置，静态库及动态库会被复制到 &#x2F;usr&#x2F;local&#x2F;lib 目录下，FFmpeg 的可执行程序（ffmpeg、ffprobe、ffserver）会被复制到 &#x2F;usr&#x2F;local&#x2F;bin 目录下，这样 FFmpeg 的开发环境就构建好了。</p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本文以文档的形式来描述FFmpeg怎么入门，这也是为以后写文档做的一个大题框架格式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-文档介绍&quot;&gt;&lt;a href=&quot;#1-文档介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 文档介绍&quot;&gt;&lt;/a&gt;1. 文档介绍&lt;/h1&gt;&lt;h2 id=&quot;1-1-文档目的&quot;&gt;&lt;a href=&quot;#1-1-文档目的&quot; class=&quot;headerlink&quot; title=&quot;1.1 文档目的&quot;&gt;&lt;/a&gt;1.1 文档目的&lt;/h2&gt;&lt;p&gt;整理出开源代码 ffmpeg 的资料，方便公司同事后续使用。&lt;/p&gt;</summary>
    
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/categories/FFmpeg/"/>
    
    
    <category term="FFmpeg" scheme="http://miaopei.github.io/tags/FFmpeg/"/>
    
  </entry>
  
  <entry>
    <title>机器学习深度学习-文章收藏</title>
    <link href="http://miaopei.github.io/2018/01/13/DeepLearning/note-blog-link/"/>
    <id>http://miaopei.github.io/2018/01/13/DeepLearning/note-blog-link/</id>
    <published>2018-01-13T02:14:50.000Z</published>
    <updated>2024-06-11T05:59:18.985Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/Fabsqrt/BitTigerLab">沁原的硅谷创新课</a></p><p><a href="https://ai.yanxishe.com/page/blogDetail/10036">Github项目推荐 | 基于 deepfakes（视频换脸）的非官方项目deepfakes_faceswap</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Fabsqrt/BitTigerLab&quot;&gt;沁原的硅谷创新课&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://ai.yanxishe.com/page/blogDetail/10036&quot;</summary>
      
    
    
    
    <category term="DeepLearning" scheme="http://miaopei.github.io/categories/DeepLearning/"/>
    
    
    <category term="DeepLearning" scheme="http://miaopei.github.io/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>Dogs vs Cats (猫狗大战)</title>
    <link href="http://miaopei.github.io/2018/01/03/DeepLearning/DogsVsCats/"/>
    <id>http://miaopei.github.io/2018/01/03/DeepLearning/DogsVsCats/</id>
    <published>2018-01-03T02:14:50.000Z</published>
    <updated>2024-06-11T06:01:09.250Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>GitHub 项目地址：<a href="https://github.com/miaopei/cat_vs_dog">Dogs vs Cats (猫狗大战)</a></p></blockquote><h2 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h2><p>本项目是优达学城的一个毕业项目。项目要求使用深度学习方法识别一张图片是猫还是狗</p><ul><li>输入：一张彩色图片</li><li>输出：是猫还是狗</li></ul><span id="more"></span><h2 id="项目环境"><a href="#项目环境" class="headerlink" title="项目环境"></a>项目环境</h2><p>项目使用Anaconda搭建环境。可是使用environment目录下的yml进行环境安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> create -f environment.yml</span></span><br></pre></td></tr></table></figure><h2 id="数据来源"><a href="#数据来源" class="headerlink" title="数据来源"></a>数据来源</h2><p>数据集来自 kaggle 上的一个竞赛：<a href="https://www.kaggle.com/c/dogs-vs-cats-redux-kernels-edition/data">Dogs vs. Cats Redux: Kernels Edition</a>。</p><p>下载kaggle猫狗数据集解压后分为 3 个文件 train.zip、 test.zip 和 sample_submission.csv。</p><p>train 训练集包含了 25000 张猫狗的图片， 每张图片包含图片本身和图片名。命名规则根据“type.num.jpg”方式命名。</p><p>test 测试集包含了 12500 张猫狗的图片， 每张图片命名规则根据“num.jpg”，需要注意的是测试集编号从 1 开始， 而训练集的编号从 0 开始。</p><p>sample_submission.csv 需要将最终测试集的测试结果写入.csv 文件中，上传至 kaggle 进行打分。</p><h2 id="基准模型"><a href="#基准模型" class="headerlink" title="基准模型"></a>基准模型</h2><p>项目使用ResNet50, Xception, Inception V3 这三个模型完成。本项目的最低要求是 kaggle Public Leaderboard 前10%。在kaggle上，总共有1314只队伍参加了比赛，所以需要最终的结果排在131位之前，131位的得分是0.06127，所以目标是模型预测结果要小于0.06127。</p><h2 id="评估指标"><a href="#评估指标" class="headerlink" title="评估指标"></a>评估指标</h2><p>kaggle 官方的评估标准是 LogLoss，下面的表达式就是二分类问题的 LogLoss 定义。</p><div align="center"><a href="https://www.codecogs.com/eqnedit.php?latex=LogLoss&space;=&space;-\frac{1}{n}\sum_{i=1}^n&space;[y_ilog(\hat{y}_i)&plus;(1-y_i)log(1-&space;\hat{y}_i)]" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?LogLoss&space;=&space;-\frac{1}{n}\sum_{i=1}^n&space;[y_ilog(\hat{y}_i)&plus;(1-y_i)log(1-&space;\hat{y}_i)]" title="LogLoss = -\frac{1}{n}\sum_{i=1}^n [y_ilog(\hat{y}_i)+(1-y_i)log(1- \hat{y}_i)]" /></a></div><p>其中：</p><ul><li><p>n 是测试集中图片数量</p></li><li><p><a href="https://www.codecogs.com/eqnedit.php?latex=\hat{y}_i" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?\hat{y}_i" title="\hat{y}_i" /></a> 是图片预测为狗的概率</p></li><li><p><a href="https://www.codecogs.com/eqnedit.php?latex=y_i" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?y_i" title="y_i" /></a> 如果图像是狗，则为1，如果是猫，则为0</p></li><li><p><a href="https://www.codecogs.com/eqnedit.php?latex=log()" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?log()" title="log()" /></a> 是自然（基数 <a href="https://www.codecogs.com/eqnedit.php?latex=e" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?e" title="e" /></a>）对数</p></li></ul><p>对数损失越小，代表模型的性能越好。上述评估指标可用于评估该项目的解决方案以及基准模型。</p><h2 id="设计大纲"><a href="#设计大纲" class="headerlink" title="设计大纲"></a>设计大纲</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> model_graphviz/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure><img data-src="/2018/01/03/DeepLearning/DogsVsCats/model.png" class="" title="model"><p>整个模型是在本地训练的，训练了三天才完成。建议使用云端 GPU 训练复现实验过程。</p><p><strong>1. 数据预处理</strong></p><ul><li>从kaggle下载好图片</li><li>将猫和狗的图片放在不同的文件夹以示分类，使用创建符号链接的方法</li><li>对图片进行resize，保持输入图片信息大小一致</li></ul><p><strong>2. 模型搭建</strong></p><p>Kera的应用模块Application提供了带有预训练权重的Keras模型，这些模型可以用来进行预测、特征提取和微调整和。</p><ul><li>Xception 默认输入图片大小是 <code>299*299*3</code></li><li>InceptionV3 默认输入图片大小是 <code>299*299*3</code></li><li>ResNet50 默认输入图片大小是 <code>224*224*3</code></li></ul><p>在Keras中载入模型并进行全局平均池化，只需要在载入模型的时候，设置<code>include_top=False</code>, <code>pooling=&#39;avg&#39;</code>. 每个模型都将图片处理成一个<code>1*2048</code>的行向量，将这三个行向量进行拼接，得到一个<code>1*6144</code>的行向量， 作为数据预处理的结果。</p><p><strong>3. 模型训练&amp;模型调参</strong></p><p>载入预处理的数据之后，先进行一次概率为0.5的dropout，然后直接连接输出层，激活函数为Sigmoid，优化器为Adam，输出一个零维张量，表示某张图片中有狗的概率。</p><p><strong>4. 模型评估</strong></p><ul><li>使用$Logloss$进行模型评估,上传Kaggle判断是否符合标准</li></ul><p><strong>5. 可视化</strong></p><ul><li>进行数据探索并且可视化原始数据</li><li>可视化模型训练过程的准确率曲线，损失函数曲线等</li></ul><h2 id="项目部署"><a href="#项目部署" class="headerlink" title="项目部署"></a>项目部署</h2><p>项目使用 Keras 和 Flask 搭建部署一个简单易用的深度学习图像网页应用，可以通过网页导入一张彩色猫或者狗的图片预测是猫或者狗的概率。</p><p>项目目录结构：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── README.md</span><br><span class="line">├── ResNet50_image_predict.ipynb</span><br><span class="line">├── app.py</span><br><span class="line">├── environmert.yml</span><br><span class="line">├── static</span><br><span class="line">│   ├── css</span><br><span class="line">│   │   └── main.css</span><br><span class="line">│   └── js</span><br><span class="line">│       └── main.js</span><br><span class="line">├── templates</span><br><span class="line">│   ├── base.html</span><br><span class="line">│   └── index.html</span><br><span class="line">├── models</span><br><span class="line">│   └── ResNet50_catdog_model.h5</span><br><span class="line">├── uploads</span><br><span class="line">│   ├── test01.jpg</span><br><span class="line">│   └── test02.jpg</span><br><span class="line">└── webapp_image_predict.ipynb</span><br></pre></td></tr></table></figure><h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">conda <span class="built_in">env</span> create -f environmert.yml</span></span><br></pre></td></tr></table></figure><h3 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python app.py</span></span><br></pre></td></tr></table></figure><p>这时候用浏览器打开 <a href="http://localhost:5000/">http://localhost:5000/</a> 就可以进行网页导入图片预测图片是狗的概率了。</p><h3 id="快速复现webapp预测结果"><a href="#快速复现webapp预测结果" class="headerlink" title="快速复现webapp预测结果"></a>快速复现webapp预测结果</h3><p>如果不想搭建环境复现实验结果，可以按照以下操作分分钟复现实验结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker pull miaowmiaow/webapp:1.1.0</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker run -p 5000:5000 miaowmiaow/webapp:1.1.0</span></span><br></pre></td></tr></table></figure><p>到此就可以在浏览器中输入 <a href="http://localhost:5000/">http://localhost:5000</a> 就可以使用网页对导入的猫狗图片做预测了。</p><p>下图为预测的效果图：</p><img data-src="/2018/01/03/DeepLearning/DogsVsCats/webapp.gif" class="" title="webapp">]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;GitHub 项目地址：&lt;a href=&quot;https://github.com/miaopei/cat_vs_dog&quot;&gt;Dogs vs Cats (猫狗大战)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;项目说明&quot;&gt;&lt;a href=&quot;#项目说明&quot; class=&quot;headerlink&quot; title=&quot;项目说明&quot;&gt;&lt;/a&gt;项目说明&lt;/h2&gt;&lt;p&gt;本项目是优达学城的一个毕业项目。项目要求使用深度学习方法识别一张图片是猫还是狗&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;输入：一张彩色图片&lt;/li&gt;
&lt;li&gt;输出：是猫还是狗&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="DeepLearning" scheme="http://miaopei.github.io/categories/DeepLearning/"/>
    
    
    <category term="DeepLearning" scheme="http://miaopei.github.io/tags/DeepLearning/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用指南</title>
    <link href="http://miaopei.github.io/2017/03/28/Hexo/hexo-operating-guide/"/>
    <id>http://miaopei.github.io/2017/03/28/Hexo/hexo-operating-guide/</id>
    <published>2017-03-28T08:53:46.000Z</published>
    <updated>2024-06-11T05:40:32.128Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装、初始化和配置"><a href="#1-安装、初始化和配置" class="headerlink" title="1. 安装、初始化和配置"></a>1. 安装、初始化和配置</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><ul><li>git</li><li>node.js</li><li>github</li></ul><span id="more"></span><h3 id="1-2-安装和初始化"><a href="#1-2-安装和初始化" class="headerlink" title="1.2 安装和初始化"></a>1.2 安装和初始化</h3><p>首先确定已经安装好了 <code>nodejs</code> 和 <code>npm</code> 以及 <code>git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo -g</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000/">http://localhost:4000</a>，会看到生成好的博客。</p><h3 id="1-3-主目录结构"><a href="#1-3-主目录结构" class="headerlink" title="1.3 主目录结构"></a>1.3 主目录结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml</span><br><span class="line">|-- package.json</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- source</span><br><span class="line">   |-- _posts</span><br><span class="line">|-- themes</span><br><span class="line">|-- .gitignore</span><br><span class="line">|-- package.json</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。这个文件下面会做较为详细的介绍。</p><p><strong>package.json</strong></p><p>hexo框架的参数和所依赖插件，如下：  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>scaffold</strong></p><p>scaffolds是“脚手架、骨架”的意思，当你新建一篇文章（hexo new ‘title’）的时候，hexo是根据这个目录下的文件进行构建的。基本不用关心。</p><p><strong>_config.yml文件</strong></p><p>_config.yml 采用YAML语法格式，<a href="http://my.oschina.net/u/1861837/blog/526142?p=%7B%7BtotalPage%7D%7D">具体语法自行学习</a> 。<br>具体配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html">官方文档</a>，_config.yml 文件中的内容，并对主要参数做简单的介绍</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>   <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span>     <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span>  <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>  <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span>    <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span>    <span class="comment">#网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span>   <span class="comment">#你的站点Url</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>                    <span class="comment">#站点的根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>   <span class="comment">#文章的 永久链接 格式   </span></span><br><span class="line"><span class="attr">permalink_defaults:</span>    <span class="comment">#永久链接中各部分的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory   </span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>         <span class="comment">#资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>         <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>              <span class="comment">#标签文件夹     </span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>      <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>   <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>   <span class="comment">#Include code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>            <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>               <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>   <span class="comment">#新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>       <span class="comment">#预设布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>           <span class="comment">#把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span>        <span class="comment">#在新标签中打开链接</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>           <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>       <span class="comment">#是否显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>   <span class="comment">#是否启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>       <span class="comment">#把链接改为与根目录的相对位址    </span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>               <span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span>                 <span class="comment">#内容中代码块的设置    </span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span>          <span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>               <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>         <span class="comment">#日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>           <span class="comment">#时间格式    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>    <span class="comment">#分页数量</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>   <span class="comment">#主题名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment">#  部署部分的设置</span></span><br><span class="line"><span class="attr">deploy:</span>     </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  <span class="comment">#类型，常用的git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/nanshanyi/nanshanyi.github.io.git</span> <span class="comment">#github仓库的地址</span></span><br></pre></td></tr></table></figure><h3 id="1-4-注意"><a href="#1-4-注意" class="headerlink" title="1.4 注意"></a>1.4 注意</h3><p><strong>如果页面中出现中文，应以UTF-8无BOM编码格式，所以不要用win自带的记事本，而是用notepad++这种支持编码转换的编辑器。</strong></p><p>由于google在天朝大陆被墙，进入 <code>themes\landscape\layout\_partial</code> ，打开 <code>head.ejs</code> ，删掉第31行 <code>fonts.googleapis.com</code> 的链接。</p><p>下载下来 <code>jQuery-2.0.3.min.js</code> ，放到 <code>themes\landscape\source\js</code> 文件夹中。之后进入 <code>themes\landscape\layout\_partial</code> ，打开 <code>after-footer.ejs</code> ，将第17行的路径替换为 <code>/js/jquery-2.0.3.min.js</code> 。</p><p>至此大功告成。</p><h2 id="2-写文章-草稿"><a href="#2-写文章-草稿" class="headerlink" title="2. 写文章&amp;草稿"></a>2. 写文章&amp;草稿</h2><h3 id="2-1-文章"><a href="#2-1-文章" class="headerlink" title="2.1 文章"></a>2.1 文章</h3><p>命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post <span class="string">&quot;new article&quot;</span></span><br></pre></td></tr></table></figure><p>之后在 <code>soource/_posts</code> 目录下面多了一个 <code>new-article.md</code> 的文件。</p><h3 id="2-2-文章属性"><a href="#2-2-文章属性" class="headerlink" title="2.2 文章属性"></a>2.2 文章属性</h3><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>layout</td><td>Layout</td><td>post或page</td></tr><tr><td>title</td><td>文章的标题</td><td></td></tr><tr><td>date</td><td>穿件日期</td><td>文件的创建日期</td></tr><tr><td>updated</td><td>修改日期</td><td>文件的修改日期</td></tr><tr><td>comments</td><td>是否开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>url中的名字</td><td>文件名</td></tr><tr><td>toc</td><td>是否开启目录</td><td>true</td></tr><tr><td>reward</td><td>是否开启打赏</td><td>true</td></tr></tbody></table><h3 id="2-3-分类和标签"><a href="#2-3-分类和标签" class="headerlink" title="2.3 分类和标签"></a>2.3 分类和标签</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - 日记</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - node.js</span><br></pre></td></tr></table></figure><h3 id="2-4-摘要"><a href="#2-4-摘要" class="headerlink" title="2.4 摘要"></a>2.4 摘要</h3><p><code>&lt;!--more--&gt;</code> 之上的内容为摘要。</p><h3 id="2-5-草稿"><a href="#2-5-草稿" class="headerlink" title="2.5 草稿"></a>2.5 草稿</h3><p>草稿相当于很多博客都有的“私密文章”功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;new draft&quot;</span></span><br></pre></td></tr></table></figure><p>会在 <code>source/_drafts</code> 目录下生成一个 <code>new-draft.md</code> 文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 <code>_drafts</code> 目录之中。</p><p>如果你希望强行预览草稿，更改配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_drafts: true</span><br></pre></td></tr></table></figure><p>或者，如下方式启动server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --drafts</span><br></pre></td></tr></table></figure><p>下面这条命令可以把草稿变成文章，或者页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">$ hexo publish drafts hexo-使用指南</span><br></pre></td></tr></table></figure><h2 id="3-Blog中出入图片和音乐"><a href="#3-Blog中出入图片和音乐" class="headerlink" title="3. Blog中出入图片和音乐"></a>3. Blog中出入图片和音乐</h2><p>文章推介：</p><blockquote><p><a href="http://www.jianshu.com/p/53e0d2a617da">Hexo 博客中插入音乐&#x2F;视频</a></p><p><a href="http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/">使用七牛为Hexo存储图片</a></p><p><a href="http://www.cnblogs.com/xljzlw/p/5137622.html">hexo主题中添加相册功能</a></p><p><a href="http://wuchong.me/blog/2014/12/13/hexo-theme-creating-image-styles/?utm_source=tuicool&utm_medium=referral#">为 Hexo 主题添加多种图片样式(主题不错考虑移植)</a></p><p><a href="https://yq.aliyun.com/articles/8607">Hexo折腾记——基本配置篇</a></p><p><a href="http://www.cnblogs.com/jarson-7426/p/5515870.html">hexo博客进阶－相册和独立域名</a></p></blockquote><p>插入图片基本分为两种办法** ：</p><p>（1） 放在本地文件</p><p>首先在根目录下确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。<br>在 hexo 目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>之后再使用 <code>hexo new &#39;new&#39; </code>创建新博客的时候，会在 <code>source/_posts</code> 里面创建 <code>.md</code> 文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">“图片描述”（可以不写）</span>](<span class="link">/文件夹名/你的图片名字.JPG</span>)</span><br><span class="line">例如：</span><br><span class="line">！[ ] (new/text.jpg)</span><br></pre></td></tr></table></figure><p>（2）放在<a href="https://portal.qiniu.com/signup?code=3lglas6pgi2qa">七牛</a>上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</p><p><strong>插入音乐</strong> ：</p><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器，可以把</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">298</span> <span class="attr">height</span>=<span class="string">52</span> <span class="attr">src</span>=<span class="string">&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</span><br></pre></td></tr></table></figure><img data-src="/2017/03/28/Hexo/hexo-operating-guide/Y60twn8.png" class=""><img data-src="/2017/03/28/Hexo/hexo-operating-guide/i42cvBI.png" class=""><h2 id="4-代码高亮highlight-js支持"><a href="#4-代码高亮highlight-js支持" class="headerlink" title="4. 代码高亮highlight.js支持"></a>4. 代码高亮highlight.js支持</h2><p><a href="https://highlightjs.org/">highlightjs官网</a></p><p><a href="https://highlightjs.org/static/demo/">highlightjs主题风格</a></p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h2><p><a href="http://www.yehbeats.com/2015/04/08/hexo-search/">Hexo，Yilia主题添加站内搜索功能</a></p><p><a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/">为Hexo博客添加目录</a></p><p><a href="http://www.ituring.com.cn/article/199624">Hexo站点中添加文章目录以及归档</a></p><p><a href="http://crescentmoon.info/2014/12/11/popular-widget/">使用LeanCloud平台为Hexo博客添加文章浏览量统计组件</a></p><p><a href="http://www.tuicool.com/articles/ABFn2qU">使用hexo搭建静态博客</a></p><p><a href="http://www.ituring.com.cn/article/199035?utm_source=tuicool&utm_medium=referral">Hexo Docs中文 ： （二）基本用法</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-安装、初始化和配置&quot;&gt;&lt;a href=&quot;#1-安装、初始化和配置&quot; class=&quot;headerlink&quot; title=&quot;1. 安装、初始化和配置&quot;&gt;&lt;/a&gt;1. 安装、初始化和配置&lt;/h2&gt;&lt;h3 id=&quot;1-1-准备工作&quot;&gt;&lt;a href=&quot;#1-1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.1 准备工作&quot;&gt;&lt;/a&gt;1.1 准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;github&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://miaopei.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://miaopei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github 博客多终端同步</title>
    <link href="http://miaopei.github.io/2017/03/20/Hexo/Hexo-Github-Sync/"/>
    <id>http://miaopei.github.io/2017/03/20/Hexo/Hexo-Github-Sync/</id>
    <published>2017-03-19T20:20:57.000Z</published>
    <updated>2024-06-11T02:32:37.979Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/Monkey_LZL/article/details/60870891">原文链接</a></p><p>主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。下面是详细的步骤讲解：</p><span id="more"></span><h2 id="1-准备条件"><a href="#1-准备条件" class="headerlink" title="1. 准备条件"></a>1. 准备条件</h2><p>安装了Node.js,Git,Hexo环境<br>完成Github与本地Hexo的对接<br>这部分大家可以参考<a href="https://xuanwo.org/2015/03/26/hexo-intor/">史上最详细的Hexo博客搭建图文教程</a></p><p>配置好这些，就可以捋起袖子大干一场了！</p><h2 id="2-在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname-github-io的hexo分支上"><a href="#2-在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname-github-io的hexo分支上" class="headerlink" title="2. 在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上"></a>2. 在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上</h2><p>在利用Github+Hexo搭建自己的博客时，新建了一个Hexo的文件夹，并进行相关的配置，这部分主要是将这些配置的文件托管到Github项目的分支上，其中只托管部分用于多终端的同步的文件，如完成的效果图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将必要的文件依次添加，有些文件夹如npm install产生的node_modules由于路径过长不好处理，所以这里没有用`git add .`命令了，而是依次添加必要文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;Blog Source Hexo&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建hexo分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到hexo分支上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地与Github项目对接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push到Github项目的hexo分支上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin hexo</span></span><br></pre></td></tr></table></figure><p>这样你的github项目中就会多出一个Hexo分支，这个就是用于多终端同步关键的部分。</p><h2 id="3-另一终端完成clone和push更新"><a href="#3-另一终端完成clone和push更新" class="headerlink" title="3. 另一终端完成clone和push更新"></a>3. 另一终端完成clone和push更新</h2><p>此时在另一终端更新博客，只需要将Github的hexo分支clone下来，进行初次的相关配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将Github中hexo分支<span class="built_in">clone</span>到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> -b hexo https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到刚刚<span class="built_in">clone</span>的文件夹内</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> yourname.github.io</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cheackout 远程代码到本地hexo分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b hexo origin/hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，这里一定要切换到刚刚<span class="built_in">clone</span>的文件夹内执行，安装必要的所需组件，不用再init</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个.md文件，并编辑完成自己的博客内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new post <span class="string">&quot;new blog name&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;XX&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d -g</span></span><br></pre></td></tr></table></figure><h2 id="4-不同终端间愉快地玩耍"><a href="#4-不同终端间愉快地玩耍" class="headerlink" title="4. 不同终端间愉快地玩耍"></a>4. 不同终端间愉快地玩耍</h2><p>在不同的终端已经做完配置，就可以愉快的分享自己更新的博客<br>进入自己相应的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先pull完成本地与远端的融合</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new post <span class="string">&quot; new blog name&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;XX&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d -g</span></span><br></pre></td></tr></table></figure><h2 id="5-创建新文章"><a href="#5-创建新文章" class="headerlink" title="5. 创建新文章"></a>5. 创建新文章</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page --path <span class="built_in">test</span>/timages <span class="string">&quot;test_images&quot;</span></span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~/PATH/source/test/timages.md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> <span class="built_in">source</span>/test/timages.md</span></span><br><span class="line">---</span><br><span class="line">title: test_images</span><br><span class="line">date: 2024-06-11 09:36:41</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/Monkey_LZL/article/details/60870891&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。下面是详细的步骤讲解：&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://miaopei.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://miaopei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Docker 学习笔记</title>
    <link href="http://miaopei.github.io/2016/12/23/Docker/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://miaopei.github.io/2016/12/23/Docker/Docker-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2016-12-23T02:14:50.000Z</published>
    <updated>2024-06-11T06:44:03.674Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-Docker基本命令"><a href="#1-Docker基本命令" class="headerlink" title="1. Docker基本命令"></a>1. Docker基本命令</h1><h2 id="1-1-常用Docker命令"><a href="#1-1-常用Docker命令" class="headerlink" title="1.1 常用Docker命令"></a>1.1 常用Docker命令</h2><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">开启Docker守护进程调试模式</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker daemon -D</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看Docker信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker info</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止或者启动Docker</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo service docker stop/start</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以命令行模式运行一个容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -i -t ubuntu /bin/bash</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">给容器命名</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run --name Micheal_container -i -t ubuntu /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动或者停止运行的容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker start/stop Micheal_container</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">附着到正在运行的容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker attach Micheal_container</span> </span><br></pre></td></tr></table></figure><p><strong>创建守护式容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run --name daemon_dave -d ubuntu /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>上面的docker run 使用了<code>-d</code>参数，因此Docker会将容器放到后台运行。</p></blockquote><p><strong>Docker日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取守护式容器的日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker logs daemon_dave</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪守护式容器的日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker logs -f daemon_dave</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">获取日志的最后10行</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker logs --<span class="built_in">tail</span> 10 daemon_dave</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">跟踪某个容器的最新日志</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker logs --<span class="built_in">tail</span> 0 -f daemon_dave</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-t 标志为每条日志项加上时间戳</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker logs -ft daemon_dave</span> </span><br></pre></td></tr></table></figure><p><strong>Docker日志驱动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run --log-driver=<span class="string">&quot;syslog&quot;</span> --name daemon_dave -d ubuntu /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>使用syslog将会禁用docker logs命令，并且将所有容器的日志输出都重定向到Syslog。</p></blockquote><p><strong>查看容器内的进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker top daemon_dave</span></span><br></pre></td></tr></table></figure><p><strong>Docker统计信息</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker stats daemon_dave daemon_kate daemon_clear daemon_sarah</span></span><br></pre></td></tr></table></figure><blockquote><p>以上命令可以看到一个守护容器的列表，以及他们的CPU、内存、网络I&#x2F;O以及存储I&#x2F;O的性能和指标。这对快速监控一台主机上的一组容器非常有用。</p></blockquote><p><strong>在容器内部运行进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker <span class="built_in">exec</span> -d daemon_dave <span class="built_in">touch</span> /etc/new_config_file</span></span><br></pre></td></tr></table></figure><blockquote><p><code>-d</code>表示需要运行一个后台进程</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在容器内运行交互命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker <span class="built_in">exec</span> -t -i daemon_dave /bin/bash</span> </span><br></pre></td></tr></table></figure><p><strong>自动重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run --restart=always --name daemon_dave -d ubuntu /bin/sh -c <span class="string">&quot;while true; do echo hello world; sleep 1; done&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p><code>--restart</code>标志被设置为always。无论容器的退出代码是什么，Docker都会自动重启改容器。除了always，还可以将这个标志设为<code>on-failure</code>，这样，只有当容器的退出代码为非0值的时候，才会自动重启。另外，on-failure还接受一个可选的重启次数参数，<code>--restart=on-failure:5</code>,Docker会尝试自动重启改容器，最多重启5次。</p></blockquote><p><strong>深入容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker inspect daemon_dave</span></span><br></pre></td></tr></table></figure><blockquote><p>docker inspect命令会对容器进行详细的检查，然后返回其配置信息，包括名称、命令、网络配置以及很多有用的数据。可以使用<code>-f</code>或者<code>--format</code>标志来选定查看结果。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker inspect --format=<span class="string">&#x27;&#123;.State.Running&#125;&#x27;</span> daemon_dave</span></span><br></pre></td></tr></table></figure><blockquote><p>查看多个容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker inspect --format <span class="string">&#x27;&#123;.Name&#125; &#123;.State.Running&#125;&#x27;</span> daemon_dave Micheal_container</span></span><br></pre></td></tr></table></figure><p><strong>删除容器</strong><br>​    </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker <span class="built_in">rm</span> daemon_dave</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除所有容器</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker <span class="built_in">rm</span> `sudo docker ps -a -q`</span></span><br></pre></td></tr></table></figure><p><strong>列出所有镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker images</span></span><br></pre></td></tr></table></figure><p><strong>拉去镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker pull ubuntu:16.04</span></span><br></pre></td></tr></table></figure><p><strong>运行一个带标签的Docker镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -i -t --name new_container ubuntu:16.04 /bin/bash</span></span><br></pre></td></tr></table></figure><p><strong>查找镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker search puppet</span></span><br></pre></td></tr></table></figure><p><strong>构建镜像</strong></p><ul><li>使用<code>docker commit</code>命令</li><li>使用<code>docker build</code>命令和<code>Dockerfile</code>文件</li></ul><p><strong>用Docker的commit命令创建镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -i -t ubuntu /bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">接下来安装需要安装的工具，安装完成后<span class="built_in">exit</span>退出容器, eg：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get -yqq update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">apt-get -y install apache2</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定提交修改过的容器的ID（可以通过docker ps -l -q命令得到刚创建的容器的ID）</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker commit 4aab3cecb76 micheal/apache2</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查新创建的镜像</span></span><br><span class="line">sudo docker images micheal/apache2  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交另一个新定制容器</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-m 选项用来指定新创建的镜像的提交信息，-a 用来列出该镜像的作者信息。</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker commit -m<span class="string">&quot;A new custom image&quot;</span> -a<span class="string">&quot;Micheal&quot;</span> 4aab3cecb76 micheal/apache2:webserver</span>  </span><br></pre></td></tr></table></figure><p><strong>用Dockerfile构建镜像</strong></p><p>Dockerfile文件示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Vsersion: 0.0.1</span></span><br><span class="line">FROM ubuntu:16.04</span><br><span class="line">MAINTAINER Micheal &quot;miaopei@baicells.com&quot;</span><br><span class="line">RUN apt-get -yqq update &amp;&amp; apt-get -y install nginx</span><br><span class="line">RUN echo &#x27;Hi, I an in your container&#x27; &gt; /usr/share/nginx/html/index.html</span><br><span class="line">EXPOSE 80</span><br></pre></td></tr></table></figure><blockquote><p>Dockerfile中的指令会按照顺序从上到下执行，所以根据需要合理安排指令的顺序。</p><p>如果Dockerfile由于某些原因没有正常结束，那么用户得到了一个可以使用的镜像。这对调试非常有帮助：可以基于改镜像运行一个具备交互功能的容器，使用最后创建的镜像对为什么用户指令会失败进行调试。</p><p><strong>每个Dockerfile的第一条指令必须是FROM</strong>,FROM指令指定一个已经存在的镜像，后续指令都将基于该镜像进行，这个镜像被称为基础镜像。</p><p>MAINTAINER指令告诉Docker镜像的作者是谁，以及作者的电子邮件。有助于标识镜像的所有者和联系方式。</p></blockquote><blockquote><p>默认情况下，RUN指令会在shell里使用命令包装器<code>/bin/sh -c</code>来执行，如果是在一个不支持shell的平台上运行或者不希望在shell中运行（比如避免shell字符串篡改），也可以使用<code>exec</code>格式的RUN指令，如下所示：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RUN [ &quot;apt-get&quot;, &quot; install&quot;, &quot;-y&quot;, &quot;nginx&quot; ]</span><br></pre></td></tr></table></figure><blockquote><p>EXPOSE指令告诉Docker该容器内的应用程序将会使用该容器的指定端口。</p></blockquote><p><strong>基于Dockerfile构建新镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker build -t=<span class="string">&quot;micheal/static_web&quot;</span> .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker build -t=<span class="string">&quot;micheal/static_web:v1&quot;</span> .</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">这里Docker假设在这个Git仓库的根目录下存在Dockerfile文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker build -t=<span class="string">&quot;micheal/static_web:v1&quot;</span> git@github.com:micheal/docker_static_web</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略Dockerfile的构建缓存</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker build --no-cache -t=<span class="string">&quot;micheal/static_web&quot;</span> .</span> </span><br></pre></td></tr></table></figure><p><strong>查看镜像</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出Docker镜像</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker images</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看镜像每一层，以及创建这些层的Dockerfile指令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker <span class="built_in">history</span> micheal/static_web</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -d -p 80 --name statix_web micheal/static_web nginx -g <span class="string">&quot;daemon off;&quot;</span></span></span><br></pre></td></tr></table></figure><blockquote><p>nginx -g “daemon off;”,这将以前台的方式启动Nginx。</p><p><code>-p</code>标志用来控制Docker在运行时应该公开那些网络端口给外部（宿主机）。运行一个容器时，Docker可以通过两种方式来在宿主机上分配端口。</p><ul><li>Docker可以在宿主机上随机选择一个位于32768 ~ 61000的一个比较大的端口号来映射到容器中的80端口上。</li><li>可以在Docker宿主机只指定一个具体的端口号来映射到容器中的80端口上。</li></ul></blockquote><p><strong>查看Docker端口映射情况</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker ps -l</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">返回宿主机中映射的端口</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo socker port static_web 80</span> </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-p会将容器内的80端口绑定到宿主机的8080端口上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -d -p 8080:80 --name statix_web micheal/static_web nginx -g <span class="string">&quot;daemon off;&quot;</span></span> </span><br></pre></td></tr></table></figure><p><strong>Dockerfile指令</strong></p><ol><li>CMD</li></ol><blockquote><p>CMD指令用于指定一个容器启动时要运行的命令。这有点儿类似于RUN指令，只是RUN指令是指定容器镜像被构建时要运行的命令，而CMD是指定容器被启动时要运行的命令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CMD [&quot;/bin/bash/&quot;, &quot;-l&quot;]</span><br></pre></td></tr></table></figure><ol><li>ENTRYPOINT</li></ol><blockquote><p>ENTRYPOINT和CMD指令非常类似，我们可在docker run命令行中覆盖CMD指令，而ENTRYPOINT指令提供的命令则不容易在启动容器的时候被覆盖。</p><p>可以组合使用ENTRYPOINT和CMD指令来完成一些巧妙的工作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ENTRYPOINT [&quot;/usr/sbin/nginx&quot;]</span><br><span class="line">CMD [&quot;-h&quot;]</span><br></pre></td></tr></table></figure><ol><li>WORKDIR</li></ol><blockquote><p>WORKDIR指令用来在从镜像创建一个新容器时，在容器内部设置一个工作目录，ENTRYPOINT和&#x2F;或CMD指定的程序会在这个目录下执行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">WORKDIR /opt/webapp/db</span><br><span class="line">RUN bundle install</span><br><span class="line">WORKDIR /opt/webapp</span><br><span class="line">ENTRYPOINT [&quot;rackup&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>可以通过<code>-w</code>标志在运行时覆盖工作目录</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -ti -w /var/log ubuntu <span class="built_in">pwd</span>/var/log</span></span><br></pre></td></tr></table></figure><ol><li>ENV</li></ol><blockquote><p>ENV指令用来在镜像构建过程中设置环境变量。这些变量会持久保存到从我们镜像创建的任何容器中。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ENV RVM_PATH /home/rvm</span><br></pre></td></tr></table></figure><blockquote><p>也可以使用docker run命令行的<code>-e</code>标志来传递环境变量。这些环境变量只会在运行时有效。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -ti -e <span class="string">&quot;WEB_PORT=8080&quot;</span> ubuntu <span class="built_in">env</span></span></span><br></pre></td></tr></table></figure><ol><li>USER</li></ol><blockquote><p>USER指令用来指定该镜像会以什么样的用户身份来运行。我们可以指定用户名或者UID以及组或GID，甚至是两者的组合。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">USER user</span><br><span class="line">USER user:group</span><br><span class="line">USER uid</span><br><span class="line">USER uid:gid</span><br><span class="line">USER user:gid</span><br><span class="line">USER uid:group</span><br></pre></td></tr></table></figure><blockquote><p>也可以在docker run命令行中通过<code>-u</code>标志覆盖该指令指定的值。</p></blockquote><ol><li>VOLUME</li></ol><blockquote><p>VOLUME指令用来向基于镜像创建的容器添加卷。一个卷可以存在于一个或者多个容器内特定的目录，这个目录可以绕过联合文件系统，并提供如下共享数据或者对数据进行持久化的功能。</p><ul><li>卷可以在容器间共享和重用</li><li>一个容器可以不是必须和其他容器共享卷</li><li>对卷的修改是立即生效的</li><li>对卷的修改不会对更新镜像产生影响</li><li>卷会一直存在直到没有任何容器再使用它</li></ul><p>卷功能让我们可以将数据（如源代码）、数据库或者其他内容添加到镜像中而不是将这些内容提交到镜像中，并且允许我们在多个容器间共享这些内容，我们可以利用此功能来测试容器和内部应用程序代码，管理日志，或者处理容器内部的数据库。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/opt/project&quot;]</span><br></pre></td></tr></table></figure><blockquote><p>这条指令将会基于此镜像的任何容器创建一个名为&#x2F;opt&#x2F;project的挂载点。</p><p>也可以通过指定数组的方式指定多个卷</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VOLUME [&quot;/opt/project&quot;, &quot;/data&quot;]</span><br></pre></td></tr></table></figure><ol><li>ADD</li></ol><blockquote><p>ADD指令用来将构建环境下的文件和目录复制到镜像中。不能对构建目录或者上下文之外的文件进行ADD操作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ADD software.lic /opt/application/software.lic</span><br><span class="line">ADD latest.tar.gz /var/www/wordpress/   //这条指令会将归档文件解开到指定的目录下</span><br></pre></td></tr></table></figure><ol><li>COPY</li></ol><blockquote><p>COPY指令非常类似ADD，它们根本不同是COPY只关心构建上下文中复制本地文件，而不会去做文件提取（extraction）和解压（decompression）的工作。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COPY conf.d/ /etc/apache2/</span><br></pre></td></tr></table></figure><ol><li>LABEL</li></ol><blockquote><p>LABEL指令用于为Docker镜像添加元数据。元数据以键值对的形式展现</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LABEL version=&quot;1.0&quot;</span><br><span class="line">LABEL location=&quot;New York&quot; type=&quot;Data Center&quot; role=&quot;Web Server&quot;</span><br></pre></td></tr></table></figure><blockquote><p>可以使用docker inspect命令查看容器标签</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker inspect micheal/apache2</span></span><br></pre></td></tr></table></figure><ol><li>STOPSIGNAL</li></ol><blockquote><p>STOPSIGNAL指令用来设置停止容器时发送什么系统调用信号给容器。</p></blockquote><ol><li>ARG</li></ol><blockquote><p>ARG指令用来定义可以在docker build命令运行时传递给构建运行时的变量，我们只需要在构建时使用–build-arg标志即可。用户只能在构建时指定在Dockerfile文件汇总定义过的参数。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ARG build</span><br><span class="line">ARG webapp_user=user</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">docker build --build-arg build=1234 -t micheal/webapp .</span></span><br></pre></td></tr></table></figure><ol><li>ONBUILD</li></ol><blockquote><p>ONBUILD指令能为镜像添加触发器（trigger）。当一个镜像被用做其他镜像的基础镜像时（比如用户的镜像需要从某未准备好的位置添加源代码，或者用户需要执行特定于构建镜像的环境的构建脚本），该镜像中的触发器将会被执行。</p><p>触发器会在构建过程中插入新指令，我们可以认为这些指令是紧跟在FROM之后指定的。触发器可以是任何构建指令。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ONBUILD ADD . /app/src</span><br><span class="line">ONBUILD RUN cd /app/src/ &amp;&amp; make</span><br></pre></td></tr></table></figure><blockquote><p>上面的代码将会在创建的镜像中加入ONBUILD触发器，ONBUILD指令可以在镜像上运行docker inspect命令查看。</p></blockquote><p><strong>Docker Networking</strong></p><blockquote><p>容器之间的连接用网络创建，这被称为Docker Networking。Docker Networking允许用户创建自己的网络，容器可以通过这个网上互相通信。更重要的是，现在容器可以跨越不同的宿主机来通信，并且网络配置可以更灵活的定制。Docker Networking也和Docker Compose以及Swarm进行了集成。</p><p>要想使用Docker网络，需要先创建一个网络，然后在这个网络下启动容器。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker network create app</span></span><br></pre></td></tr></table></figure><blockquote><p>这里使用docker network命令创建了一个桥接网络，命名为app。可以使用docker network inspect命令查看新创建的这个网络。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker network inspect app</span></span><br></pre></td></tr></table></figure><blockquote><p>我们可以看到这个新网络是一个本地的桥接网络（这非常像docker0网络），而且现在没有容器再这个网络中运行。</p><p>可以使用<code>docker network ls</code>命令列出当前系统中所有的网络。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker network <span class="built_in">ls</span></span> </span><br></pre></td></tr></table></figure><blockquote><p>也可以使用 <code>docker network rm</code>命令删除一个Docker网络。</p><p>在Docker网络中创建Redis容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -d --net=app --name db micheal/redis</span></span><br></pre></td></tr></table></figure><blockquote><p><code>--net</code>标志指定了新容器将会在那个网络中运行。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker network inspect app</span></span><br></pre></td></tr></table></figure><blockquote><p>将已有容器连接到Docker网络</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker network connect app db2</span></span><br></pre></td></tr></table></figure><blockquote><p>可以通过<code>docker network disconnect</code> 命令断开一个容器与指定网络的连接</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker network disconnect app db2</span></span><br></pre></td></tr></table></figure><p><strong>通过Docker链接连接容器</strong></p><blockquote><p>启动一个Redis容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -d --name redis micheal/redis</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这里没有公开容器的任何端口。一会就能看到这么做的原因。</p></blockquote><blockquote><p>链接Redis容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo docker run -p 4567 --name webapp --<span class="built_in">link</span> redis:db -t -i -v <span class="variable">$PWD</span>/webapp_redis:/opt/webapp micheal/sinatra /bin/bash</span></span><br></pre></td></tr></table></figure><blockquote><p>这个命令做了不少事情，我们逐一解释。首先，我们使用<code>-p</code>标志公开4567端口，这样就能从外面访问web应用程序。</p><p>我们还使用<code>--name</code>标志给容器命名为webapp，并且使用了<code>-v</code>标志把web应用程序目录作为卷挂载到了容器里。</p><p>然而，这次我们使用了一个新标志<code>--link</code>。<code>--link</code>标志创建了两个容器间的客户-服务链接。这个标志需要两个参数：一个是要链接的容器的名字，另一个是链接的别名。这个例子中我们创建了客户联系，webapp容器是客户，redis容器是“服务”，并且为这个服务增加了db作为别名。这个别名让我们可以一致地访问容器公开信息，而无须关注底层容器的名字。链接让服务容器有能力与客户容器通信，并且能分享一些连接细节，这些细节有助于在应用程序中配置并使用这个链接。</p></blockquote><blockquote><p>连接也能得到一些安全上的好处。注意，启动 Redis 容器时，并没有使用<code>-p</code>标志公开Redis的端口。因为不需要这么做。通过把容器链接在一起，可以让客户直接访问任意服务容器的公开端口（即客户webapp容器可以连接到服务redis容器的6379端口）。更妙的是，只有使用<code>--link</code>标志链接到这个容器的容器才能连接到这个端口。容器的端口不需要对本地宿主机公开，现在我们已经拥有一个非常安全的模型。通过这个安全模型，就可以限制容器化应用程序被攻击面，减少应用暴露的网络。</p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;1-Docker基本命令&quot;&gt;&lt;a href=&quot;#1-Docker基本命令&quot; class=&quot;headerlink&quot; title=&quot;1. Docker基本命令&quot;&gt;&lt;/a&gt;1. Docker基本命令&lt;/h1&gt;&lt;h2 id=&quot;1-1-常用Docker命令&quot;&gt;&lt;a href=&quot;#1-1-常用Docker命令&quot; class=&quot;headerlink&quot; title=&quot;1.1 常用Docker命令&quot;&gt;&lt;/a&gt;1.1 常用Docker命令&lt;/h2&gt;</summary>
    
    
    
    <category term="Docker" scheme="http://miaopei.github.io/categories/Docker/"/>
    
    
    <category term="Docker" scheme="http://miaopei.github.io/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Next主题个性化设置</title>
    <link href="http://miaopei.github.io/2016/12/23/Hexo/Hexo-Next-Configuration/"/>
    <id>http://miaopei.github.io/2016/12/23/Hexo/Hexo-Next-Configuration/</id>
    <published>2016-12-23T02:14:50.000Z</published>
    <updated>2024-05-29T01:43:23.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/HarleyWang93/blog/issues/1">Hexo + GitHub (Coding) Pages 搭建博客</a></p><p><a href="http://blog.shenyuanluo.com/HexoConfig1.html">Hexo的Next主题个性化设置（一）——基础设置</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/HarleyWang93/blog/issues/1&quot;&gt;Hexo + GitHub (Coding) Pages 搭建博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sh</summary>
      
    
    
    
    <category term="hexo" scheme="http://miaopei.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://miaopei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
