<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mr.Miaow Blog</title>
  
  <subtitle>Do what you say, say what you do.</subtitle>
  <link href="http://miaopei.github.io/atom.xml" rel="self"/>
  
  <link href="http://miaopei.github.io/"/>
  <updated>2024-05-31T01:39:59.462Z</updated>
  <id>http://miaopei.github.io/</id>
  
  <author>
    <name>Mr.Miaow</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sysrepo note</title>
    <link href="http://miaopei.github.io/2020/09/23/Netconf/sysrepo-note/"/>
    <id>http://miaopei.github.io/2020/09/23/Netconf/sysrepo-note/</id>
    <published>2020-09-23T11:50:28.000Z</published>
    <updated>2024-05-31T01:39:59.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sysrepo"><a href="#sysrepo" class="headerlink" title="sysrepo"></a>sysrepo</h1><blockquote><p>sysrepo - 1.4.2 笔记</p></blockquote><h2 id="1-sysrepo-概述"><a href="#1-sysrepo-概述" class="headerlink" title="1. sysrepo 概述"></a>1. sysrepo 概述</h2><p><code>Sysrepo</code> 是 <code>Linux/Unix</code> 系统下一个基于 <code>YANG</code> 模型的配置和操作数据库，为应用程序提供统一的操作数据的接口。应用程序使用 <code>YANG</code> 模型来建模，通过利用 <code>YANG</code> 模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件的一种数据管理方式。</p><span id="more"></span><h3 id="1-1-基本特性与原则"><a href="#1-1-基本特性与原则" class="headerlink" title="1.1 基本特性与原则"></a>1.1 基本特性与原则</h3><ul><li><code>sysrepo</code> 只是一个库，不是一个独立的进程</li><li>全部的数据始终由 <code>Yang</code> 模型区分，这就可能造成许多严重的后果，例如，允许同时使用不同的模型进行工作，这将可 导致数据访问时异常。</li><li>在所有有 <code>IPC</code> 中使用共享内存的方式，取代了之前的 UNIX中进程间通信的方式，这样更高效，性能更优，扩展性更强</li><li>在 <code>sysrepo</code> 中几乎不存在 CPU 时间浪费，没有活动等待或者定期检查</li><li>完全可定制化的事件处理，从定期检查或者 <code>poll/select</code> 到自动线程处理</li><li>访问控制严格受制于文件系统的权限</li><li><code>sysrepo</code> 操作期间可以修改 <code>Yang</code> 模型</li></ul><h3 id="1-2-主要特点"><a href="#1-2-主要特点" class="headerlink" title="1.2 主要特点"></a>1.2 主要特点</h3><ul><li><code>sysrepo</code> 的主要功能是使用 <code>YANG</code> 模型对数据进行操作并订阅各种事件。但是，在执行任何操作时，都需要创建会话，连接会话，并要 <code>install</code> 所支持的各类 <code>Yang</code> 模型。假如设置了日志操作记录，<code>sysrepo</code> 在运行时，也可以保留它的行为记录。</li><li>通过 <code>Yang</code> 的 <code>xpath</code> 来修改与获取数据，所以要求了解 <code>xpath</code> 的基础知识。</li><li>最常见的操作订阅事件和修改订阅事件，订阅事件是允许应用程序根据特定的事件回调相应的数据执行，更改操作。操作执行成功后，会将对应配置操作保存，这样 <code>sysrepo</code> 可以充当更智能的配置文件，从而保证配置的可恢复性。</li><li>也支持 <code>Rpc/Action/Notify</code> 的订阅，这样可以通过执行特别的 <code>Rpc</code> ，就可以分别向其他 <code>sysrepo</code> 客户端通知各种生成的事件。</li></ul><h3 id="1-3-访问方法"><a href="#1-3-访问方法" class="headerlink" title="1.3 访问方法"></a>1.3 访问方法</h3><p>应用程序可以通过两种方法来访问 <code>sysrepo</code>，一种是直接的方法，即当应用程序需要配置数据或者执行相应的 <code>callback</code> 来响应配置变化时，可以通过 <code>sysrepo</code> 自带的应用程序来触发用 <code>sysrepo</code> 的功能函数来实现。这种方法一般用于开发人员自测或验证某个模块时使用；另一种是间接的方法，即应用程序通过创建 <code>Deamon</code> 进程的方法，该方法是通过将对 <code>sysrepo</code> 的调用转化为对应用程序的特定操作，该方法也最容易扩展，也无需为了使用 <code>sysrepo</code> 数据库而做相应的更改。如果有多个类似的 <code>Deamon</code> 进程，可以将这些进程合成一个 <code>plugind</code>，最后由一个进程统一纳管。可扩展性得到大大的提高。间接方法的使用如图所示：</p><p><img data-src="/images/images_sr/sr_apps.png" alt="sysrepo 使用方法"></p><h3 id="1-4-数据库"><a href="#1-4-数据库" class="headerlink" title="1.4 数据库"></a>1.4 数据库</h3><p>数据库结构大多是遵循 <code>NMDA</code>（网络管理数据存储区体）所定义的体系架构。<code>sysrepo</code> 同样也不例外，<code>sysrepo</code> 中定义了四类数据库，分别是 <code>startup</code>，<code>running</code>，<code>candidate</code> 和 <code>operational</code>。</p><ol><li><code>startup</code> 库，是 <code>sysrepo</code> 中唯一的持久性数据存储库，它包含设备启动时的配置文件，系统启动后创建的第一个 <code>sysrepo</code> 连接（共享内存）时，会将配置文件从 <code>startup</code> 库 <code>copy</code> 到 <code>running</code> 库；</li><li><code>running</code> 数据库，是保存当前所运行时系统配置，当一个配置发生变化时并且设备需要重新配置时， <code>running</code> 数据库需要修改。系统重启时不会存在，如果需要，可以将配置 <code>copy</code> 到 <code>startup</code> 库。</li><li><code>candidate</code> 数据库，候选库，顾名思义，它是一个准备配置的数据但又不影响实际设备使用。虽然该库中的数据不限制设备的正常使用，可以不必严格按照 NETCONF协议的定义，但也是需要遵循一般的数据存储规则。该库正常是无效的，实际使用时，需要将该库 <code>mirror</code> 到 <code>running</code>，由 <code>running</code> 完成修改和配置下发，最后通过 <code>sr_copy_config()</code>, 将 <code>candidate</code> 库重置。整个会话的过程中可能需要相应的 <code>lock</code> 操作，来保证操作的一致与完整性。</li><li><code>operational</code> 库，维护当前使用的配置，并且该库只可读。它通常与对应的 <code>running</code> 库有所不同，而且，只包含任何状态数据结点。在默认的情况下，该库是空的，对于用户来说，全部的订阅数据和操作数据都存储于 <code>operational</code> 库中。并且 <code>Notificationg RPC/Action</code> 数据的校验都是在 <code>operational</code> 库是完成。</li></ol><h3 id="1-5-运行模式"><a href="#1-5-运行模式" class="headerlink" title="1.5 运行模式"></a>1.5 运行模式</h3><ul><li>对于连接与会话来说，会话是不同步的，所以不会在多个线程中共享一个会话。每个线程都需要建立属于自己的会话，来确保本线程运行的正确。</li><li>对于订阅来说，可以由应用程序对感兴趣的事件通过 <code>*_subscribe()</code> 函数来做相应的订阅。订阅在原则上是将全部的的事件一并处理，应用程序也可以将根据不同的事件类型拆分成多个不同的订阅，用于保证事件的并发处理。</li><li>每个订阅可以由不同的方式处理，这个由 <code>sysrepo</code> 做统一管理。<code>sysrepo</code> 创建一个单独的线程来捕获各种订阅事件的发生，然后通过订阅所注册的回调函数不处理它们。</li></ul><h2 id="2-sysrepo-常用操作命令"><a href="#2-sysrepo-常用操作命令" class="headerlink" title="2. sysrepo 常用操作命令"></a>2. sysrepo 常用操作命令</h2><p><code>sysrepo</code> 提供两个独立的，非常实用的程序。方便开发者便捷地使用 <code>sysrepo</code> 来开发与调试自己的应用。</p><h3 id="2-1-Sysrepoctl"><a href="#2-1-Sysrepoctl" class="headerlink" title="2.1 Sysrepoctl"></a>2.1 Sysrepoctl</h3><p><code>sysrepoctl</code>，它用于列出，安装，卸载或更新 <code>sysrepo</code> 模块，也能用于修改一个 <code>sysrepo</code> 模块的特性，权限等。开发过程中经常使用的命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出全部已经安装在 sysrepo 中的 Yang 模块，并包含模块的基本信息</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -l, --list</span>     </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -l</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装指定 Yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -i， --install</span>  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以默认权限安装 ietf-interfaces.yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang</span>  </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">为特定 admin 用户安装可访问权限为 644 的 ietf-interfaces.yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang --owner=admin:admin --permissions=644</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">卸载已安装的 Yang 模型</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -u, --uninstall</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --uninstall ietf-interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改 Yang 模型，常用的是设置模型支持的特性</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -c, --chang</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --(<span class="built_in">disable</span>|<span class="built_in">enable</span>)-feature if-mib</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新 Yang 模型，如果已安装的 Yang 模型有更新，可以执行该命令</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -U, --update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --update /root/ietf-netconf@2013-09-29.yang</span></span><br></pre></td></tr></table></figure><p>更多 <code>sysrepoctl</code> 的使用，请参考 <code>sysrepoctl -h</code>。</p><h3 id="2-2-sysrepocfg"><a href="#2-2-sysrepocfg" class="headerlink" title="2.2 sysrepocfg"></a>2.2 sysrepocfg</h3><p><code>sysrepocfg</code> 是用于 <code>importing</code>，<code>exporting</code>，<code>editing</code>，<code>replacing</code> 配置到指定的数据库中。命令默认是操作 <code>running</code> 库，也支持多种数据格式，<code>json</code> , <code>xml</code> , <code>lyb</code> ，除非通过 <code>–format</code> 特定指出，默认的采用 <code>xml</code> 格式。常用的命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导入一个配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -I, --import[=]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 ietf-interfaces 配置导入默认 running 下的 ietf-interfaces 模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces.xml</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 json 格式的 ietf-interfaces 配置导入 startup 的 ietf-interfaces 模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces_startup.json --datastore startup --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">导出一个配置</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -X, --<span class="built_in">export</span>[=]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 running 库 ietf-interfaces 的配置 xml 的格式导入，并以 ietf-interfaces_running.xml 名字命令配置文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span>=ietf-interfaces_running.xml --format xml --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编辑或修改配置文件，应用到指定的数据库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -E, --edit[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=candidate.xml --datastore candidate</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是修改 running 库，需要加相应的锁</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --lock</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">发一个 RPC 请求，RPC 返回的结果直接输出于终端</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -R, --rpc[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p>更多 <code>sysrepocfg</code> 的使用，请参考 <code>sysrepocfg -h</code>。</p><h2 id="3-sysrepo-plugind-源码分析"><a href="#3-sysrepo-plugind-源码分析" class="headerlink" title="3. sysrepo-plugind 源码分析"></a>3. sysrepo-plugind 源码分析</h2><p>应用程序通过将对 <code>sysrepo</code> 的调用通过 <code>sysrepo</code> 提供的相应的 API接口访问方法，称为 <code>syrepo</code> 的间接访问方法。该方法是应用程序通过创建 Deamon进程，通过 <code>IPC Shm</code> 机制与 <code>sysrepo</code> 通信。可以做到对 <code>sysrepo</code> 的即插即用，最后由 <code>sysrepo</code> 纳管，这就是 <code>Plugind</code>，命名为 <code>sysrepo-plugind</code>。要快速的使用 <code>sysrepo</code>，并快速开发出适配于 <code>sysrepo</code> 的插件，就要先了解 <code>sysrepo-plugind</code> 的实现原理与机制，就需要先从实现 <code>sysrepo-plugind</code> 的源码处着手。<code>sysrepo</code> 源码路径：<code>git clone https://github.com/sysrepo/sysrepo.git</code> 。 <code>Sysrepo-plugind</code> 实现的路径为 <code>sysrepo/src/executables/sysrepo-plugind.c</code> 。下面也就从该文件开始说。</p><h3 id="3-1-数据结构"><a href="#3-1-数据结构" class="headerlink" title="3.1 数据结构"></a>3.1 数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">srpd_plugin_s</span> &#123;</span><br><span class="line">    <span class="type">void</span> *handle;</span><br><span class="line">    <span class="type">srp_init_cb_t</span> init_cb;</span><br><span class="line">    <span class="type">srp_cleanup_cb_t</span> cleanup_cb;</span><br><span class="line">    <span class="type">void</span> *private_data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">/*结构参数说明*/</span></span><br><span class="line">handle: 动态库句柄,在load_plugin中细说</span><br><span class="line"> </span><br><span class="line"><span class="type">srp_init_cb_t</span>:</span><br><span class="line"><span class="comment">/*Sysrepo plugin initialization callback.*/</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="type">srp_init_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> **private_data)</span></span>;</span><br><span class="line"> </span><br><span class="line"><span class="type">srp_cleanup_cb_t</span> :</span><br><span class="line"><span class="comment">/*brief Sysrepo plugin cleanup callback.*/</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="type">srp_cleanup_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> *private_data)</span></span>;</span><br><span class="line"> </span><br><span class="line">private_data:  Private context opaque to sysrepo</span><br></pre></td></tr></table></figure><h3 id="3-2-main-函数实现"><a href="#3-2-main-函数实现" class="headerlink" title="3.2 main 函数实现"></a>3.2 main 函数实现</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">srpd_plugin_s</span> *plugins = <span class="literal">NULL</span>;       <span class="comment">/*plugin结构*/</span></span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn = <span class="literal">NULL</span>;                 <span class="comment">/*sysrepo连接的上下文，该结构定义于common.h.in*/</span></span><br><span class="line">    <span class="type">sr_session_ctx_t</span> *sess = <span class="literal">NULL</span>;              <span class="comment">/*sysrepo会话的上下文，该结构定义于common.h.in中*/</span></span><br><span class="line">    <span class="type">sr_log_level_t</span> log_level = SR_LL_ERR;       <span class="comment">/*输出log等级，默认是ERR*/</span></span><br><span class="line">    <span class="type">int</span> plugin_count = <span class="number">0</span>, i, r, rc = EXIT_FAILURE, opt, debug = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">option</span> options[] = &#123;</span><br><span class="line">        &#123;<span class="string">&quot;help&quot;</span>,      no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;h&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;version&quot;</span>,   no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;V&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;verbosity&quot;</span>, required_argument, <span class="literal">NULL</span>, <span class="string">&#x27;v&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="string">&quot;debug&quot;</span>,     no_argument,       <span class="literal">NULL</span>, <span class="string">&#x27;d&#x27;</span>&#125;,</span><br><span class="line">        &#123;<span class="literal">NULL</span>,        <span class="number">0</span>,                 <span class="literal">NULL</span>, <span class="number">0</span>&#125;,</span><br><span class="line">    &#125;;                                          <span class="comment">/*命令行支持的参数*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* process options */</span></span><br><span class="line">    opterr = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*整个while循环是解析命令的参数，例如，在调试时，输入“sysrepo-plugind -d -v 4” 是debug模式        </span></span><br><span class="line"><span class="comment">     *下log级别DBG级，将会打印全部的调试信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> ((opt = <span class="built_in">getopt_long</span>(argc, argv, <span class="string">&quot;hVv:d&quot;</span>, options, <span class="literal">NULL</span>)) != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (opt) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;h&#x27;</span>:</span><br><span class="line">            <span class="built_in">version_print</span>();</span><br><span class="line">            <span class="built_in">help_print</span>();</span><br><span class="line">            rc = EXIT_SUCCESS;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;V&#x27;</span>:</span><br><span class="line">            <span class="built_in">version_print</span>();</span><br><span class="line">            rc = EXIT_SUCCESS;</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;v&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;none&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_NONE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;error&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_ERR;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;warning&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_WRN;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;info&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_INF;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(optarg, <span class="string">&quot;debug&quot;</span>)) &#123;</span><br><span class="line">                log_level = SR_LL_DBG;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((<span class="built_in">strlen</span>(optarg) == <span class="number">1</span>) &amp;&amp; (optarg[<span class="number">0</span>] &gt;= <span class="string">&#x27;0&#x27;</span>) &amp;&amp; (optarg[<span class="number">0</span>] &lt;= <span class="string">&#x27;4&#x27;</span>)) &#123;</span><br><span class="line">                log_level = <span class="built_in">atoi</span>(optarg);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Invalid verbosity \&quot;%s\&quot;&quot;</span>, optarg);</span><br><span class="line">                <span class="keyword">goto</span> cleanup;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;d&#x27;</span>:</span><br><span class="line">            debug = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Invalid option or missing argument: -%c&quot;</span>, optopt);</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* check for additional argument */</span></span><br><span class="line">    <span class="keyword">if</span> (optind &lt; argc) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Redundant parameters&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* load plugins：将所有的pluginl加载，这是整个main第一处核心点，这关系用户开发的plugin能否正确加载*/</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">load_plugins</span>(&amp;plugins, &amp;plugin_count)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* daemonize, sysrepo-plugind no longer directly logs to stderr */</span></span><br><span class="line">    <span class="built_in">daemon_init</span>(debug, log_level);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create connection (after we have forked so that our PID is correct) */</span></span><br><span class="line">    <span class="comment">/*调用sysrepo API(sr_connect)创建与sysrepo的连接，并将返回创建连接的上下发*/</span></span><br><span class="line">    <span class="keyword">if</span> ((r = <span class="built_in">sr_connect</span>(<span class="number">0</span>, &amp;conn)) != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(r, <span class="string">&quot;Failed to connect&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create session */</span></span><br><span class="line">    <span class="comment">/*调用sysrepo API(sr_session_start)创建与sysrepo running库的会话，并启动该会话*/</span></span><br><span class="line">    <span class="keyword">if</span> ((r = <span class="built_in">sr_session_start</span>(conn, SR_DS_RUNNING, &amp;sess)) != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(r, <span class="string">&quot;Failed to start new session&quot;</span>);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*sr_connect(), sr_session_start(),是连接sysrepo基础，这两点基础实现，在后面sysrepo源码 </span></span><br><span class="line"><span class="comment">     *分析做详细说明，不在sysrepo-plugin中说明</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* init plugins */</span></span><br><span class="line">    <span class="comment">/*对所有已加载的plugin通过调用init_cb注册的回调初始化，这是整个main第二处核心点，与用户是强 </span></span><br><span class="line"><span class="comment">     *相关用户开发的插件，注册，订阅，初始化都通过init_cb，否则不能将sysrepol通信连接*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plugin_count; ++i) &#123;</span><br><span class="line">        r = plugins[i].<span class="built_in">init_cb</span>(sess, &amp;plugins[i].private_data);</span><br><span class="line">        <span class="keyword">if</span> (r != SR_ERR_OK) &#123;</span><br><span class="line">            <span class="built_in">SRP_LOG_ERR</span>(<span class="string">&quot;Plugin initialization failed (%s).&quot;</span>, <span class="built_in">sr_strerror</span>(r));</span><br><span class="line">            <span class="keyword">goto</span> cleanup;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* wait for a terminating signal */</span></span><br><span class="line">    <span class="built_in">pthread_mutex_lock</span>(&amp;lock);</span><br><span class="line">    <span class="keyword">while</span> (!loop_finish) &#123;</span><br><span class="line">        <span class="built_in">pthread_cond_wait</span>(&amp;cond, &amp;lock);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">pthread_mutex_unlock</span>(&amp;lock);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* cleanup plugins */</span></span><br><span class="line">    <span class="comment">/* sysrepo-plugindf正常结束后，回收plugin初始化时分配的资源*/</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plugin_count; ++i) &#123;</span><br><span class="line">        plugins[i].<span class="built_in">cleanup_cb</span>(sess, plugins[i].private_data);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* success */</span></span><br><span class="line">    rc = EXIT_SUCCESS;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*结束后，回收已分配的全部资源*/</span></span><br><span class="line">cleanup:</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; plugin_count; ++i) &#123;</span><br><span class="line">        <span class="built_in">dlclose</span>(plugins[i].handle);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(plugins);</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">sr_disconnect</span>(conn);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-load-plugins"><a href="#3-3-load-plugins" class="headerlink" title="3.3 load_plugins"></a>3.3 load_plugins</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">static</span> <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">load_plugins</span><span class="params">(<span class="keyword">struct</span> srpd_plugin_s **plugins, <span class="type">int</span> *plugin_count)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">void</span> *mem, *handle;</span><br><span class="line">    DIR *dir;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">dirent</span> *ent;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *plugins_dir;</span><br><span class="line">    <span class="type">char</span> *path;</span><br><span class="line">    <span class="type">int</span> rc = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    *plugins = <span class="literal">NULL</span>;</span><br><span class="line">    *plugin_count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* get plugins dir from environment variable, or use default one */</span></span><br><span class="line">    <span class="comment">/* bin_common.h.in #define SRPD_PLUGINS_PATH &quot;@PLUGINS_PATH@&quot;</span></span><br><span class="line"><span class="comment">     * @PLUGINS_PATH@在CMakeList.txt中定义，在编译时也可以自定义</span></span><br><span class="line"><span class="comment">     * CMakeList.txt对其定义如下</span></span><br><span class="line"><span class="comment">     * if(NOT PLUGINS_PATH)</span></span><br><span class="line"><span class="comment">     * set(PLUGINS_PATH             </span></span><br><span class="line"><span class="comment">     *    &quot;$&#123;CMAKE_INSTALL_PREFIX&#125;/$&#123;CMAKE_INSTALL_LIBDIR&#125;/sysrepo/plugins/&quot; CACHE PATH</span></span><br><span class="line"><span class="comment">     *   &quot;Sysrepo plugin daemon plugins path.&quot;)</span></span><br><span class="line"><span class="comment">     *   endif()</span></span><br><span class="line"><span class="comment">     *  用户不指定plugin的路径时，debian系统默认将plugin的动态库文件*.so安装 </span></span><br><span class="line"><span class="comment">     *    于/usr/lib/x86_64-linux-gnu/sysrepo/plugins/目录下，</span></span><br><span class="line"><span class="comment">     *  而Centos系统的默认安装路径为/usr/lib/sysrepo/plugins，在开发plugind时，安装路径也需要 </span></span><br><span class="line"><span class="comment">     *  指定到该路径下，否则，*.so找不到，则load不成功。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    plugins_dir = <span class="built_in">getenv</span>(<span class="string">&quot;SRPD_PLUGINS_PATH&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!plugins_dir) &#123;</span><br><span class="line">        plugins_dir = SRPD_PLUGINS_PATH;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create the directory if it does not exist */</span></span><br><span class="line">    <span class="comment">/* access函数，:检查调用进程是否可以对指定的文件执行某种操作， F_OK文件是否存在</span></span><br><span class="line"><span class="comment">     * 本段代码是检测SRPD_PLUGINS_PATH目录是否存在，如果不存在，调用sr_mkpath创建目录，并设置*            </span></span><br><span class="line"><span class="comment">     * 目录的访问权限000777。本段代码是安全性代码，确保指定的路径存在。对于实际开发中，是通过编 </span></span><br><span class="line"><span class="comment">     * 译是指定，不存在路径的动态库无法安装。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">access</span>(plugins_dir, F_OK) == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (errno != ENOENT) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Checking plugins dir existence failed (%s).&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">sr_mkpath</span>(plugins_dir, <span class="number">00777</span>) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Creating plugins dir \&quot;%s\&quot; failed (%s).&quot;</span>, plugins_dir, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* opendir函数，找开指定的目录文件，并返回DIR*形态的目录流，</span></span><br><span class="line"><span class="comment">     * 目录的读取与搜查也都需要此目录流 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    dir = <span class="built_in">opendir</span>(plugins_dir);</span><br><span class="line">    <span class="keyword">if</span> (!dir) &#123;</span><br><span class="line">        <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Opening \&quot;%s\&quot; directory failed (%s).&quot;</span>, plugins_dir, <span class="built_in">strerror</span>(errno));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*readdir函数，读取目录，返回参数dir目录流的下个目录进入点</span></span><br><span class="line"><span class="comment">     * 返回的结果是struct dirent的内容*/</span></span><br><span class="line">    <span class="keyword">while</span> ((ent = <span class="built_in">readdir</span>(dir))) &#123;</span><br><span class="line">        <span class="comment">/*Linux系统中存在&quot;.&quot; &quot;..&quot;两类目录，这两类目录名结构，在实际是不需要使用，需要跳过。*/</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(ent-&gt;d_name, <span class="string">&quot;.&quot;</span>) || !<span class="built_in">strcmp</span>(ent-&gt;d_name, <span class="string">&quot;..&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* open the plugin */</span></span><br><span class="line">        <span class="comment">/*将SRPD_PLUGINS_PATH与也读取的目录文件名，组成一个完成的动态库路径，供后面操作。*/</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">asprintf</span>(&amp;path, <span class="string">&quot;%s/%s&quot;</span>, plugins_dir, ent-&gt;d_name) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;asprintf() failed (%s).&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*RTLD_LAZY:暂缓决定，等有需要时再解出符号 </span></span><br><span class="line"><span class="comment">         *以RTLD_LAZY模式打开动态库，返回一个句柄给调用进程，如果失败，则返回。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        handle = <span class="built_in">dlopen</span>(path, RTLD_LAZY);</span><br><span class="line">        <span class="keyword">if</span> (!handle) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Opening plugin \&quot;%s\&quot; failed (%s).&quot;</span>, path, <span class="built_in">dlerror</span>());</span><br><span class="line">            <span class="built_in">free</span>(path);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">free</span>(path);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* allocate new plugin */</span></span><br><span class="line">        <span class="comment">/* 分配一个新的plugin空间，并将新分配的men挂载plugins结构下*/</span></span><br><span class="line">        mem = <span class="built_in">realloc</span>(*plugins, (*plugin_count + <span class="number">1</span>) * <span class="keyword">sizeof</span> **plugins);</span><br><span class="line">        <span class="keyword">if</span> (!mem) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;realloc() failed (%s).&quot;</span>, <span class="built_in">strerror</span>(errno));</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *plugins = mem;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* find required functions */</span></span><br><span class="line">        <span class="comment">/* plugins结构中有两个必须的回调函数，一个是init_cb,另一个是cleanup_cb</span></span><br><span class="line"><span class="comment">         * 通过 void *dlsym(void *handle, const char* symbol);，</span></span><br><span class="line"><span class="comment">         * handle是使用dlopen函数之后返回的句柄，</span></span><br><span class="line"><span class="comment">         * symbol是要求获取的函数的名称。</span></span><br><span class="line"><span class="comment">         * SRP_INIT_CB定义如下：#define SRP_INIT_CB     &quot;sr_plugin_init_cb&quot;</span></span><br><span class="line"><span class="comment">         * SRP_CLEANUP_CB定义下：#define SRP_CLEANUP_CB  &quot;sr_plugin_cleanup_cb&quot;</span></span><br><span class="line"><span class="comment">         * 此两个CB函数，也就是在开发插件中必须实现的两个入口函数，如果不存在，则加载失败。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        *(<span class="type">void</span> **)&amp;(*plugins)[*plugin_count].init_cb = <span class="built_in">dlsym</span>(handle, SRP_INIT_CB);</span><br><span class="line">        <span class="keyword">if</span> (!(*plugins)[*plugin_count].init_cb) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Failed to find function \&quot;%s\&quot; in plugin \&quot;%s\&quot;.&quot;</span>, SRP_INIT_CB, ent-&gt;d_name);</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        *(<span class="type">void</span> **)&amp;(*plugins)[*plugin_count].cleanup_cb = <span class="built_in">dlsym</span>(handle, SRP_CLEANUP_CB);</span><br><span class="line">        <span class="keyword">if</span> (!(*plugins)[*plugin_count].cleanup_cb) &#123;</span><br><span class="line">            <span class="built_in">error_print</span>(<span class="number">0</span>, <span class="string">&quot;Failed to find function \&quot;%s\&quot; in plugin \&quot;%s\&quot;.&quot;</span>, SRP_CLEANUP_CB, ent-&gt;d_name);</span><br><span class="line">            <span class="built_in">dlclose</span>(handle);</span><br><span class="line">            rc = <span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* finally store the plugin */</span></span><br><span class="line">        <span class="comment">/*最后，本次so解析成功，保存本次so的解析结果，执行一下次目录文件的读取*/</span></span><br><span class="line">        (*plugins)[*plugin_count].handle = handle;</span><br><span class="line">        (*plugins)[*plugin_count].private_data = <span class="literal">NULL</span>;</span><br><span class="line">        ++(*plugin_count);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*目录文件读取结束，关闭目录读取流，返回的参考中有插件结构plugins。*/</span></span><br><span class="line">    <span class="built_in">closedir</span>(dir);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-4-init-cb"><a href="#3-4-init-cb" class="headerlink" title="3.4 init_cb"></a>3.4 init_cb</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// srpd_plugin_s 结构中定义了 init 的回调函数</span></span><br><span class="line"><span class="comment">// 如下：</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*<span class="type">srp_init_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> **private_data)</span></span>;</span><br><span class="line"><span class="comment">// 在 load plugin 时，</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRP_INIT_CB     <span class="string">&quot;sr_plugin_init_cb&quot;</span></span></span><br><span class="line">init_cb = <span class="built_in">dlsym</span>(handle, SRP_INIT_CB);</span><br><span class="line"><span class="comment">// 在 sysrepo-plugind 的 main 实现时，需要对 plugin 的初始化，实际就是需要用户对sr_plugin_init_cb() 实现，是完成该 plugin 的资源分配，用户感兴趣的事情做订阅，Ｍodule change RPC/Action, Notify, get——items 等操作，均在此处完成。有如下例子，请参考。</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">sr_plugin_init_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> **private_ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">plugind_ctx</span> *ctx;</span><br><span class="line">    ctx = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span> *ctx);</span><br><span class="line">    <span class="keyword">if</span> (!ctx) </span><br><span class="line">    &#123;</span><br><span class="line">        rc = SR_ERR_NOMEM;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*在下面初始与之有关的操作，例如，本地数据结构的初始化，sysrepo的订阅初始化*/</span></span><br><span class="line">    ...</span><br><span class="line">  </span><br><span class="line">    <span class="built_in">SRP_LOG_DBGMSG</span>(<span class="string">&quot;plugin initialized successfully.&quot;</span>);</span><br><span class="line">    ctx-&gt;session = session;</span><br><span class="line">    *private_ctx = ctx;</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line"> </span><br><span class="line">error:</span><br><span class="line">    <span class="built_in">SRP_LOG_ERR</span>(<span class="string">&quot;plugin initialization failed (%s).&quot;</span>, <span class="built_in">sr_strerror</span>(rc));</span><br><span class="line">    <span class="built_in">sr_unsubscribe</span>(ctx-&gt;subscription);</span><br><span class="line">    <span class="built_in">free</span>(ctx);</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-5-cleanup-cb"><a href="#3-5-cleanup-cb" class="headerlink" title="3.5 cleanup_cb"></a>3.5 cleanup_cb</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// srpd_plugin_s 结构中定义了 cleanup 的回调函数</span></span><br><span class="line"><span class="comment">// 如下：</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*<span class="type">srp_cleanup_cb_t</span>)</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> *private_data)</span></span>;</span><br><span class="line"><span class="comment">// 在 load plugin 时，</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SRP_CLEANUP_CB  <span class="string">&quot;sr_plugin_cleanup_cb&quot;</span></span></span><br><span class="line">cleanup_cb = <span class="built_in">dlsym</span>(handle, SRP_CLEANUP_CB);</span><br><span class="line"><span class="comment">// 所以，对于用户来就，是需要对 sr_plugin_cleanup_cb() 实现，回收 plugin 在初始化时分配的资源。例如下面的 cleanup 实现，可以参考</span></span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sr_plugin_cleanup_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">void</span> *private_ctx)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    (<span class="type">void</span>)session;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">plugind_ctx</span> *ctx = (<span class="keyword">struct</span> plugind_ctx *)private_ctx;</span><br><span class="line">    <span class="built_in">sr_unsubscribe</span>(ctx-&gt;subscription);</span><br><span class="line">    <span class="built_in">free</span>(ctx);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">nb_terminate</span>();</span><br><span class="line">    <span class="built_in">yang_terminate</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">SRP_LOG_DBGMSG</span>(<span class="string">&quot;plugin cleanup finished.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>整个 <code>sysrepo-plugind.c</code> 代码结构简单，注释丰富，没有使用复杂的语法，还是非常容易理解的。</p><h2 id="4-sysrepo-连接与会话"><a href="#4-sysrepo-连接与会话" class="headerlink" title="4. sysrepo 连接与会话"></a>4. sysrepo 连接与会话</h2><h3 id="4-1-何为连接与会话"><a href="#4-1-何为连接与会话" class="headerlink" title="4.1 何为连接与会话"></a>4.1 何为连接与会话</h3><p>开发者要开始使用 <code>sysrepo</code> ，首先必须创建一个连接。一个应用程序或者进程即使可以允许创建多个连接，但是一般情况只会创建一个连接。<code>sysrepo</code> 允许同时创建多个连接。简单的举个例子，通常情况下，<code>sysrepo-plugin</code> 在 <code>init_cb</code> 初始时就会创建一个连接，这是一个由 <code>sysrepo-plugin</code> 与 <code>sysrepo</code> 所创建的连接，只要发生异常不释放，该连接会一直存在整个 <code>sysrepo-plugin</code> 进程的生命周期，此外，例如用户通过 <code>sysrepoctl -l |grep ***</code>  看某个 <code>Yang</code> 模型是否已经加载，<code>sysrepoctl</code> 应用程序也创建一个短连接，该连接在命令执行结束后立即释放，假如是极端修改，不释放该连接，再使用 <code>sysrepocfg</code> 来配置 <code>runing</code> 库，这时有 3 个与 <code>sysrepo</code> 连接。并且 3 个连接不干扰，也不影响 <code>sysrepo</code> 的正常工作。</p><p>而会话，是建立在连接之下，一个连接下可以创建多个会话，每个会话都有一个唯一的标识，每个会话总是可以选择一个可随时更改的数据库，使用些会话的所有 API 调用都将在该数据库下操作。</p><p>连接与会话的关系如下所示，可能不是特别准备，但大概就是这个意思。</p><p><img data-src="/images/images_sr/connect_session.png" alt="连接与会话关系"></p><h3 id="4-2-核心数据结构"><a href="#4-2-核心数据结构" class="headerlink" title="4.2 核心数据结构"></a>4.2 核心数据结构</h3><p><code>connection</code> 的数据结构主要是存储 <code>sysrepo</code> 连接与 <code>Libyang</code> 的上下文，该连接所创建的共享内存结构。数据结构定义如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Sysrepo connection.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_conn_ctx_s</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">ly_ctx</span> *ly_ctx;          <span class="comment">/**&lt; Libyang context, also available to user. */</span></span><br><span class="line">    <span class="type">sr_conn_options_t</span> opts;         <span class="comment">/**&lt; Connection options. */</span></span><br><span class="line">    sr_diff_check_cb diff_check_cb; <span class="comment">/**&lt; Connection user diff check callback. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">pthread_mutex_t</span> ptr_lock;       <span class="comment">/**&lt; Session-shared lock for accessing pointers to sessions. */</span></span><br><span class="line">    <span class="type">sr_session_ctx_t</span> **sessions;    <span class="comment">/**&lt; Array of sessions for this connection. */</span></span><br><span class="line">    <span class="type">uint32_t</span> session_count;         <span class="comment">/**&lt; Session count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> main_create_lock;           <span class="comment">/**&lt; Process-shared file lock for creating main/ext SHM. */</span></span><br><span class="line">    <span class="type">sr_rwlock_t</span> ext_remap_lock;     <span class="comment">/**&lt; Session-shared lock for remapping ext SHM. */</span></span><br><span class="line">    <span class="type">sr_shm_t</span> main_shm;              <span class="comment">/**&lt; Main SHM structure. */</span></span><br><span class="line">    <span class="type">sr_shm_t</span> ext_shm;               <span class="comment">/**&lt; External SHM structure (all stored offsets point here). */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sr_mod_cache_s</span> &#123;</span><br><span class="line">        <span class="type">sr_rwlock_t</span> lock;           <span class="comment">/**&lt; Session-shared lock for accessing the module cache. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *data;      <span class="comment">/**&lt; Data of all cached modules, */</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">struct</span> &#123;</span><br><span class="line">            <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">lys_module</span> *ly_mod;    <span class="comment">/**&lt; Libyang module in the cache. */</span></span><br><span class="line">            <span class="type">uint32_t</span> ver;           <span class="comment">/**&lt; Version of the module data in the cache, 0 is not valid */</span></span><br><span class="line">        &#125; *mods;                    <span class="comment">/**&lt; Array of cached modules. */</span></span><br><span class="line">        <span class="type">uint32_t</span> mod_count;         <span class="comment">/**&lt; Cached modules count. */</span></span><br><span class="line">    &#125; mod_cache;                    <span class="comment">/**&lt; Module running data cache. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>cache</code> 需要特别说明：如果一个会话工作在 <code>running</code> 的数据库下操作，并且该会话的连接使能 <code>cache</code> 功能，则不会每次都从 <code>sysrepo</code> 中加载数据，可以从 <code>cache</code> 中复制数据，这样，可以大幅度提高 <code>sysrepo</code> 的处理性能。</p><p><code>session</code> 的主要数据结构</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Sysrepo session.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_session_ctx_s</span> &#123;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn;            <span class="comment">/**&lt; Connection used for creating this session. */</span></span><br><span class="line">    <span class="type">sr_datastore_t</span> ds;              <span class="comment">/**&lt; Datastore of the session. */</span></span><br><span class="line">    <span class="type">sr_sub_event_t</span> ev;              <span class="comment">/**&lt; Event of a callback session. ::SR_EV_NONE for standard user sessions. */</span></span><br><span class="line">    <span class="type">sr_sid_t</span> sid;                   <span class="comment">/**&lt; Session information. */</span></span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info;      <span class="comment">/**&lt; Session error information. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">pthread_mutex_t</span> ptr_lock;       <span class="comment">/**&lt; Lock for accessing pointers to subscriptions. */</span></span><br><span class="line">    <span class="type">sr_subscription_ctx_t</span> **subscriptions;  <span class="comment">/**&lt; Array of subscriptions of this session. */</span></span><br><span class="line">    <span class="type">uint32_t</span> subscription_count;    <span class="comment">/**&lt; Subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *edit;      <span class="comment">/**&lt; Prepared edit data tree. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *diff;      <span class="comment">/**&lt; Diff data tree, used for module change iterator. */</span></span><br><span class="line">    &#125; dt[SR_DS_COUNT];              <span class="comment">/**&lt; Session-exclusive prepared changes. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf</span> &#123;</span><br><span class="line">        ATOMIC_T thread_running;    <span class="comment">/**&lt; Flag whether the notification buffering thread of this session is running. */</span></span><br><span class="line">        <span class="type">pthread_t</span> tid;              <span class="comment">/**&lt; Thread ID of the thread. */</span></span><br><span class="line">        <span class="type">sr_rwlock_t</span> lock;           <span class="comment">/**&lt; Lock for accessing thread_running and the notification buffer</span></span><br><span class="line"><span class="comment">                                         (READ-lock is not used). */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf_node</span> &#123;</span><br><span class="line">            <span class="type">char</span> *notif_lyb;        <span class="comment">/**&lt; Buffered notification to be stored in LYB format. */</span></span><br><span class="line">            <span class="type">time_t</span> notif_ts;        <span class="comment">/**&lt; Buffered notification timestamp. */</span></span><br><span class="line">            <span class="type">const</span> <span class="keyword">struct</span> <span class="title class_">lys_module</span> *notif_mod; <span class="comment">/**&lt; Buffered notification modules. */</span></span><br><span class="line">            <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf_node</span> *next;    <span class="comment">/**&lt; Next stored notification buffer node. */</span></span><br><span class="line">        &#125; *first;                   <span class="comment">/**&lt; First stored notification buffer node. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">sr_sess_notif_buf_node</span> *last;    <span class="comment">/**&lt; Last stored notification buffer node. */</span></span><br><span class="line">    &#125; notif_buf;                    <span class="comment">/**&lt; Notification buffering attributes. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从 <code>session</code> 结构中主要是用于该次 <code>session</code> 的连接，该次 <code>session</code> 要连接的数据库类型（4种，<code>runing</code> , <code>startup</code> , <code>candidate</code> , <code>operation</code>），以及重中之重的 <code>sr_subscription_ctx_t **subscriptions</code>， <code>sysrepo</code> 的所支持操作的订阅都在该结构中定义，不多说，直接看数据结构定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Sysrepo subscription.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_subscription_ctx_s</span> &#123;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn;            <span class="comment">/**&lt; Connection of the subscription. */</span></span><br><span class="line">    <span class="type">uint32_t</span> evpipe_num;            <span class="comment">/**&lt; Event pipe number of this subscription structure. */</span></span><br><span class="line">    <span class="type">int</span> evpipe;                     <span class="comment">/**&lt; Event pipe opened for reading. */</span></span><br><span class="line">    ATOMIC_T thread_running;        <span class="comment">/**&lt; Flag whether the thread handling this subscription is running. */</span></span><br><span class="line">    <span class="type">pthread_t</span> tid;                  <span class="comment">/**&lt; Thread ID of the handler thread. */</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> subs_lock;      <span class="comment">/**&lt; Session-shared lock for accessing specific subscriptions. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">modsub_change_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *module_name;          <span class="comment">/**&lt; Module of the subscriptions. */</span></span><br><span class="line">        <span class="type">sr_datastore_t</span> ds;          <span class="comment">/**&lt; Datastore of the subscriptions. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">modsub_changesub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            <span class="type">uint32_t</span> priority;      <span class="comment">/**&lt; Subscription priority. */</span></span><br><span class="line">            <span class="type">sr_subscr_options_t</span> opts;   <span class="comment">/**&lt; Subscription options. */</span></span><br><span class="line">            sr_module_change_cb cb; <span class="comment">/**&lt; Subscription callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line"> </span><br><span class="line">            <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">            <span class="type">sr_sub_event_t</span> event;   <span class="comment">/**&lt; Type of the last processed event. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; Configuration change subscriptions for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; Configuration change module XPath subscription count. */</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">sr_shm_t</span> sub_shm;           <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">    &#125; *change_subs;                 <span class="comment">/**&lt; Change subscriptions for each module. */</span></span><br><span class="line">    <span class="type">uint32_t</span> change_sub_count;      <span class="comment">/**&lt; Change module subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">modsub_oper_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *module_name;          <span class="comment">/**&lt; Module of the subscriptions. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">modsub_opersub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            sr_oper_get_items_cb cb;    <span class="comment">/**&lt; Subscription callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line"> </span><br><span class="line">            <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">            <span class="type">sr_shm_t</span> sub_shm;       <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; Operational subscriptions for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; Operational module XPath subscription count. */</span></span><br><span class="line">    &#125; *oper_subs;                   <span class="comment">/**&lt; Operational subscriptions for each module. */</span></span><br><span class="line">    <span class="type">uint32_t</span> oper_sub_count;        <span class="comment">/**&lt; Operational module subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">modsub_notif_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *module_name;          <span class="comment">/**&lt; Module of the subscriptions. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">modsub_notifsub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            <span class="type">time_t</span> start_time;      <span class="comment">/**&lt; Subscription start time. */</span></span><br><span class="line">            <span class="type">int</span> replayed;           <span class="comment">/**&lt; Flag whether the subscription replay is finished. */</span></span><br><span class="line">            <span class="type">time_t</span> stop_time;       <span class="comment">/**&lt; Subscription stop time. */</span></span><br><span class="line">            sr_event_notif_cb cb;   <span class="comment">/**&lt; Subscription value callback. */</span></span><br><span class="line">            sr_event_notif_tree_cb tree_cb; <span class="comment">/**&lt; Subscription tree callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; Notification subscriptions for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; Notification module XPath subscription count. */</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">        <span class="type">sr_shm_t</span> sub_shm;           <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">    &#125; *notif_subs;                  <span class="comment">/**&lt; Notification subscriptions for each module. */</span></span><br><span class="line">    <span class="type">uint32_t</span> notif_sub_count;       <span class="comment">/**&lt; Notification module subscription count. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">opsub_rpc_s</span> &#123;</span><br><span class="line">        <span class="type">char</span> *op_path;              <span class="comment">/**&lt; Subscription RPC/action path. */</span></span><br><span class="line">        <span class="keyword">struct</span> <span class="title class_">opsub_rpcsub_s</span> &#123;</span><br><span class="line">            <span class="type">char</span> *xpath;            <span class="comment">/**&lt; Subscription XPath. */</span></span><br><span class="line">            <span class="type">uint32_t</span> priority;      <span class="comment">/**&lt; Subscription priority. */</span></span><br><span class="line">            sr_rpc_cb cb;           <span class="comment">/**&lt; Subscription value callback. */</span></span><br><span class="line">            sr_rpc_tree_cb tree_cb; <span class="comment">/**&lt; Subscription tree callback. */</span></span><br><span class="line">            <span class="type">void</span> *private_data;     <span class="comment">/**&lt; Subscription callback private data. */</span></span><br><span class="line">            <span class="type">sr_session_ctx_t</span> *sess; <span class="comment">/**&lt; Subscription session. */</span></span><br><span class="line"> </span><br><span class="line">            <span class="type">uint32_t</span> request_id;    <span class="comment">/**&lt; Request ID of the last processed request. */</span></span><br><span class="line">            <span class="type">sr_sub_event_t</span> event;   <span class="comment">/**&lt; Type of the last processed event. */</span></span><br><span class="line">        &#125; *subs;                    <span class="comment">/**&lt; RPC/action subscription for each XPath. */</span></span><br><span class="line">        <span class="type">uint32_t</span> sub_count;         <span class="comment">/**&lt; RPC/action XPath subscription count. */</span></span><br><span class="line"> </span><br><span class="line">        <span class="type">sr_shm_t</span> sub_shm;           <span class="comment">/**&lt; Subscription SHM. */</span></span><br><span class="line">    &#125; *rpc_subs;                    <span class="comment">/**&lt; RPC/action subscriptions for each operation. */</span></span><br><span class="line">    <span class="type">uint32_t</span> rpc_sub_count;         <span class="comment">/**&lt; RPC/action operation subscription count. */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-connection-函数"><a href="#4-3-connection-函数" class="headerlink" title="4.3 connection 函数"></a>4.3 connection 函数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*功能：连接sysrepo数据库</span></span><br><span class="line"><span class="comment"> *输入：默认的连接处理选项</span></span><br><span class="line"><span class="comment"> *输出：该连接的数据，用于该连接的后续的操作，最后由sr_disconnect释放</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">API <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">sr_connect</span><span class="params">(<span class="type">const</span> <span class="type">sr_conn_options_t</span> opts, <span class="type">sr_conn_ctx_t</span> **conn_p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *sr_mods = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> created = <span class="number">0</span>, changed;</span><br><span class="line">    <span class="type">sr_main_shm_t</span> *main_shm;</span><br><span class="line">    <span class="type">uint32_t</span> conn_count;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">SR_CHECK_ARG_APIRET</span>(!conn_p, <span class="literal">NULL</span>, err_info);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* check that all required directories exist */</span></span><br><span class="line">    <span class="comment">/* 路径包括startup库的存储路径，notify的路径，sysrepo加载的Yang的路径。</span></span><br><span class="line"><span class="comment">     * 并且获取以上路径的访问权限。与路径有关的，都在CMakeLists.txt中的定义</span></span><br><span class="line"><span class="comment">     * 使用者可以修改路径，也可以使用定义的默认路径。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_check_dirs</span>())) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* create basic connection structure */</span></span><br><span class="line">    <span class="comment">/*创建一个基础连接结构，包括，分配连接的存储空间，初始化YANG的上下文，</span></span><br><span class="line"><span class="comment">     * 互斥信号量初始化，共享内存文件锁权限打开，读写锁的初始化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_conn_new</span>(opts, &amp;conn))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/* CREATE LOCK */</span></span><br><span class="line">    <span class="comment">/*加锁*/</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_createlock</span>(conn-&gt;main_create_lock))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* open the main SHM */</span></span><br><span class="line">    <span class="comment">/*初始化主SHM，打开主SHM,为主SHM分配合适的空间,并对主SHM做相应的初始化*/</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_main_open</span>(&amp;conn-&gt;main_shm, &amp;created))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* open the ext SHM */</span></span><br><span class="line">     <span class="comment">/*初始化扩展SHM，打开扩展SHM,为扩展SHM分配合适的空间,并对扩展SHM做相应的初始化*/</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_ext_open</span>(&amp;conn-&gt;ext_shm, created))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ／*Sysrepo SHM使用主+扩展SHM机制,整体机制在后面细谈，此处主要是将连接的创建。先略过*／</span><br><span class="line">    <span class="comment">/*该行代码之前的操作,都是基本操作,权限获取,内存大小分配初始化.该行代码之后,需要将已加载的 </span></span><br><span class="line"><span class="comment">      YANG数据模型做解析，并更新存储到相应的结构中*/</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* update connection context based on stored lydmods data */</span></span><br><span class="line">    <span class="comment">/* 加载已经存储的YANG模型,并响应任意的调试变化,并要更新Connection的上下文</span></span><br><span class="line"><span class="comment">     * 根据前面所创建所保存的libyang的上下文ly_ctx,如果检测到lyd_node不存在,则为Sysrepo创建一 </span></span><br><span class="line"><span class="comment">     * 个新的YANG模型数据结构struct lyd_node,如果存在,则解析sysrepo Yang 模型数据.并对模块作上 </span></span><br><span class="line"><span class="comment">     * 下文件的更新.但是对于第一个连接,lyd_node一开始都是不存在的,所以,在完成创建与加载lyd_node </span></span><br><span class="line"><span class="comment">     *  后,需要将全部的YANG模型解析到lys_module-&gt;lyd_node中,一个YANG模型相当于lys_module- </span></span><br><span class="line"><span class="comment">     *  &gt;lyd_node下的一个节点,一个节点一个节点加载,挂载到lys_module的链表中.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_conn_lydmods_ctx_update</span>(conn, created || !(opts &amp; </span><br><span class="line">           SR_CONN_NO_SCHED_CHANGES), &amp;sr_mods, &amp;changed))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*这段代码不解读,看注释就能明白*/</span></span><br><span class="line">    <span class="keyword">if</span> (changed || created) &#123;</span><br><span class="line">        <span class="comment">/* clear all main SHM modules (if main SHM was just created, there aren&#x27;t any anyway) */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;main_shm, <span class="built_in">sizeof</span>(<span class="type">sr_main_shm_t</span>)))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">        main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">        main_shm-&gt;mod_count = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* clear ext SHM (there can be no connections and no modules) */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;ext_shm, <span class="built_in">sizeof</span>(<span class="type">size_t</span>)))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* set wasted mem to 0 */</span></span><br><span class="line">        *((<span class="type">size_t</span> *)conn-&gt;ext_shm.addr) = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* add all the modules in lydmods data into main SHM */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_add</span>(conn, sr_mods-&gt;child))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/* copy full datastore from &lt;startup&gt; to &lt;running&gt; */</span></span><br><span class="line">        <span class="comment">/*初始化时,完成将startup库的文件copy到running库中,常见的配置恢复是在此处完成*/</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_files_startup2running</span>(conn, created))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* check data file existence and owner/permissions of all installed modules */</span></span><br><span class="line">        <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_check_data_files</span>(conn))) &#123;</span><br><span class="line">            <span class="keyword">goto</span> cleanup_unlock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remember connection count */</span></span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">    conn_count = main_shm-&gt;conn_state.conn_count;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* CREATE UNLOCK */</span></span><br><span class="line">    <span class="built_in">sr_shmmain_createunlock</span>(conn-&gt;main_create_lock);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* SHM LOCK (mainly to recover connections) */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (conn_count &amp;&amp; !(opts &amp; SR_CONN_NO_SCHED_CHANGES) &amp;&amp; !main_shm-&gt;conn_state.conn_count) &#123;</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">        <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* all the connections were stale so we actually can apply scheduled changes, recreate the whole connection */</span></span><br><span class="line">        <span class="built_in">assert</span>(!err_info);</span><br><span class="line"> </span><br><span class="line">        <span class="built_in">lyd_free_withsiblings</span>(sr_mods);</span><br><span class="line">        <span class="built_in">sr_conn_free</span>(conn);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sr_connect</span>(opts, conn_p);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add connection into state */</span></span><br><span class="line">    err_info = <span class="built_in">sr_shmmain_conn_state_add</span>(conn);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">    <span class="comment">/*打开锁*/</span></span><br><span class="line">    <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">goto</span> cleanup;</span><br><span class="line"> </span><br><span class="line">cleanup_unlock:</span><br><span class="line">    <span class="comment">/* CREATE UNLOCK */</span></span><br><span class="line">    <span class="built_in">sr_shmmain_createunlock</span>(conn-&gt;main_create_lock);</span><br><span class="line"> </span><br><span class="line">cleanup:</span><br><span class="line">    <span class="built_in">lyd_free_withsiblings</span>(sr_mods);</span><br><span class="line">    <span class="keyword">if</span> (err_info) &#123;</span><br><span class="line">        <span class="built_in">sr_conn_free</span>(conn);</span><br><span class="line">        <span class="keyword">if</span> (created) &#123;</span><br><span class="line">            <span class="comment">/* remove any created SHM so it is not considered properly created */</span></span><br><span class="line">            <span class="built_in">shm_unlink</span>(SR_MAIN_SHM);</span><br><span class="line">            <span class="built_in">shm_unlink</span>(SR_EXT_SHM);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        *conn_p = conn;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 功能:清除与释放由sr_connect分配的的连接上下文,</span></span><br><span class="line"><span class="comment"> * 在该连接下的所有session与订阅将自动停止并清理回收</span></span><br><span class="line"><span class="comment"> * 输入: 调用sr_connect中创建的连接上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**其它不做解释,看注释,很清楚/</span></span><br><span class="line"><span class="comment">API int</span></span><br><span class="line"><span class="comment">sr_disconnect(sr_conn_ctx_t *conn)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">    sr_error_info_t *err_info = NULL, *lock_err = NULL, *tmp_err;</span></span><br><span class="line"><span class="comment">    uint32_t i;</span></span><br><span class="line"><span class="comment">    int wr_lock = 0;</span></span><br><span class="line"><span class="comment">    sr_main_shm_t *main_shm;</span></span><br><span class="line"><span class="comment">    if (!conn) &#123;</span></span><br><span class="line"><span class="comment">        return sr_api_ret(NULL, NULL);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    /* stop all subscriptions */</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; conn-&gt;session_count; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (conn-&gt;sessions[i]-&gt;subscription_count &amp;&amp; conn-&gt;sessions[i]-&gt;subscriptions[<span class="number">0</span>]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!wr_lock) &#123;</span><br><span class="line">                <span class="comment">/* SHM LOCK */</span></span><br><span class="line">                lock_err = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">                <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, lock_err);</span><br><span class="line"> </span><br><span class="line">                wr_lock = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            tmp_err = _sr_unsubscribe(conn-&gt;sessions[i]-&gt;subscriptions[<span class="number">0</span>]);</span><br><span class="line">            <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* we need just remap lock or even no lock (no other threads can use the mapping)</span></span><br><span class="line"><span class="comment">     * would be fine, but be robust */</span></span><br><span class="line">    <span class="keyword">if</span> (!wr_lock) &#123;</span><br><span class="line">        <span class="comment">/* SHM LOCK */</span></span><br><span class="line">        lock_err = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">        <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, lock_err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* stop all the sessions */</span></span><br><span class="line">    <span class="keyword">while</span> (conn-&gt;session_count) &#123;</span><br><span class="line">        tmp_err = _sr_session_stop(conn-&gt;sessions[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* free any stored operational data */</span></span><br><span class="line">    tmp_err = <span class="built_in">sr_shmmod_oper_stored_del_conn</span>(conn, conn, <span class="built_in">getpid</span>());</span><br><span class="line">    <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line"> </span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* CONN STATE LOCK */</span></span><br><span class="line">    tmp_err = <span class="built_in">sr_mlock</span>(&amp;main_shm-&gt;conn_state.lock, SR_CONN_STATE_LOCK_TIMEOUT, __func__);</span><br><span class="line">    <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remove from state */</span></span><br><span class="line">    <span class="built_in">sr_shmmain_conn_state_del</span>(main_shm, conn-&gt;ext_shm.addr, conn, <span class="built_in">getpid</span>());</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* CONN STATE UNLOCK */</span></span><br><span class="line">    <span class="built_in">sr_munlock</span>(&amp;main_shm-&gt;conn_state.lock);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!lock_err) &#123;</span><br><span class="line">        <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">        <span class="keyword">if</span> (wr_lock) &#123;</span><br><span class="line">            <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_NONE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* free attributes */</span></span><br><span class="line">    <span class="built_in">sr_conn_free</span>(conn);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-4-session"><a href="#4-4-session" class="headerlink" title="4.4 session"></a>4.4 session</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*功能:开始一个新的session</span></span><br><span class="line"><span class="comment"> *输入:conn: 由sr_connect所创建的连接</span></span><br><span class="line"><span class="comment"> *     datastore: 连接的数据库类型</span></span><br><span class="line"><span class="comment"> *输出: 用于后续的API调用的session上下文件  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">API <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">sr_session_start</span><span class="params">(<span class="type">sr_conn_ctx_t</span> *conn, <span class="type">const</span> <span class="type">sr_datastore_t</span> datastore, <span class="type">sr_session_ctx_t</span> **session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">sr_main_shm_t</span> *main_shm;</span><br><span class="line">    <span class="type">uid_t</span> uid;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">SR_CHECK_ARG_APIRET</span>(!conn || !session, <span class="literal">NULL</span>, err_info);</span><br><span class="line">    <span class="comment">/*分配1个sizeof (**session)大小的内存空间,并初始化为0*/</span></span><br><span class="line">    *session = <span class="built_in">calloc</span>(<span class="number">1</span>, <span class="keyword">sizeof</span> **session);</span><br><span class="line">    <span class="keyword">if</span> (!*session) &#123;</span><br><span class="line">        <span class="built_in">SR_ERRINFO_MEM</span>(&amp;err_info);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* use new SR session ID and increment it (no lock needed, we are just reading and main SHM is never remapped) */</span></span><br><span class="line">    <span class="comment">/**使用了C++的atomic机制,在C中引入,需要增加编译选项,如何增加,参考CMakeFile.txt.*/</span></span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">    (*session)-&gt;sid.sr = <span class="built_in">ATOMIC_INC_RELAXED</span>(main_shm-&gt;new_sr_sid);</span><br><span class="line">    <span class="keyword">if</span> ((*session)-&gt;sid.sr == (<span class="type">uint32_t</span>)(ATOMIC_T_MAX - <span class="number">1</span>)) &#123;</span><br><span class="line">        <span class="comment">/* the value in the main SHM is actually ATOMIC_T_MAX and calling another INC would cause an overflow */</span></span><br><span class="line">        <span class="built_in">ATOMIC_STORE_RELAXED</span>(main_shm-&gt;new_sr_sid, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remember current real process owner */</span></span><br><span class="line">    uid = <span class="built_in">getuid</span>();</span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_get_pwd</span>(&amp;uid, &amp;(*session)-&gt;sid.user))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add the session into conn */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_ptr_add</span>(&amp;conn-&gt;ptr_lock, (<span class="type">void</span> ***)&amp;conn-&gt;sessions, &amp;conn-&gt;session_count, *session))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    (*session)-&gt;conn = conn;</span><br><span class="line">    (*session)-&gt;ds = datastore;</span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_mutex_init</span>(&amp;(*session)-&gt;ptr_lock, <span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_rwlock_init</span>(&amp;(*session)-&gt;notif_buf.lock, <span class="number">0</span>))) &#123;</span><br><span class="line">        <span class="keyword">goto</span> error;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="built_in">SR_LOG_INF</span>(<span class="string">&quot;Session %u (user \&quot;%s\&quot;) created.&quot;</span>, (*session)-&gt;sid.sr, (*session)-&gt;sid.user);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"> </span><br><span class="line">error:</span><br><span class="line">    <span class="built_in">free</span>((*session)-&gt;sid.user);</span><br><span class="line">    <span class="built_in">free</span>(*session);</span><br><span class="line">    *session = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 功能:停止当前session并且释放与该session所维系的全部资源</span></span><br><span class="line"><span class="comment"> * 输入: sr_session_start中所创建的session上下文</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">####函数清晰,简单,注释丰富,一看就懂,就不多废话.</span><br><span class="line"><span class="function">API <span class="type">int</span></span></span><br><span class="line"><span class="function"><span class="title">sr_session_stop</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>, *lock_err = <span class="literal">NULL</span>, *tmp_err;</span><br><span class="line">    <span class="type">sr_conn_ctx_t</span> *conn;</span><br><span class="line">    <span class="type">int</span> wr_lock = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (!session) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    conn = session-&gt;conn;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* stop all subscriptions of this session */</span></span><br><span class="line">    <span class="keyword">while</span> (session-&gt;subscription_count) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!wr_lock) &#123;</span><br><span class="line">            <span class="comment">/* SHM LOCK */</span></span><br><span class="line">            lock_err = <span class="built_in">sr_shmmain_lock_remap</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">            <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, lock_err);</span><br><span class="line"> </span><br><span class="line">            wr_lock = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        tmp_err = <span class="built_in">sr_subs_session_del</span>(session, session-&gt;subscriptions[<span class="number">0</span>]);</span><br><span class="line">        <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* SHM UNLOCK */</span></span><br><span class="line">    <span class="keyword">if</span> (wr_lock &amp;&amp; !lock_err) &#123;</span><br><span class="line">        <span class="built_in">sr_shmmain_unlock</span>(conn, SR_LOCK_WRITE, <span class="number">1</span>, <span class="number">0</span>, __func__);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* no lock needed, we are just reading main SHM */</span></span><br><span class="line">    tmp_err = _sr_session_stop(session);</span><br><span class="line">    <span class="built_in">sr_errinfo_merge</span>(&amp;err_info, tmp_err);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sr_api_ret</span>(<span class="literal">NULL</span>, err_info);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>连接与会话核心处就是这 4 个 API 函数, 其它与连接与会话有关的 API 都是对相关的补充,想要进一步了解的.请阅读源码.</p><p>接下来会分析 <code>sysrepo</code> 的共享内存机制. <code>SHM</code> 机制是新 <code>sysrepo</code> 的核心，需要好好说道说道.</p><h2 id="5-sysrepo-共享内存机制"><a href="#5-sysrepo-共享内存机制" class="headerlink" title="5. sysrepo 共享内存机制"></a>5. sysrepo 共享内存机制</h2><h3 id="5-1-共享内存机制"><a href="#5-1-共享内存机制" class="headerlink" title="5.1 共享内存机制"></a>5.1 共享内存机制</h3><p><code>sysrepo0.X.X</code> 版本使用的进程间通信的机制，在实际的使用过程中，出现了诸如数据不同步、数据处理<code>TimeOut</code>、完成一次 <code>Get</code> 请求时，但实际处理的请求会较多，导致性能与规格上不去的各类问题。<code>sysrepo-devel</code> 分支开始引入共享机制后，合入到 <code>sysrepo</code> 的 <code>Master</code> 分支，也就是现在的 <code>sysrepo1.X.X</code> 版本。</p><p>简单说一说什么是共享内存，共享内存就是允许两个或多个进程共享一定的存储区，说白了，就是两个进程访问同一块内存区域，当一个进程改变了这块地址中的内容的时候，其它进程都会察觉到这个更改，所以数据不需要在客户机和服务器端之间复制，数据直接写到内存，不用若干次数据拷贝，是一种最快的 <code>IPC</code> 。原理图如下所示，需要注意的是，共享内存本向并没有任何的同步与互斥机制，所以必须使用信号量来实现对共享内存的存取的同步。其它有关的共享内存的概念使用，网上有很多，可自行查阅理解。本处这分析与 <code>sysrepo</code> 相关的共享内存机制的使用。</p><p><img data-src="/images/images_sr/shm.png" alt="共享内存原理"></p><h3 id="5-2-数据结构"><a href="#5-2-数据结构" class="headerlink" title="5.2 数据结构"></a>5.2 数据结构</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Generic shared memory information structure.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//sysrepo 共享内存数据结构</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sr_shm_s</span> &#123;</span><br><span class="line">    <span class="type">int</span> fd;                         <span class="comment">/**&lt; Shared memory file desriptor. */</span></span><br><span class="line">    <span class="type">size_t</span> size;                    <span class="comment">/**&lt; Shared memory mapping current size. */</span></span><br><span class="line">    <span class="type">char</span> *addr;                     <span class="comment">/**&lt; Shared memory mapping address. */</span></span><br><span class="line">&#125; <span class="type">sr_shm_t</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// sysrepo 定义了两个 SHM 分段，一个是 main SHM 和 ext SHM</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SR_MAIN_SHM <span class="string">&quot;/sr_main&quot;</span>              <span class="comment">/**&lt; Main SHM name. */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SR_EXT_SHM <span class="string">&quot;/sr_ext&quot;</span>                <span class="comment">/**&lt; External SHM name. */</span></span></span><br><span class="line"><span class="comment">// 除了定义定义的 main 和 ext 分段之外，还有用于 subscriptions 和 running 数据文件的单个的 SHM 分段。</span></span><br><span class="line"><span class="comment">// main SHM 是以 sr_main_shm_t 结构开始，结构定义如下：</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sr_main_shm_s</span> &#123;</span><br><span class="line">    <span class="type">sr_rwlock_t</span> lock;  <span class="comment">/**&lt; Process-shared lock for accessing main and ext SHM. It is </span></span><br><span class="line"><span class="comment">                        * required only when  accessing attributes that can be changed </span></span><br><span class="line"><span class="comment">                        * (subscriptions, replay support) and do not have their own lock </span></span><br><span class="line"><span class="comment">                        * (conn state), otherwise not needed. */</span></span><br><span class="line">    <span class="type">pthread_mutex_t</span> lydmods_lock; <span class="comment">/**&lt; Process-shared lock for accessing sysrepo module </span></span><br><span class="line"><span class="comment">                                    *data. */</span></span><br><span class="line">    <span class="type">uint32_t</span> mod_count;  <span class="comment">/**&lt; Number of installed modules stored after this structure. */</span></span><br><span class="line">    <span class="type">off_t</span> rpc_subs;             <span class="comment">/**&lt; Array of RPC/action subscriptions. */</span></span><br><span class="line">    <span class="type">uint16_t</span> rpc_sub_count;     <span class="comment">/**&lt; Number of RPC/action subscriptions. */</span></span><br><span class="line">    ATOMIC_T new_sr_sid;        <span class="comment">/**&lt; SID for a new session. */</span></span><br><span class="line">    ATOMIC_T new_evpipe_num;    <span class="comment">/**&lt; Event pipe number for a new subscription. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">pthread_mutex_t</span> lock; <span class="comment">/**&lt; Process-shared lock for accessing connection state. */</span></span><br><span class="line">        <span class="type">off_t</span> conns;            <span class="comment">/**&lt; Array of existing connections. */</span></span><br><span class="line">        <span class="type">uint32_t</span> conn_count;    <span class="comment">/**&lt; Number of existing connections. */</span></span><br><span class="line">    &#125; conn_state;               <span class="comment">/**&lt; Information about connection state. */</span></span><br><span class="line">&#125; <span class="type">sr_main_shm_t</span>;</span><br><span class="line"><span class="comment">// 后面是是所有安装的模块，每个安装的模块都会带 sr_mod_t 结构直接到 main SHM 的定义结构。</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">sr_mod_s</span> <span class="type">sr_mod_t</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief Main SHM module.</span></span><br><span class="line"><span class="comment"> * (typedef sr_mod_t)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">sr_mod_s</span> &#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">sr_mod_lock_s</span> &#123;</span><br><span class="line">        <span class="type">sr_rwlock_t</span> lock; <span class="comment">/**&lt; Process-shared lock for accessing module instance data. */</span></span><br><span class="line">        <span class="type">uint8_t</span> write_locked;   <span class="comment">/**&lt; Whether module data are WRITE locked (lock itself may not be WRITE locked to allow data reading). */</span></span><br><span class="line">        <span class="type">uint8_t</span> ds_locked;      <span class="comment">/**&lt; Whether module data are datastore locked (NETCONF locks). */</span></span><br><span class="line">        <span class="type">sr_sid_t</span> sid;           <span class="comment">/**&lt; Session ID of the locking session (user is always NULL). */</span></span><br><span class="line">        <span class="type">time_t</span> ds_ts;           <span class="comment">/**&lt; Timestamp of the datastore lock. */</span></span><br><span class="line">    &#125; data_lock_info[SR_DS_COUNT]; <span class="comment">/**&lt; Module data lock information for each datastore. */</span></span><br><span class="line">    <span class="type">sr_rwlock_t</span> replay_lock;    <span class="comment">/**&lt; Process-shared lock for accessing stored notifications for replay. */</span></span><br><span class="line">    <span class="type">uint32_t</span> ver;               <span class="comment">/**&lt; Module data version (non-zero). */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> name;                 <span class="comment">/**&lt; Module name. */</span></span><br><span class="line">    <span class="type">char</span> rev[<span class="number">11</span>];               <span class="comment">/**&lt; Module revision. */</span></span><br><span class="line">    <span class="type">uint8_t</span> flags;              <span class="comment">/**&lt; Module flags. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> features;             <span class="comment">/**&lt; Array of enabled features (off_t *). */</span></span><br><span class="line">    <span class="type">uint16_t</span> feat_count;        <span class="comment">/**&lt; Number of enabled features. */</span></span><br><span class="line">    <span class="type">off_t</span> data_deps;            <span class="comment">/**&lt; Array of data dependencies. */</span></span><br><span class="line">    <span class="type">uint16_t</span> data_dep_count;    <span class="comment">/**&lt; Number of data dependencies. */</span></span><br><span class="line">    <span class="type">off_t</span> inv_data_deps;        <span class="comment">/**&lt; Array of inverse data dependencies (off_t *). */</span></span><br><span class="line">    <span class="type">uint16_t</span> inv_data_dep_count;    <span class="comment">/**&lt; Number of inverse data dependencies. */</span></span><br><span class="line">    <span class="type">off_t</span> op_deps;              <span class="comment">/**&lt; Array of operation dependencies. */</span></span><br><span class="line">    <span class="type">uint16_t</span> op_dep_count;      <span class="comment">/**&lt; Number of operation dependencies. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">struct</span> &#123;</span><br><span class="line">        <span class="type">off_t</span> subs;             <span class="comment">/**&lt; Array of change subscriptions. */</span></span><br><span class="line">        <span class="type">uint16_t</span> sub_count;     <span class="comment">/**&lt; Number of change subscriptions. */</span></span><br><span class="line">    &#125; change_sub[SR_DS_COUNT];  <span class="comment">/**&lt; Change subscriptions for each datastore. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> oper_subs;            <span class="comment">/**&lt; Array of operational subscriptions. */</span></span><br><span class="line">    <span class="type">uint16_t</span> oper_sub_count;    <span class="comment">/**&lt; Number of operational subscriptions. */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">off_t</span> notif_subs;           <span class="comment">/**&lt; Array of notification subscriptions. */</span></span><br><span class="line">    <span class="type">uint16_t</span> notif_sub_count;   <span class="comment">/**&lt; Number of notification subscriptions. */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 全部的 off_t 标识这些结构是指向 ext SHM 的偏移指针。</span></span><br><span class="line"><span class="comment">// 所以，通过 install 将模块安装后，这结构就是初始化与注册上。</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// Ext shm 是以一个 size_t 单位开始，这值表示在该 SHM 分段使用的字节大小。它是由 main SHM 的 `off_t` 指所指向的数组和字符串表示。首先，在 sysrepo 有一个 sr_conn_state_t 结构，它是表示所有全部运行的连接状态，其次是 sr_mod_t 结构，它是包括安装的各个模块名，依赖，各类订阅，最后是 sr_rpc_t。</span></span><br></pre></td></tr></table></figure><h3 id="5-3-源码分析"><a href="#5-3-源码分析" class="headerlink" title="5.3 源码分析"></a>5.3 源码分析</h3><p><img data-src="/images/images_sr/shmmain_add.png"></p><p>此添加 <code>shm main</code> 的入口代码，将全部模块以 <code>lydmod</code> 数据形式添加到 <code>main SHM</code> 中。参考前一章的 <code>sr_connect</code> 函数，这就是将在与 <code>sysrepo</code> 连接时，会将全部模块的加载到共享内存中。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">sr_error_info_t</span> *</span></span><br><span class="line"><span class="function"><span class="title">sr_shmmain_add</span><span class="params">(<span class="type">sr_conn_ctx_t</span> *conn, <span class="keyword">struct</span> lyd_node *sr_mod)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">sr_error_info_t</span> *err_info = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">lyd_node</span> *next;</span><br><span class="line">    <span class="type">sr_mod_t</span> *shm_mod;</span><br><span class="line">    <span class="type">sr_main_shm_t</span> *main_shm;</span><br><span class="line">    <span class="type">off_t</span> main_end, ext_end;</span><br><span class="line">    <span class="type">size_t</span> *wasted_ext, new_ext_size, new_mod_count;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* count how many modules are we going to add */</span></span><br><span class="line">    <span class="comment">//计算有多少个新的模块需要添加，如果模块在其它的连接已经添加过，该不会计算的/</span></span><br><span class="line">    new_mod_count = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">LY_TREE_FOR</span>(sr_mod, next) &#123;</span><br><span class="line">        ++new_mod_count;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remember current SHM and ext SHM end (size) */</span></span><br><span class="line">    <span class="comment">//记录main SHM与ext SHM的大小 </span></span><br><span class="line">    main_end = conn-&gt;main_shm.size;</span><br><span class="line">    ext_end = conn-&gt;ext_shm.size;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* enlarge main SHM for the new modules */</span></span><br><span class="line">    <span class="comment">//为新的模块扩大man SHM的空间，这部分很棒，算的是一种自扩大袜。</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;main_shm, conn-&gt;main_shm.size + new_mod_count * <span class="keyword">sizeof</span> *shm_mod))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* enlarge ext SHM */</span></span><br><span class="line">    <span class="comment">//为新的模块扩大ext SHM 空间</span></span><br><span class="line">    wasted_ext = (<span class="type">size_t</span> *)conn-&gt;ext_shm.addr; <span class="comment">//已使用的空间</span></span><br><span class="line">    new_ext_size = <span class="built_in">sizeof</span>(<span class="type">size_t</span>) + <span class="built_in">sr_shmmain_ext_get_size_main_shm</span>(&amp;conn-&gt;main_shm, conn-&gt;ext_shm.addr) +</span><br><span class="line">            <span class="built_in">sr_shmmain_ext_get_lydmods_size</span>(sr_mod-&gt;parent);  <span class="comment">//需要扩大的空间大小</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;ext_shm, new_ext_size + *wasted_ext))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//sr_shm_remap，将空间映射到连接的SHM分段上。</span></span><br><span class="line">    wasted_ext = (<span class="type">size_t</span> *)conn-&gt;ext_shm.addr;  <span class="comment">//新扩大的空间大小。</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add all newly implemented modules into SHM */</span></span><br><span class="line">    <span class="comment">//添加所有的新的需要实现的模块到SHM中的地址中</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_add_modules</span>(conn-&gt;ext_shm.addr, sr_mod, (<span class="type">sr_mod_t</span> *)(conn-&gt;main_shm.addr + main_end),</span><br><span class="line">                &amp;ext_end))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add the new modules number */</span></span><br><span class="line">    main_shm = (<span class="type">sr_main_shm_t</span> *)conn-&gt;main_shm.addr;</span><br><span class="line">    main_shm-&gt;mod_count += new_mod_count;</span><br><span class="line">    <span class="built_in">assert</span>(main_shm-&gt;mod_count == (conn-&gt;main_shm.size - <span class="keyword">sizeof</span> *main_shm) / <span class="keyword">sizeof</span> *shm_mod);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Dependencies of old modules are rebuild because of possible</span></span><br><span class="line"><span class="comment">     * 1) new inverse dependencies when new modules depend on the old ones;</span></span><br><span class="line"><span class="comment">     * 2) new dependencies in the old modules in case they were added by foreign augments in the new modules.</span></span><br><span class="line"><span class="comment">     * Checking these cases would probably be more costly than just always rebuilding all dependencies.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* remove all dependencies of all modules from SHM */</span></span><br><span class="line">    <span class="comment">//处理模块间的依赖，要重构各模块间的依赖，先将之前的依赖关系解除，</span></span><br><span class="line">    <span class="comment">//然后，为新的模块计算并扩大ext SHM 空间计算</span></span><br><span class="line">    <span class="comment">//最后，在SHM中为所有的模块添加建立新的依赖。</span></span><br><span class="line">    <span class="comment">//经过这个处理，各模块间的依赖建立成功。</span></span><br><span class="line">    <span class="built_in">sr_shmmain_del_modules_deps</span>(&amp;conn-&gt;main_shm, conn-&gt;ext_shm.addr, <span class="built_in">SR_FIRST_SHM_MOD</span>(conn-&gt;main_shm.addr));</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* enlarge ext SHM to account for the newly wasted memory */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shm_remap</span>(&amp;conn-&gt;ext_shm, new_ext_size + *wasted_ext))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line">    wasted_ext = (<span class="type">size_t</span> *)conn-&gt;ext_shm.addr;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* add all dependencies for all modules in SHM */</span></span><br><span class="line">    <span class="keyword">if</span> ((err_info = <span class="built_in">sr_shmmain_add_modules_deps</span>(&amp;conn-&gt;main_shm, conn-&gt;ext_shm.addr, sr_mod-&gt;parent-&gt;child,</span><br><span class="line">                <span class="built_in">SR_FIRST_SHM_MOD</span>(conn-&gt;main_shm.addr), &amp;ext_end))) &#123;</span><br><span class="line">        <span class="keyword">return</span> err_info;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* check expected size */</span></span><br><span class="line">    <span class="built_in">SR_CHECK_INT_RET</span>((<span class="type">unsigned</span>)ext_end != new_ext_size + *wasted_ext, err_info);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 还有两个核心函数:</span></span><br><span class="line"><span class="built_in">sr_shmmain_add_modules</span>(<span class="type">char</span> *ext_shm_addr, <span class="keyword">struct</span> lyd_node *first_sr_mod, <span class="type">sr_mod_t</span> *first_shm_mod, <span class="type">off_t</span> *ext_end)</span><br><span class="line"><span class="comment">//实现将全部的模块以及模块的全部特性都保存于main SHM中。这个函数不会添加data/op/inverse三类依赖</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">sr_shmmain_add_modules_deps</span>(<span class="type">sr_shm_t</span> *shm_main, <span class="type">char</span> *ext_shm_addr, <span class="keyword">struct</span> lyd_node </span><br><span class="line">          *first_sr_mod, <span class="type">sr_mod_t</span> *first_shm_mod,  <span class="type">off_t</span> *ext_end)</span><br><span class="line"><span class="comment">//该函数就是添加各模块间的data/op/inverse 依赖，并保存到manin SHM中。</span></span><br></pre></td></tr></table></figure><p>共享内存间在初始操作，包括信号的创建与初始化，也是在 <code>sr_connet</code> 函数中处理。&#96;&#96;sr_connet<code>是</code>plugind<code>与</code>sysrepo<code> 的连接入口，</code>SHM<code>是在入口中初始的一种机制，用来保证</code>sysrepo<code>与</code>plugind&#96; 的通信高效，快速。</p><p>先用 <code>sysrepo</code> 共享内存机制为后面的各类订阅打个底。先了解一下 <code>sysrepo</code> 的共享内存机理的实现。</p><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://github.com/CESNET/libyang">libyang – GitHub</a></p><p><a href="https://github.com/CESNET/netopeer2">netopeer2 – GitHub</a></p><p><a href="https://github.com/sysrepo/sysrepo">sysrepo – GitHub</a></p><p><a href="https://github.com/mbj4668/pyang">pyang – GitHub</a></p></blockquote><blockquote><p><a href="https://netopeer.liberouter.org/doc/libyang/master/index.html">libyang – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/libnetconf2/devel/index.html">libnetconf2 – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/sysrepo/master/index.html">sysrepo – Doc</a></p><p><a href="http://66.218.245.39/doc/html/rn01re08.html">pyang – Doc</a></p><p><a href="https://www.runoob.com/xpath/xpath-tutorial.html">XPath 教程 – RUNOOB.COM</a></p><p><a href="https://www.yiibai.com/xpath">XPath教程 – 易百教程</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/xuguozheng110/article/details/104043039">netopeer2 + sysrepo研究总结</a></p><p><a href="https://blog.csdn.net/qq_27923047/article/details/108069409">sysrepo简单使用</a></p><p><a href="https://blog.csdn.net/m0_47413019/article/details/105867406">第三章 sysrepo-plugind源码分析</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;sysrepo&quot;&gt;&lt;a href=&quot;#sysrepo&quot; class=&quot;headerlink&quot; title=&quot;sysrepo&quot;&gt;&lt;/a&gt;sysrepo&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;sysrepo - 1.4.2 笔记&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-sysrepo-概述&quot;&gt;&lt;a href=&quot;#1-sysrepo-概述&quot; class=&quot;headerlink&quot; title=&quot;1. sysrepo 概述&quot;&gt;&lt;/a&gt;1. sysrepo 概述&lt;/h2&gt;&lt;p&gt;&lt;code&gt;Sysrepo&lt;/code&gt; 是 &lt;code&gt;Linux/Unix&lt;/code&gt; 系统下一个基于 &lt;code&gt;YANG&lt;/code&gt; 模型的配置和操作数据库，为应用程序提供统一的操作数据的接口。应用程序使用 &lt;code&gt;YANG&lt;/code&gt; 模型来建模，通过利用 &lt;code&gt;YANG&lt;/code&gt; 模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件的一种数据管理方式。&lt;/p&gt;</summary>
    
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/categories/Netconf/"/>
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>netopper2 note</title>
    <link href="http://miaopei.github.io/2020/09/22/Netconf/sysrepo-netconf-node/"/>
    <id>http://miaopei.github.io/2020/09/22/Netconf/sysrepo-netconf-node/</id>
    <published>2020-09-22T11:50:28.000Z</published>
    <updated>2024-05-31T01:39:59.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netopper2-安装"><a href="#Netopper2-安装" class="headerlink" title="Netopper2 安装"></a>Netopper2 安装</h1><ul><li>环境 centos</li></ul><h2 id="1-基础软件安装"><a href="#1-基础软件安装" class="headerlink" title="1. 基础软件安装"></a>1. 基础软件安装</h2><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y update</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y upgrade</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y groupinstall <span class="string">&#x27;Development Tools&#x27;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install pcre-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install cmake</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install doxygen</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install valgrind</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install zlib-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install openssl-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install dnssec-trigger</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install autoconf libtool</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum -y install libev-devel</span></span><br></pre></td></tr></table></figure><h2 id="2-Netopeer2-Requirements"><a href="#2-Netopeer2-Requirements" class="headerlink" title="2. Netopeer2 Requirements"></a>2. Netopeer2 Requirements</h2><ul><li><a href="https://github.com/CESNET/libyang">libyang</a></li><li><a href="https://github.com/CESNET/libnetconf2">libnetconf2</a></li><li><a href="https://github.com/sysrepo/sysrepo">sysrepo</a></li></ul><h3 id="2-1-安装-libyang"><a href="#2-1-安装-libyang" class="headerlink" title="2.1 安装 libyang"></a>2.1 安装 libyang</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/libyang.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libyang; <span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make <span class="built_in">test</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure><p><strong>Documentation：</strong></p><p>可以使用 Doxygen 工具直接从源代码生成库文档:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make doc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">google-chrome ../doc/html/index.html</span></span><br></pre></td></tr></table></figure><p><strong>更改扩展插件目录：</strong></p><p>至于 YANG 扩展，libyang 允许加载扩展插件。默认情况下，存储插件的目录是 LIBDIR&#x2F;libyang。要更改它，使用下面的 cmake 选项，该选项的值指定所需的目录:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DPLUGINS_DIR:PATH=`<span class="built_in">pwd</span>`<span class="string">&quot;/src/extensions/&quot;</span> ..</span></span><br></pre></td></tr></table></figure><p>目录路径也可以通过环境变量文件改变运行时，例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=`<span class="built_in">pwd</span>`/my/relative/path yanglint</span></span><br></pre></td></tr></table></figure><p><strong>yanglint：</strong></p><p>Libyang 项目包括一个名为 yanglint (1)的功能丰富的工具，用于验证和转换模式和 YANG 模型数据。源代码位于&#x2F;tools&#x2F;lint，可用于探索应用程序如何使用 libyang 库。Yanglint (1)二进制文件及其手册页与库本身一起安装。</p><p>There is also <a href="https://github.com/CESNET/libyang/blob/master/tools/lint/examples/README.md">README</a> describing some examples of using <code>yanglint</code>.</p><p>还有自述文件，描述了使用阳光棉的一些例子。</p><p>Libyang 通过插件机制支持 YANG 扩展。一些插件(针对 NACM 或 Metadata)可以开箱即用，并与 libyang 一起安装。但是，如果没有安装 libyang，而是从构建目录中使用 yanglint (1) ，那么这些插件就不可用。有两种选择:</p><ol><li>安装 libyang</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br></pre></td></tr></table></figure><ol><li>设置环境变量 <code>LIBYANG_EXTENSIONS_PLUGINS_DIR</code> 包含路径到构建的扩展插件(从构建目录 <code>./src/extensions</code> )</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=<span class="string">&quot;`pwd`/src/extensions&quot;</span> ./yanglint</span></span><br></pre></td></tr></table></figure><h3 id="2-2-安装-libnetconf2"><a href="#2-2-安装-libnetconf2" class="headerlink" title="2.2 安装 libnetconf2"></a>2.2 安装 libnetconf2</h3><p>依赖：</p><ul><li><a href="https://github.com/CESNET/libyang">libyang</a></li><li><a href="https://git.libssh.org/projects/libssh.git">libssh</a></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> http://git.libssh.org/projects/libssh.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libssh; <span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">wget https://git.libssh.org/projects/libssh.git/snapshot/libssh-0.7.5.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -xzf libssh-0.7.5.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> libssh-0.7.5/build &amp;&amp; <span class="built_in">cd</span> libssh-0.7.5/build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr/local .. &amp;&amp; make &amp;&amp; sudo make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ../..</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> git://git.cryptomilk.org/projects/cmocka.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> cmocka</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout tags/cmocka-1.0.1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/libnetconf2.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make doc</span> </span><br></pre></td></tr></table></figure><h3 id="2-3-安装-sysrepo"><a href="#2-3-安装-sysrepo" class="headerlink" title="2.3 安装 sysrepo"></a>2.3 安装 sysrepo</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/sysrepo/sysrepo.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DCMAKE_BUILD_TYPE=Debug ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make doc</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">google-chrome ../doc/html/index.html</span></span><br></pre></td></tr></table></figure><h2 id="3-netopper2-安装"><a href="#3-netopper2-安装" class="headerlink" title="3. netopper2 安装"></a>3. netopper2 安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/Netopeer2.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> Netopeer2</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">export</span> LD_LIBRARY_PATH=/usr/local/lib64:/usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build &amp;&amp; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><h1 id="libyang-简介"><a href="#libyang-简介" class="headerlink" title="libyang 简介"></a>libyang 简介</h1><blockquote><p><a href="https://netopeer.liberouter.org/doc/libyang/master/index.html">libyang doc</a></p></blockquote><h2 id="1-About"><a href="#1-About" class="headerlink" title="1. About"></a>1. About</h2><p>libyang is a library implementing processing of the YANG schemas and data modeled by the YANG language. The library is implemented in C for GNU&#x2F;Linux and provides C API.</p><p>Libyang 是一个用 YANG 语言实现 YANG 模式和数据处理的库。该库是用 c 语言为 GNU&#x2F;Linux 实现的，并提供了 c API。</p><h2 id="2-Main-Features"><a href="#2-Main-Features" class="headerlink" title="2. Main Features"></a>2. Main Features</h2><ul><li>YANG 格式模式的解析(和验证)。</li><li>YIN 格式模式的解析(和验证)。</li><li>解析、验证和打印 XML 格式的实例数据。</li><li>解析、验证和打印 JSON 格式的实例数据 (RFC 7951)。</li><li>操作实例数据。</li><li>支持实例数据中的默认值 (RFC 6243)。</li><li>支持 YANG 扩展和用户类型。</li><li>支持 YANG 元数据 (RFC 7952)。</li><li>yanglint - 特征丰富的 YANG 工具</li></ul><p>当前的实现包括 YANG 1.0 (RFC 6020) 和 YANG 1.1 (RFC 7950)。</p><h2 id="3-Extra-side-effect-Features"><a href="#3-Extra-side-effect-Features" class="headerlink" title="3. Extra (side-effect) Features"></a>3. Extra (side-effect) Features</h2><ul><li>XML 解析器。</li><li>优化字符串存储 (字典)。</li></ul><h1 id="libnetconf2-简介"><a href="#libnetconf2-简介" class="headerlink" title="libnetconf2 简介"></a>libnetconf2 简介</h1><h2 id="1-About-1"><a href="#1-About-1" class="headerlink" title="1. About"></a>1. About</h2><p>libnetconf2 is a NETCONF library in C handling NETCONF authentication and all NETCONF RPC communication both server and client-side. Note that NETCONF datastore implementation is not a part of this library. The library supports both NETCONF 1.0 (<a href="https://tools.ietf.org/html/rfc4741">RFC 4741</a>) as well as NETCONF 1.1 (<a href="https://tools.ietf.org/html/rfc6241">RFC 6241</a>).</p><p>libnetconf2 是一个 C 语言的 NETCONF 库，处理 NETCONF 认证和所有 NETCONF RPC 通信服务器和客户端。注意，NETCONF 数据存储实现不是这个库的一部分。这个库同时支持 NETCONF 1.0 (RFC 4741) 和 NETCONF 1.1 (RFC 6241)。</p><h2 id="2-Main-Features-1"><a href="#2-Main-Features-1" class="headerlink" title="2. Main Features"></a>2. Main Features</h2><ul><li>使用 libssh 创建 SSH (RFC 4742、RFC 6242)，或使用 OpenSSL、经过身份验证的 NETCONF 会话创建 TLS (RFC 7589)。</li><li>使用预先建立的传输协议创建 NETCONF 会话(例如，使用这种机制可以通过 sshd(8) 进行隧道通信)。</li><li>创建 NETCONF 呼叫家庭会话(RFC 8071)。</li><li>创建、发送、接收和回复 RPC (RFC 4741，RFC 6241)。</li><li>创建、发送和接收 NETCONF 事件通知(RFC 5277)</li></ul><h1 id="libyang-学习总结"><a href="#libyang-学习总结" class="headerlink" title="libyang 学习总结"></a>libyang 学习总结</h1><h2 id="YANG-模型"><a href="#YANG-模型" class="headerlink" title="YANG 模型"></a>YANG 模型</h2><p><code>YANG</code>是最初设计用于为<code>NETCONF</code>协议建模的语言。 <code>YANG</code>模块定义了可用于基于<code>NETCONF</code>的操作（包括配置，状态数据，<code>RPC</code>和通知）的数据层次结构。这允许在<code>NETCONF</code>客户端和服务器之间发送的所有数据的完整描述。虽然不在本规范的范围之内，但是也可以使用除<code>NETCONF</code>以外的协议。</p><p><code>YANG</code>将数据的分层组织模型化为一个树，其中每个节点都有一个名称，或者一个值或一组子节点。<code>YANG</code>提供了对节点的清晰简洁的描述，以及这些节点之间的交互。</p><p><code>YANG</code>将数据模型组织成模块和子模块。模块可以从其他外部模块导入定义，并可以包含子模块的定义。可以增加层次结构，允许一个模块将数据节点添加到另一个模块中定义的层次结构中。这种增加可以是有条件的，只有在满足某些条件的情况下才会出现新的节点。</p><p>一个<strong>模块</strong>包含三种类型的语句：</p><ul><li><p>模块头(<code>module header</code>)语句，</p></li><li><p>“修订”(<code>revision</code>)语句</p></li><li><p>定义(<code>definition</code>)语句。</p><p>  模块头部语句<strong>描述模块并提供关于模块本身的信息</strong>，“修订”语句提供<strong>关于模块历史的信息</strong>，定义语句是<strong>定义数据模型的模块的主体</strong>。</p></li></ul><p>**数据模型(<code>data model</code>)**：</p><ul><li>数据模型描述如何表示和访问数据。</li></ul><p>**数据节点(<code>data node</code>)**：</p><ul><li>模式树中可以在数据树中实例化的节点。<code>container</code>，<code>leaf</code>，<code>leaf-list</code>，<code>list</code>，<code>anydata</code>和<code>anyxml</code>之一。</li></ul><p>**数据树(<code>data tree</code>)**：</p><ul><li>用<code>YANG</code>建模的任何数据的实例化树，例如配置数据，状态数据，组合配置和状态数据，<code>RPC</code>或操作输入，<code>RPC</code>或操作输出或通知。</li></ul><p>**叶节点(<code>leaf</code>)**：</p><ul><li>数据树中至多存在一个实例的数据节点。叶子有一个值，但没有子节点。</li></ul><p>**叶列表(<code>leaf-list</code>)**：</p><ul><li>与叶节点类似，但定义了一组唯一可识别的节点，而不是单个节点。每个节点都有一个值，但没有子节点。</li></ul><p>**<code>RPC</code>操作(<code>RPC operation</code>)**：</p><ul><li>特定的远程过程调用。</li></ul><p>**模式节点(<code>schema node</code>)**：</p><ul><li>模式树中的节点。 <code>action</code>，<code>container</code>，<code>leaf</code>，<code>leaf-list</code>，<code>list</code>，<code>choice</code>，<code>case</code>，<code>rpc</code>，<code>input</code>，<code>output</code>，<code>notification</code>，<code>anydata</code>和<code>anyxml</code>中的一个。</li></ul><p>**模式树(<code>schema tree</code>)**：</p><ul><li>模块中指定的定义层次结构。</li></ul><h3 id="Data-Model"><a href="#Data-Model" class="headerlink" title="Data Model"></a>Data Model</h3><p>叶节点（Leaf Nodes）</p><p>“<code>leaf</code>”语句用于在模式树中定义叶节点。 它需要一个参数，它是一个标识符，后面是一个包含详细叶子信息的子状态块。一个<code>leaf node</code>包含且只包含一个<code>value</code>，可以是数字或是字符串，具体是什么，看关键字”type”后面跟什么。<code>leaf node</code>下面不能挂子节点。如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line">    <span class="string">leaf</span> <span class="string">host-name</span> &#123;</span><br><span class="line">    <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">    <span class="string">description</span> <span class="string">&quot;Hostname for this system&quot;</span><span class="string">;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line"><span class="string">&lt;host-name&gt;my.example.com&lt;/host-name&gt;</span></span><br></pre></td></tr></table></figure><p>叶列表节点（Leaf-List Nodes）</p><p>可以认为Leaf-List Nodes表示的是一个“数组”，“数组”中的元素的值的type必须保持一致，可以有一系列同类型的值，而且不能重复。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line"><span class="string">leaf-list</span> <span class="string">domain-search</span> &#123;</span><br><span class="line"><span class="string">type</span> <span class="string">string;</span></span><br><span class="line"><span class="string">description</span> <span class="string">&quot;List of domain names to search&quot;</span><span class="string">;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line">    <span class="string">&lt;domain-search&gt;high.example.com&lt;/domain-search&gt;</span></span><br><span class="line">    <span class="string">&lt;domain-search&gt;low.example.com&lt;/domain-search&gt;</span></span><br><span class="line">    <span class="string">&lt;domain-search&gt;everywhere.example.com&lt;/domain-search&gt;</span></span><br></pre></td></tr></table></figure><p>容器节点（Container Nodes）</p><p>一个容器用于分组子树中的相关节点。 一个容器只有子节点，没有值。 容器可以包含任何类型的任何数量的子节点（叶子，列表，容器，叶子列表，动作和通知）。只能装东西，本身不具有意义。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line">    <span class="string">container</span> <span class="string">system</span> &#123;</span><br><span class="line">        <span class="string">container</span> <span class="string">login</span> &#123;</span><br><span class="line">            <span class="string">leaf</span> <span class="string">message</span> &#123;</span><br><span class="line">            <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">            <span class="string">description</span></span><br><span class="line">            <span class="string">&quot;Message given at start of login session&quot;</span><span class="string">;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line">    <span class="string">&lt;system&gt;</span></span><br><span class="line">        <span class="string">&lt;login&gt;</span></span><br><span class="line">        <span class="string">&lt;message&gt;Good</span> <span class="string">morning&lt;/message&gt;</span></span><br><span class="line">        <span class="string">&lt;/login&gt;</span></span><br><span class="line">    <span class="string">&lt;/system&gt;</span></span><br></pre></td></tr></table></figure><p>列表节点（List Nodes)</p><p>列表定义了一系列列表条目。每个条目就像一个容器，如果它定义了任何关键的叶子（指明一个叶子为 <code>key</code>），它就被其关键叶子的值唯一标识。列表可以定义多个关键叶子，并且可以包含任何类型的任何数量的子节点（包括树叶，列表，容器等）。实例化的时候，<code>key</code>的值(也就是”name”的值)是必须不同的，其它的值(full-name&#x2F;class)没有这个要求。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">YANG Example:</span></span><br><span class="line">    <span class="string">list</span> <span class="string">user</span> &#123;</span><br><span class="line">        <span class="string">key</span> <span class="string">&quot;name&quot;</span><span class="string">;</span></span><br><span class="line">        <span class="string">leaf</span> <span class="string">name</span> &#123;</span><br><span class="line">        <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">leaf</span> <span class="string">full-name</span> &#123;</span><br><span class="line">        <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="string">leaf</span> <span class="string">class</span> &#123;</span><br><span class="line">        <span class="string">type</span> <span class="string">string;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="string">-----------------------</span></span><br><span class="line"><span class="attr">NETCONF XML Example:</span></span><br><span class="line">    <span class="string">&lt;user&gt;</span></span><br><span class="line">        <span class="string">&lt;name&gt;glocks&lt;/name&gt;</span></span><br><span class="line">        <span class="string">&lt;full-name&gt;Goldie</span> <span class="string">Locks&lt;/full-name&gt;</span></span><br><span class="line">        <span class="string">&lt;class&gt;intruder&lt;/class&gt;</span></span><br><span class="line">    <span class="string">&lt;/user&gt;</span></span><br><span class="line">    <span class="string">&lt;user&gt;</span></span><br><span class="line">        <span class="string">&lt;name&gt;snowey&lt;/name&gt;</span></span><br><span class="line">        <span class="string">&lt;full-name&gt;Snow</span> <span class="string">White&lt;/full-name&gt;</span></span><br><span class="line">        <span class="string">&lt;class&gt;free-loader&lt;/class&gt;</span></span><br><span class="line">    <span class="string">&lt;/user&gt;</span></span><br><span class="line">    <span class="string">&lt;user&gt;</span></span><br><span class="line">        <span class="string">&lt;name&gt;rzell&lt;/name&gt;</span></span><br><span class="line">        <span class="string">&lt;full-name&gt;Rapun</span> <span class="string">Zell&lt;/full-name&gt;</span></span><br><span class="line">        <span class="string">&lt;class&gt;tower&lt;/class&gt;</span></span><br><span class="line">    <span class="string">&lt;/user&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Libyang"><a href="#Libyang" class="headerlink" title="Libyang"></a>Libyang</h2><p><code>libyang</code>是一个实现<code>YANG</code>模式处理的<code>library</code>和由<code>YANG</code>语言建模的数据</p><p><strong>主要特点</strong>：</p><ol><li>以 <code>YANG</code> 格式解析（和验证） <code>schema</code></li><li>以 <code>YIN</code> 格式解析（和验证） <code>schema</code></li><li>以 <code>XML</code> 格式解析，验证和打印实例数据</li><li>以 <code>JSON</code> 格式解析，验证和打印实例数据</li><li>使用实例数据进行操作</li><li>支持示例数据中的默认值</li><li>支持 <code>YANG</code> 扩展和实例类型</li><li>支持 <code>YANG</code> 元数据</li><li><code>XML</code> 解析器</li><li>优化的字符串存储（字典）</li></ol><p><strong>过程：先创建一个context，解析yang文件生成schema tree（schema tree 相当于类型定义，指定生成的数据类型），然后根据文件读入，生成对应的data tree（相当于实例化的数据）</strong></p><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><h4 id="context（上下文）"><a href="#context（上下文）" class="headerlink" title="context（上下文）"></a>context（上下文）</h4><p>上下文概念允许调用者在具有不同 <code>YANG</code> 模式集的环境中工作，具体工作流程（代码过程）见下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ly_ctx_new</span>()                                    <span class="comment">//创建新的上下文</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**************设置搜索路径****************/</span></span><br><span class="line"><span class="built_in">ly_ctx_set_searchdir</span>()                          <span class="comment">//设置搜索路径</span></span><br><span class="line"><span class="built_in">ly_ctx_unset_searchdirs</span>()                       <span class="comment">//不设置搜索路径</span></span><br><span class="line"><span class="built_in">ly_ctx_set_disable_searchdir_cwd</span>()              <span class="comment">//设置不在当前工作路径搜索</span></span><br><span class="line"><span class="built_in">ly_ctx_set_disable_searchdir</span>()                  <span class="comment">//避免在所有上下文的搜索目录搜索</span></span><br><span class="line"><span class="built_in">ly_ctx_set_module_imp_clb</span>()                     <span class="comment">//设置自定义模块搜索回调</span></span><br><span class="line"><span class="comment">/**************设置搜索路径****************/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">/**************解析器函数******************/</span></span><br><span class="line"><span class="comment">//使用解析器函数 lys_parse_*（） 将 schema / tree 加入到 context 中</span></span><br><span class="line"><span class="comment">//schema的函数都有lys_的前缀，实例数据的函数有lyd_的前缀。发生于在数据解析时，schema在context中并未找到或者schema只是被导入但并未实现</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">ly_ctx_load_module</span>()                            <span class="comment">//在ctx搜索路径中找到model并将其加载到其中 </span></span><br><span class="line"><span class="built_in">ly_ctx_set_module_data_clb</span>()                    <span class="comment">//设置回调函数</span></span><br><span class="line"><span class="comment">/**************解析器函数******************/</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//imported的函数可以变成implemented，但是implemented的函数不能变回imported</span></span><br><span class="line"><span class="built_in">lys_set_implemented</span>()                           <span class="comment">//将imported函数变为implemented</span></span><br><span class="line"><span class="built_in">lys_set_allimplemented</span>()                        <span class="comment">//将所有imported函数变为implemented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**************module********************/</span></span><br><span class="line"><span class="built_in">ly_ctx_get_module</span>()                             <span class="comment">//获得确切的model</span></span><br><span class="line"><span class="built_in">ly_ctx_get_submodule</span>()                          <span class="comment">//获得确切的submodel</span></span><br><span class="line"><span class="built_in">ly_ctx_get_module_iter</span>()                        <span class="comment">//对context中所有model进行某操作的迭代</span></span><br><span class="line"><span class="built_in">ly_ctx_info</span>()                                   <span class="comment">//获取有关context中模式的复杂信息</span></span><br><span class="line"><span class="built_in">ly_ctx_find_path</span>()                              <span class="comment">//获取上下文中模块中定义的特定节点</span></span><br><span class="line"><span class="built_in">ly_ctx_get_node</span>()                               <span class="comment">//获取上下文中模块中定义的特定节点</span></span><br><span class="line"><span class="built_in">ly_ctx_remove_module</span>()                          <span class="comment">//删除context保存的模块</span></span><br><span class="line"><span class="built_in">ly_ctx_disable</span>()                                <span class="comment">//禁用某模块</span></span><br><span class="line"><span class="built_in">ly_ctx_clean</span>()                                  <span class="comment">//清除所有已加载model的context</span></span><br><span class="line"><span class="built_in">ly_ctx_destroy</span>()                                <span class="comment">//删除上下文</span></span><br><span class="line"><span class="comment">/**************module********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*********context dictionary*************/</span></span><br><span class="line"><span class="built_in">lydict_insert</span>()                                 <span class="comment">//将字符串插入字典</span></span><br><span class="line"><span class="built_in">lydict_remove</span>()                                 <span class="comment">//将字符串从字典中删除</span></span><br><span class="line"><span class="comment">/*********context dictionary*************/</span></span><br></pre></td></tr></table></figure><p>对于<code>context</code>，第一次请求<code>module</code>的最新版本时，将正确搜索并加载该<code>module</code>。但是，当第二次请求此<code>module</code>（没有修订）时，将返回先前找到的<code>module</code>。这样做的好处是不会反复搜索<code>module</code>，但缺点是如果稍后可以使用<code>module</code>的后续版本，则此<code>context</code>不会使用它。</p><p><code>context</code> 在内部保存所有<code>model</code>及其 <code>submodel</code></p><p><code>context</code> 包括更有效地存储字符串的字典。大多数字符串在 <code>schema</code> 和 <code>data tree</code> 经常重复。因此，<code>libyang</code> 不会在每次出现时分配这些字符串，而是将它们存储为字典中的记录。</p><h4 id="schema（架构）"><a href="#schema（架构）" class="headerlink" title="schema（架构）"></a>schema（架构）</h4><p><code>schema</code>是 <code>YANG</code> 数据模型在 <code>libyang</code> 中的内部表示，每个 <code>schema</code> 都与其 <code>context</code> 连接，并使用解析器函数加载，因此无法以编程方式创建（更改） <code>schema</code> 。在 <code>libyang</code> 中，<code>schema</code> 仅用于访问数据模型定义模式树节点能够保存调用者应用程序使用的私有对象（通过指向结构，函数，变量等的指针）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lys_set_private</span>()                <span class="comment">//将私有对象分配给特定节点</span></span><br></pre></td></tr></table></figure><p><code>schema</code> 解析器允许从特定格式读取 <code>schema</code>。<code>libyang</code> 支持以下架构格式：<code>YANG</code>，<code>YIN</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以lys_features_为前缀的函数组用于访问和操作模式的功能。</span></span><br><span class="line"><span class="built_in">lys_features_list</span>()              <span class="comment">//提供特定schema及其子schema中定义的所有功能的列表，或者提供有关所有功能状态的信息</span></span><br><span class="line"><span class="built_in">lys_features_state</span>()             <span class="comment">//获取一个特定特征的状态</span></span><br><span class="line"><span class="built_in">lys_features_</span>(dis)<span class="built_in">enable</span>()       <span class="comment">//启用/禁用特定功能</span></span><br></pre></td></tr></table></figure><h4 id="plugins（插件）"><a href="#plugins（插件）" class="headerlink" title="plugins（插件）"></a>plugins（插件）</h4><p><code>plugins</code> 形式支持扩展和用户类型。无论何时创建上下文，都会从 <code>plugins</code> 目录 <code>LIBDIR/libyang/</code> 加载它们。扩展 <code>plugins</code> 目录路径（默认 <code>LIBDIR/libyang/extensions/</code>）可以通过<code>LIBYANG_EXTENSIONS_PLUGINS_DIR</code> 环境变量更改，类似地通过用户类型目录（默认<code>LIBDIR/libyang/user_types/</code>）更改 <code>LIBYANG_USER_TYPES_PLUGINS_DIR</code>。请注意，不会删除不可用的<code>plugins</code>，只会加载任何新 <code>plugins</code>。另请注意，新 <code>plugins</code> 的可用性不会影响上下文中的当前 <code>schema</code>，它们仅应用于新解析的 <code>schema</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">扩展 plugins 目录路径</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=LIBDIR/libyang/extensions/</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用户类型目录</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_USER_TYPES_PLUGINS_DIR=LIBDIR/libyang/user_types/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ly_load_plugins</span>()                <span class="comment">//手动刷新plugins列表</span></span><br><span class="line"><span class="built_in">ly_clean_plugins</span>()               <span class="comment">//清空plugins列表</span></span><br></pre></td></tr></table></figure><h4 id="Printing-Schemas（打印模式）"><a href="#Printing-Schemas（打印模式）" class="headerlink" title="Printing Schemas（打印模式）"></a>Printing Schemas（打印模式）</h4><p><code>schema printing</code> 允许以特定格式序列化模式 <code>schema</code> 的内部表示 ，包括：<code>YING</code>，<code>YANG</code>，<code>Tree</code></p><p>每个节点的模块的简单树结构被打印为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;status&gt; &lt;flags&gt; &lt;name&gt; &lt;opts&gt; &lt;type&gt; &lt;if-features&gt;</span><br><span class="line">&lt;status&gt;</span><br><span class="line">+ 对于当前</span><br><span class="line">x 不推荐使用</span><br><span class="line">o 过时的</span><br><span class="line">&lt;flags&gt;</span><br><span class="line">rw 用于配置数据</span><br><span class="line">    ro 用于状态数据</span><br><span class="line">    -x 对于RPC</span><br><span class="line">    -n 通知</span><br><span class="line">&lt;name&gt;</span><br><span class="line">    (&lt;name&gt;) 表示该节点是一个选择节点</span><br><span class="line">    :(&lt;name&gt;) 表示节点是案例节点</span><br><span class="line">    如果节点从另一个模块扩充到树中，则使用模块名称打印&lt;module-name&gt;:&lt;name&gt;</span><br><span class="line">&lt;opts&gt;</span><br><span class="line">    ? 对于可选的叶子或选择</span><br><span class="line">    ! 对于存在容器</span><br><span class="line">    * 对于叶子列表或列表</span><br><span class="line">    [&lt;keys&gt;] 对于列表的键</span><br><span class="line">&lt;type&gt;</span><br><span class="line">    如果定义了默认值，则将其打印在尖括号内 &lt;default-value&gt;</span><br><span class="line">    如果类型是leafref，则类型打印为 - &gt; TARGET`</span><br><span class="line">&lt;if-features&gt;</span><br><span class="line">是此节点所依赖的功能列表，打印在大括号和问号内 &#123;...&#125;?</span><br></pre></td></tr></table></figure><h4 id="数据实例"><a href="#数据实例" class="headerlink" title="数据实例"></a>数据实例</h4><p><code>data tree</code> 中的所有 <code>data</code> 节点都和他们的 <code>schema</code> 节点相连</p><p>与 <code>schema</code> 解析器相反，如果根据 libyang 上下文中的 <code>schema</code>，这样的空数据树是有效的，则 <code>data</code> 解析器也接受空输入数据。</p><p>在创建&#x2F;插入节点时，该操作中的所有对象必须属于同一个上下文</p><p>创建数据：</p><ol><li><p>根据节点名称或其父节点逐个添加节点</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lyd_new</span>()</span><br><span class="line"><span class="built_in">lyd_new_leaf</span>()</span><br></pre></td></tr></table></figure></li><li><p>使用简单的 <code>XPath</code> 寻址</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">lyd_new_path</span>()</span><br></pre></td></tr></table></figure></li></ol><h1 id="sysrepo-简介"><a href="#sysrepo-简介" class="headerlink" title="sysrepo 简介"></a>sysrepo 简介</h1><h2 id="1-sysrepo-引言"><a href="#1-sysrepo-引言" class="headerlink" title="1. sysrepo 引言"></a>1. sysrepo 引言</h2><p>Sysrepo 是一个基于 yang 的 Unix&#x2F;Linux 系统数据存储。使用 YANG 建模配置的应用程序可以使用 Sysrepo 进行管理。</p><p>申请使用 Sysrepo 的方法主要有两种。直接方法包括在需要配置数据时从应用程序本身调用 Sysrepo 函数，或者执行特定的回调以对配置更改做出反应。还可以实现一个独立的守护进程，将 Sysrepo 调用转换为应用程序特定的操作。对于现有的应用程序，这种间接方法通常比较容易使用，因为这样就不需要修改它们自己来利用 Sysrepo 数据存储，而代价是需要一个额外的中间进程(守护进程)。如果有几个这样的守护进程，它们可以作为插件编写，然后由一个进程管理。</p><p><img data-src="/images/images_sr/sr_apps.png" alt="Sysrepo application approaches"></p><p>Sysrepo 是用于 Unix&#x2F;Linux 应用程序的基于 yang 的配置和操作状态数据存储。</p><p>Sysrepo是一个基于YANG模型的配置和操作数据库，为应用程序提供一致的操作数据的接口，解决了配置读写困难的问题。应用程序使用YANG模型来建模，这样就可以利用YANG模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件了。</p><p>目前，应用程序可以使用 sysrepo Client Library 的 c 语言 API 访问数据存储中的配置，但是对其他编程语言的支持也计划在以后使用(因为 sysrepo 使用 Google 协议缓冲作为数据存储和客户端库之间的接口，为任何支持 GPB 的编程语言编写本地客户端库是可能的)。</p><p>Sysrepo 可以很容易地与管理代理(如 NETCONF 或 RESTCONF 服务器)集成，使用应用程序用于访问其配置的相同的客户端库 API。到目前为止，sysrepo 已经与 Netopeer 2 NETCONF 服务器集成。这意味着使用 sysrepo 存储其配置的应用程序可以自动受益于通过 NETCONF 进行控制的能力。</p><p><img data-src="/images/images_sr/high_level_architecture.png"></p><p>SYSREPO数据库它提供了以下特性:</p><ul><li>模型配置文件和状态数据的集中存储</li><li>应用程序可以通过XPATH访问配置</li><li>支持启动、运行和临时数据存储</li><li>支持事务，符合ACID</li><li>根据YANG模型，进行数据一致性和约束的检查</li><li>没有单一故障点，应用程序不需要运行任何其他进程来访问其配置</li></ul><p>sysrepo 实际只是保存配置，并调用回调函数这两件事。</p><h2 id="2-命令行工具"><a href="#2-命令行工具" class="headerlink" title="2. 命令行工具"></a>2. 命令行工具</h2><p>有一些二进制文件是严格可选的，因为它们只使用Sysrepo API。但是，它们对于一些常见任务可能很有用，通过包含它们，每个用户不必从头开始编写它们。</p><h3 id="2-1-sysrepo-plugind"><a href="#2-1-sysrepo-plugind" class="headerlink" title="2.1 sysrepo-plugind"></a>2.1 sysrepo-plugind</h3><p>这个应用程序是一个简单的守护进程，它将所有可用的 Sysrepo 插件分组到一个单独的进程中。这个守护进程从插件路径目录加载插件，并支持一些选项， <code>--verbosity</code> 和 <code>--debug</code>，以避免进入守护进程模式，并保持将所有消息打印到 stderr。</p><p>Plugin 是一个共享对象，它必须公开两个函数: <code>sr_plugin_init_cb()</code> 和 <code>sr_plugin_cleanup_cb()</code>，这两个函数分别在 sysrepo-plugind 的开始和结束时被调用。初始化函数必须执行所有运行时任务，因为守护进程不会调用其他函数。它通常包括创建各种订阅，然后自己处理事件。清理通常会停止这些订阅。</p><p>插件路径，这是存储插件的唯一途径。默认路径可以在编译过程中修改(<code>PLUGINS_PATH</code> 选项) ，但是如果设置了 <code>$SRPD_PLUGINS_PATH</code> 环境变量，则总是会覆盖这个默认路径。</p><h3 id="2-2-sysrepoctl"><a href="#2-2-sysrepoctl" class="headerlink" title="2.2 sysrepoctl"></a>2.2 sysrepoctl</h3><p>它是一个实用工具，可以更改模式(模块)。具体来说，它可以列出、安装、卸载或更新它们。此外，还可以更改模块的特性、重播支持和权限。重要的是要记住哪些操作是立即执行的，哪些操作是延期的(模式中的详细信息)。</p><p><strong>-l，–list</strong></p><p>所有当前安装的模块都列在一个简明的表格中，其中包含有关它们的基本信息。还有关于任何准备好的更改的信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --list</span></span><br></pre></td></tr></table></figure><p><strong>-i，–install &lt;path&gt;</strong></p><p>YANG 模块的安装只需要指定它们的路径(YANG 或者 YIN 格式)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install ~/Documents/modules/ietf-interfaces.yang</span></span><br></pre></td></tr></table></figure><p><strong>-u，–uninstall &lt;module&gt;</strong></p><p>要删除 YANG 模块，必须指定它的名称(而不是文件名)。所有可以移除的已安装模块都是通过 <code>--list</code> 打印的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --uninstall ietf-interfaces</span></span><br></pre></td></tr></table></figure><p><strong>-c，–change &lt;module&gt;</strong></p><p>已安装的模块可以通过多种方式进行更改，可以选择性地组合成一个命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --(<span class="built_in">disable</span>|<span class="built_in">enable</span>)-feature</span></span><br></pre></td></tr></table></figure><p>然后，它们的重播支持(存储接收到的通知)可以被打开或关闭。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --replay on</span></span><br></pre></td></tr></table></figure><p>最后，可以调整文件系统权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --owner netconf --group netconf --permissions 660</span></span><br></pre></td></tr></table></figure><p><strong>-U，–update &lt;path&gt;</strong></p><p>已安装的 YANG 模块可以更新为更新的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --update ~/Documents/modules/ietf-netconf@2013-09-29.yang</span></span><br></pre></td></tr></table></figure><p><strong>-C，–connection-count</strong></p><p>获取当前连接的客户端的数量。可用于检查是否可以立即应用某些架构更改(如果没有连接)。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --connection-count</span></span><br></pre></td></tr></table></figure><h3 id="2-3-sysrepocfg"><a href="#2-3-sysrepocfg" class="headerlink" title="2.3 sysrepocfg"></a>2.3 sysrepocfg</h3><p>这个二进制文件允许以多种方式处理配置，比如导入、导出、编辑和替换(从文件或数据存储中复制)。还可以发送 <code>rpc/action</code> 或通知。</p><p>所有操作都在 <code>--datastore</code> (默认运行、启动或操作)上执行，或者只在特定的 <code>--module</code> 上执行，并以支持的 <code>--format</code> (默认 xml、 json 或 lyb)处理数据。</p><p><strong>-I， –import[&#x3D;&lt;file-path&gt;]</strong></p><p>为了导入配置，通常会提供一个文件。它的格式将根据扩展自动检测。如果不适用(或者从 STDIN 读取数据) ，可以手动确定。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=~/Documents/data/running.xml</span></span><br></pre></td></tr></table></figure><p>还可以导入模块的启动配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=~/Documents/data/ietf-interfaces_startup.json --datastore startup --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><p><strong>-X，–export[&#x3D;&lt;file-path&gt;]</strong></p><p>可以将导出的配置打印到文件中，也可以直接打印到 STDOUT。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span> --datastore operational</span></span><br></pre></td></tr></table></figure><p>此外，只能检索配置的特定部分</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span>=ietf-interfaces_running.lyb --format lyb --module ietf-interfaces</span></span><br></pre></td></tr></table></figure><p>或者 XPath 选择。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span> --xpath /ietf-interfaces:interfaces/interface[name=<span class="string">&#x27;eth0&#x27;</span>]</span></span><br></pre></td></tr></table></figure><p><strong>-E，–edit[&#x3D;&lt;file-path&gt;&#x2F;&lt;editor&gt;]</strong></p><p>可以在文件中或使用任意文本编辑器提供要合并的数据(作为编辑应用)。另外，在更改运行的数据时，可以锁定数据存储。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=candidate.xml --datastore candidate</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --lock</span></span><br></pre></td></tr></table></figure><p><strong>-R，–rpc[&#x3D;&lt;file-path&gt;&#x2F;&lt;editor&gt;]</strong></p><p>也可以从文件或使用编辑器发送 RPC 或操作。任何输出都打印到 STDOUT。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p><strong>-N，–notification[&#x3D;&lt;file-path&gt;&#x2F;&lt;editor&gt;]</strong></p><p>以类似的方式执行发送通知。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --notification=notif.xml</span></span><br></pre></td></tr></table></figure><p><strong>-C，–copy-from &lt;file-path&gt;&#x2F;&lt;source-datastore&gt;</strong></p><p>此操作可以用文件或其他数据存储的内容替换模块或数据存储数据。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --copy-from=ietf-interfaces_startup.xml --module ietf-interfaces --datastore startup</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --copy-from=candidate</span></span><br></pre></td></tr></table></figure><p>第二个命令实际上是 NETCONF <code>&lt;commit&gt;</code> ，因为它将候选数据存储复制到默认运行的数据存储中。</p><h2 id="3-插件示例"><a href="#3-插件示例" class="headerlink" title="3. 插件示例"></a>3. 插件示例</h2><p>这部分教你如何编写一个简单的 YANG 模块，然后让 Sysrepo 以插件或独立守护程序的形式处理数据。在继续之前，最好至少对 Sysrepo 有一个基本的了解。</p><h3 id="3-1-简单的-YANG-模块"><a href="#3-1-简单的-YANG-模块" class="headerlink" title="3.1 简单的 YANG 模块"></a>3.1 简单的 YANG 模块</h3><p>对于任何你想用 Sysrepo 管理的设备，你都需要一个设备的 YANG 模块。该语言非常丰富，几乎可以对任何系统进行描述。例如，一个烤箱将完全由 Sysrepo 管理。将介绍 YANG 的所有基本部分，即配置数据、状态数据、 rpc 和通知。</p><p>为了简化事情，我们的烤箱是一个便宜的型号，只有一个开关和滑块来设置温度。但是，它可以提供内部实际温度的信息，并且当内部温度达到设定温度时通知厨师。此外，生的食物可以预先准备好，如果有提示，烤箱可以自动将食物放入或取出。这样我们就得到了 YANG 模型:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">module oven &#123;</span><br><span class="line">    namespace &quot;urn:sysrepo:oven&quot;;</span><br><span class="line">    prefix ov;</span><br><span class="line">    revision 2018-01-19 &#123;</span><br><span class="line">        description &quot;Initial revision.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    typedef oven-temperature &#123;</span><br><span class="line">        description &quot;Temperature range that is accepted by the oven.&quot;;</span><br><span class="line">        type uint8 &#123;</span><br><span class="line">            range &quot;0..250&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container oven &#123;</span><br><span class="line">        description &quot;Configuration container of the oven.&quot;;</span><br><span class="line">        leaf turned-on &#123;</span><br><span class="line">            description &quot;Main switch determining whether the oven is on or off.&quot;;</span><br><span class="line">            type boolean;</span><br><span class="line">            default false;</span><br><span class="line">        &#125;</span><br><span class="line">        leaf temperature &#123;</span><br><span class="line">            description &quot;Slider for configuring the desired temperature.&quot;;</span><br><span class="line">            type oven-temperature;</span><br><span class="line">            default 0;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    container oven-state &#123;</span><br><span class="line">        description &quot;State data container of the oven.&quot;;</span><br><span class="line">        config false;</span><br><span class="line">        leaf temperature &#123;</span><br><span class="line">            description &quot;Actual temperature inside the oven.&quot;;</span><br><span class="line">            type oven-temperature;</span><br><span class="line">        &#125;</span><br><span class="line">        leaf food-inside &#123;</span><br><span class="line">            description &quot;Informs whether the food is inside the oven or not.&quot;;</span><br><span class="line">            type boolean;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rpc insert-food &#123;</span><br><span class="line">        description &quot;Operation to order the oven to put the prepared food inside.&quot;;</span><br><span class="line">        input &#123;</span><br><span class="line">            leaf time &#123;</span><br><span class="line">                description &quot;Parameter determining when to perform the operation.&quot;;</span><br><span class="line">                type enumeration &#123;</span><br><span class="line">                    enum now &#123;</span><br><span class="line">                        description &quot;Put the food in the oven immediately.&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                    enum on-oven-ready &#123;</span><br><span class="line">                        description</span><br><span class="line">                            &quot;Put the food in once the temperature inside</span><br><span class="line">                             the oven is at least the configured one. If it</span><br><span class="line">                             is already, the behaviour is similar to &#x27;now&#x27;.&quot;;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rpc remove-food &#123;</span><br><span class="line">        description &quot;Operation to order the oven to take the food out.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    notification oven-ready &#123;</span><br><span class="line">        description</span><br><span class="line">            &quot;Event of the configured temperature matching the actual</span><br><span class="line">             temperature inside the oven. If the configured temperature</span><br><span class="line">             is lower than the actual one, no notification is generated</span><br><span class="line">             when the oven cools down to the configured temperature.&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-烤箱插件"><a href="#3-2-烤箱插件" class="headerlink" title="3.2 烤箱插件"></a>3.2 烤箱插件</h3><p>这里将一步一步地解释如何写一个合适的插件，将管理烤箱。所有代码片段都取自实际的实现。<a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__plugin__api.html">插件 API</a></p><p><strong>初始化</strong></p><p>在初始化函数中，通常必须初始化设备并创建对任何相关 YANG 节点的订阅。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">food_inside = <span class="number">0</span>;</span><br><span class="line">insert_food_on_ready = <span class="number">0</span>;</span><br><span class="line">oven_temperature = <span class="number">25</span>;</span><br></pre></td></tr></table></figure><p>首先，肯定要通知烤箱其配置参数的任何变化，这样最容易订阅整个模块。设置标志 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__subs__api.html#ggac91898627ad5aeb589e6a3993a697d14ac5b782dfbbfe74c8ff2b1642a8bb0afe">SR_SUBSCR_ENABLED</a>，以便在 sysrepo-plugind 启动时，独立于烤箱(设备)的状态，将当前存储的配置应用于设备并保持一致性。另一个标志 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__subs__api.html#ggac91898627ad5aeb589e6a3993a697d14a0530a7715e162ee90e298ce504239444">SR_SUBSCR_DONE_ONLY</a> 被使用，因此不会调用回调来验证任何挂起的更改。对于我们的示例，只要基于 YANG 限制的值有效，它就总是正确的。</p><p>还可以订阅任意的配置数据子树，但这个示例不需要这样做。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_module_change_subscribe(session, <span class="string">&quot;oven&quot;</span>, oven_config_change_cb, <span class="literal">NULL</span>, <span class="number">0</span>,</span><br><span class="line">        SR_SUBSCR_ENABLED | SR_SUBSCR_DONE_ONLY, &amp;subscription);</span><br></pre></td></tr></table></figure><p>然后，由于在 oven 模型中还有状态数据，将执行标记该插件为它们的(独占)提供者的订阅。当 Sysrepo 需要状态数据子树时，通常在客户机请求它们时调用它。</p><p>值得注意的是，使用了相同的订阅对象，因此必须指定标志 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__subs__api.html#ggac91898627ad5aeb589e6a3993a697d14a08c075b76b8299ea4b4ed0fbbcb5b9ae">SR_SUBSCR_CTX_REUSE</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_dp_get_items_subscribe(session, <span class="string">&quot;/oven:oven-state&quot;</span>, oven_state_cb, <span class="literal">NULL</span>, SR_SUBSCR_CTX_REUSE, &amp;subscription);</span><br></pre></td></tr></table></figure><p>最后，该插件还可以处理任何 RPC 调用，这些调用也需要副本。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_rpc_subscribe(session, <span class="string">&quot;/oven:insert-food&quot;</span>, oven_insert_food_cb, <span class="literal">NULL</span>, SR_SUBSCR_CTX_REUSE, &amp;subscription);</span><br><span class="line"></span><br><span class="line">rc = sr_rpc_subscribe(session, <span class="string">&quot;/oven:remove-food&quot;</span>, oven_remove_food_cb, <span class="literal">NULL</span>, SR_SUBSCR_CTX_REUSE, &amp;subscription);</span><br></pre></td></tr></table></figure><p>Sysrepo 为插件提供了能够以统一方式打印消息的宏，因此建议使用它们。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SRP_LOG_DBGMSG(<span class="string">&quot;OVEN: Oven plugin initialized successfully.&quot;</span>);</span><br></pre></td></tr></table></figure><p>一般格式为 <code>SRP_LOG_(level)(MSG)</code> 。消息的严重性是由 DBG、 VRB、 WRN 或 ERR 之一编写的，而不是(级别)。在示例中，由于没有指定其他变量参数，因此使用了后缀 MSG。如果有，则省略此后缀。参数与 <code>printf ()</code>函数使用的参数相同。</p><h3 id="3-3-清除"><a href="#3-3-清除" class="headerlink" title="3.3 清除"></a>3.3 清除</h3><p>至于清理，所执行的任务差别很大，并且取决于设备。但是，总是需要适当地终止 init 函数中的订阅，这是本示例中所需的惟一工作。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sr_unsubscribe(subscription);</span><br></pre></td></tr></table></figure><p>为了简化代码，subscription 被定义为一个全局变量，但是也可以使用 private_data，例如，也可以使用应用程序需要的任何附加数据来存储它。之前分配的所有其他回调都可以在需要时使用相同的机制传递附加数据。</p><h3 id="3-4-配置数据"><a href="#3-4-配置数据" class="headerlink" title="3.4 配置数据"></a>3.4 配置数据</h3><p>在示例中，它用 <code>oven_config_change_cb()</code> 订阅模块更改。这里看到的代码是实际代码的简化，但是更好地理解回调应该做什么。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_config_change_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">const</span> <span class="type">char</span> *module_name, <span class="type">sr_notif_event_t</span> event, <span class="type">void</span> *private_ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> rc;</span><br><span class="line">    <span class="type">sr_val_t</span> *val;</span><br><span class="line">    rc = sr_get_item(session, <span class="string">&quot;/oven:oven/temperature&quot;</span>, &amp;val);</span><br><span class="line">    <span class="keyword">if</span> (rc != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="keyword">goto</span> sr_error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//apply the temperature to the device</span></span><br><span class="line">    sr_free_val(val);</span><br><span class="line">    rc = sr_get_item(session, <span class="string">&quot;/oven:oven/turned-on&quot;</span>, &amp;val);</span><br><span class="line">    <span class="keyword">if</span> (rc != SR_ERR_OK) &#123;</span><br><span class="line">        <span class="keyword">goto</span> sr_error;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//apply the switch state to the device</span></span><br><span class="line">    sr_free_val(val);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">sr_error:</span><br><span class="line">    SRP_LOG_ERR(<span class="string">&quot;OVEN: Oven config change callback failed: %s.&quot;</span>, sr_strerror(rc));</span><br><span class="line">    <span class="keyword">return</span> rc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，可以观察到，事件变量被忽略。在我们的示例中，无论处理哪个事件，我们都执行相同的操作，由于订阅标志，它将不会是除 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__change__subs__api.html#ggaf5289764c79d867bab642997c23b355aa52e97346d4bf27ab64ad9233627ccf39">SR_EV_DONE</a> 之外的任何事件。</p><p>然后，读取并应用所有相关的数据节点。这种方法是最简单的方法，不能总是使用，但在这种情况下可以使用，因为可以重新应用更改而不会产生任何效果。更详细的机制(返回更改)是使用 <a href="https://netopeer.liberouter.org/doc/sysrepo/master/group__change__subs__api.html#ga613064e7a7431a30eff2b99b87af5348">sr_get_changes_iter()</a> 和提供的会话，从而只获得特定的更改值。</p><h3 id="3-5-状态数据"><a href="#3-5-状态数据" class="headerlink" title="3.5 状态数据"></a>3.5 状态数据</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_state_cb</span><span class="params">(<span class="type">sr_session_ctx_t</span> *session, <span class="type">const</span> <span class="type">char</span> *module_name, <span class="type">const</span> <span class="type">char</span> *path, <span class="keyword">struct</span> lyd_node **parent, <span class="type">void</span> *private_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> str[<span class="number">32</span>];</span><br><span class="line">    <span class="built_in">sprintf</span>(str, <span class="string">&quot;%u&quot;</span>, oven_temperature);</span><br><span class="line">    lyd_new_path(*parent, <span class="literal">NULL</span>, <span class="string">&quot;/oven:oven-state/temperature&quot;</span>, str, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    lyd_new_path(*parent, <span class="literal">NULL</span>, <span class="string">&quot;/oven:oven-state/food-inside&quot;</span>, food_inside ? <span class="string">&quot;true&quot;</span> : <span class="string">&quot;false&quot;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>状态数据回调是自我解释的。由于订阅只针对一个有两片叶子的容器，因此路径只能有一个值。创建相应的子元素。</p><h3 id="3-6-RPC-订阅"><a href="#3-6-RPC-订阅" class="headerlink" title="3.6 RPC 订阅"></a>3.6 RPC 订阅</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_insert_food_cb</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">sr_val_t</span> *input, <span class="type">const</span> <span class="type">size_t</span> input_cnt, <span class="type">sr_val_t</span> **output, <span class="type">size_t</span> *output_cnt, <span class="type">void</span> *private_data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (food_inside) &#123;</span><br><span class="line">        SRP_LOG_ERRMSG(<span class="string">&quot;OVEN: Food already in the oven.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SR_ERR_OPERATION_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">strcmp</span>(input[<span class="number">0</span>].data.enum_val, <span class="string">&quot;on-oven-ready&quot;</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (insert_food_on_ready) &#123;</span><br><span class="line">            SRP_LOG_ERRMSG(<span class="string">&quot;OVEN: Food already waiting for the oven to be ready.&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> SR_ERR_OPERATION_FAILED;</span><br><span class="line">        &#125;</span><br><span class="line">        insert_food_on_ready = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">    &#125;</span><br><span class="line">    insert_food_on_ready = <span class="number">0</span>;</span><br><span class="line">    food_inside = <span class="number">1</span>;</span><br><span class="line">    SRP_LOG_DBGMSG(<span class="string">&quot;OVEN: Food put into the oven.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">static</span> <span class="type">int</span></span><br><span class="line"><span class="title function_">oven_remove_food_cb</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *path, <span class="type">const</span> <span class="type">sr_val_t</span> *input, <span class="type">const</span> <span class="type">size_t</span> input_cnt, <span class="type">sr_val_t</span> **output, <span class="type">size_t</span> *output_cnt, <span class="type">void</span> *private_ctx)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (!food_inside) &#123;</span><br><span class="line">        SRP_LOG_ERRMSG(<span class="string">&quot;OVEN: Food not in the oven.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> SR_ERR_OPERATION_FAILED;</span><br><span class="line">    &#125;</span><br><span class="line">    food_inside = <span class="number">0</span>;</span><br><span class="line">    SRP_LOG_DBGMSG(<span class="string">&quot;OVEN: Food taken out of the oven.&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> SR_ERR_OK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>RPC 回调应该执行相应的 RPC。移除食物只能做到这一点。但是插入食物有一些定义的输入参数，所以它们需要被处理。同样，如果存在某些输出参数，则需要创建并返回这些参数，但这不是我们的情况。</p><h3 id="3-7-Notifications"><a href="#3-7-Notifications" class="headerlink" title="3.7 Notifications"></a>3.7 Notifications</h3><p>通知的提供者不需要订阅任何东西，只需在发生通知时生成任何通知即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rc = sr_event_notif_send(sess, <span class="string">&quot;/oven:oven-ready&quot;</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>从这个例子中可以看出，这是相当简单的。此外，如果有通知的任何子节点，则需要创建它们，然后将其传递给函数。</p><h3 id="3-8-尝试一下"><a href="#3-8-尝试一下" class="headerlink" title="3.8 尝试一下"></a>3.8 尝试一下</h3><p>模型和完整的插件源可以在 <code>sysrepo/examples/plugin</code> 中找到。生成 Sysrepo 后，烤箱共享库存储在示例中，但不会自动安装。在安装和实际运行插件之前，最好仔细阅读源代码。它只是一个很小的文档化的文件，所以它不应该花费很长时间，而且人们应该了解实现的烤箱功能。此外，上面章节中所涉及的大多数信息只是对所有这些机制的基本和详细描述。</p><p>在考虑这个特定的插件之前，必须正确构建和安装 Sysrepo。完成之后，您必须首先安装模型，然后安装插件。为了安装模型，可以使用 sysrepoctl。然后，您必须将共享库放入 liboven。进入插件路径。</p><p>之后，您应该准备启动 <code>sysrepo-plugind</code>，它将加载插件。如果您启用了调试消息，您应该会看到烤箱插件已成功初始化。</p><p>现在您可以自由地使用烤箱配置、rpc和通知了。它应该像YANG模型中描述的那样工作，以及人们期望烤箱如何工作。下面是一个用例：</p><ol><li><p>作为第一步，使用 notif 订阅示例订阅烤箱通知</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notif_subscribe_example oven</span><br></pre></td></tr></table></figure></li><li><p>准备好待烤箱温度达到一定温度后放入的食物，稍后再进行配置。烤箱默认是关闭的。在NETCONF术语中，执行插入-食物 RPC。您可以使用 sysrepocfg 实现这一点</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p> 和输入：</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert-food</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:sysrepo:oven&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">time</span>&gt;</span>on-oven-ready<span class="tag">&lt;/<span class="name">time</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert-food</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 作为 RPC 内容。您应该会看到一些信息 sysrepo-plugind 输出。</p></li><li><p>现在你要打开烤箱，期待当它达到设定的温度时得到通知。同时，食物应该在那个时候插入。所以,你执行</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --datastore running</span></span><br></pre></td></tr></table></figure><p> 与内容</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">oven</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:sysrepo:oven&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">turned-on</span>&gt;</span>true<span class="tag">&lt;/<span class="name">turned-on</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">temperature</span>&gt;</span>200<span class="tag">&lt;/<span class="name">temperature</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">oven</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在~4秒后，你应该收到通知。您还可以验证是否一切正常</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span> --xpath /oven:*</span></span><br></pre></td></tr></table></figure><p> 食物应该放在烤箱里。</p></li><li><p>一旦你认为食物烤得恰到好处，就用另一个RPC移走它</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p> 和</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">remove-food</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:sysrepo:oven&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-9-Oven-Daemon"><a href="#3-9-Oven-Daemon" class="headerlink" title="3.9 Oven Daemon"></a>3.9 Oven Daemon</h3><p>如果您希望您的设备有一个独立的守护进程，它将作为独立的进程运行，而不使用 sysrepo-plugind，那么您不需要开发插件。拥有一个独立的守护进程实际上只有上一句中提到的几个区别。</p><p>至于代码本身，不需要特定的函数，因为代码将编译为可执行二进制文件而不是共享库。但是，如果要将插件转换为应用程序，没有什么可以阻止重用整个代码。</p><p>所需要的只是一个 <code>main()</code> 函数，该函数将在开始处调用 <code>sr_plugin_init_cb()</code> 并在终止之前调用<code>sr_plugin_cleanup_cb()</code>。 此外，这些功能需要 Sysrepo 会话。 要创建一个，我们首先需要一个连接。 因此，使用 <code>sr_connect()</code> 创建连接，如果成功，则使用 <code>sr_session_start()</code> 创建会话。 现在，可以通过调用清除函数并释放会话和连接来调用 init 函数并在守护程序终止时正确地进行清理。 此外，在编译此类应用程序之前，必须更改打印宏，因为将不再有处理打印消息的主守护程序。 完成这些更改后，烤箱守护程序应已准备就绪。</p><h1 id="B4860-环境编译-libyang"><a href="#B4860-环境编译-libyang" class="headerlink" title="B4860 环境编译 libyang"></a>B4860 环境编译 libyang</h1><p>下载：<a href="https://github.com/CESNET/libyang/releases">libyang release</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">tar -zxvf libyang-1.0.184.tar.gz</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libyang-1.0.184</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build; <span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake -DCMAKE_INSTALL_PREFIX:PATH=`<span class="built_in">pwd</span>`/4860lib -DCMAKE_BUILD_TYPE:String=<span class="string">&quot;Release&quot;</span> ..</span></span><br><span class="line"><span class="meta prompt_">$ </span></span><br></pre></td></tr></table></figure><p>更改扩展插件目录</p><p>对于 YANG 扩展，libyang 允许加载扩展插件。 默认情况下，存储插件的目录是 <code>libdir/libyang</code>。 要更改它，使用env环境更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_EXTENSIONS_PLUGINS_DIR=`<span class="built_in">pwd</span>`/my/relative/path yanglint</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">LIBYANG_USER_TYPES_PLUGINS_DIR=`<span class="built_in">pwd</span>`/my/relative/path yanglint</span></span><br></pre></td></tr></table></figure><h1 id="netopeer2-sysrepo研究总结"><a href="#netopeer2-sysrepo研究总结" class="headerlink" title="netopeer2 + sysrepo研究总结"></a>netopeer2 + sysrepo研究总结</h1><blockquote><p><a href="https://blog.csdn.net/xuguozheng110/article/details/104043039">netopeer2 + sysrepo研究总结</a></p></blockquote><h2 id="sysrepo是干什么的"><a href="#sysrepo是干什么的" class="headerlink" title="sysrepo是干什么的"></a>sysrepo是干什么的</h2><p>sysrepo是一个数据库。可以用来保存可读可写的配置，例如 IP,netmask。你可以坐在家里，给远端的设备的sysrepo下修改配置命令。另外远端设备还有一些只读的状态，也可以读回来，例如温度。</p><h2 id="sysrepo的订阅功能"><a href="#sysrepo的订阅功能" class="headerlink" title="sysrepo的订阅功能"></a>sysrepo的订阅功能</h2><p>订阅实际上就是回调函数。</p><p>例如我们的程序告诉sysrepo，我们要订阅 &#x2F;net&#x2F;eth0&#x2F;ip 这个 xml 地址，当有人发消息给 sysrepo，写这个路径时，sysrepo就会告诉我们这个 xml 发生变化了，我们就执行实际的操作。</p><h2 id="sysrepo的修改配置"><a href="#sysrepo的修改配置" class="headerlink" title="sysrepo的修改配置"></a>sysrepo的修改配置</h2><p>修改配置用写xml路径的方法, 例如写xml路径&#x2F;net&#x2F;eth0&#x2F;ip，那么sysrepo就会把修改的信息写到此路径中，保存到sysrepo的数据库中。</p><p>但是sysrepo并没有去做修改ip的实际工作，这个实际工作是怎么完成的呢？sysrepo提供了一个回调函数，我们只要把这个回调函数写好就行。当写xml路径时，sysrepo就会调用回调函数，完成实际的工作。sysrepo实际只是保存配置，并调用回调函数这两件事。</p><p>完成一个修改配置的操作，共需要3个程序，一个是发命令的程序，一个收命令的sysrepo，另外我们自己还要写个程序，接收sysrepo发过来的修改配置的路径，我们自己的程序发现是要修改ip的路径，那么就改ip了。</p><h2 id="sysrepo返回状态"><a href="#sysrepo返回状态" class="headerlink" title="sysrepo返回状态"></a>sysrepo返回状态</h2><p>和 2 类似，我们的程序收到读某个路径的消息，就把数据写到指定路径中就可以</p><h2 id="如何下载安装"><a href="#如何下载安装" class="headerlink" title="如何下载安装"></a>如何下载安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/sysrepo/sysrepo.git</span></span><br></pre></td></tr></table></figure><p>Sysrepo&#x2F;Netopeer2 tools and programs:</p><ul><li>sysrepoctl</li><li>sysrepocfg</li><li>sysrepod</li><li>sysrepo-plugind</li><li>netopeer2-cli</li><li>netopeer2-server</li></ul><p><img data-src="/images/images_sr/syarepo-install.png"></p><h2 id="基于YANG模型的数据库sysrepo介绍"><a href="#基于YANG模型的数据库sysrepo介绍" class="headerlink" title="基于YANG模型的数据库sysrepo介绍"></a>基于YANG模型的数据库sysrepo介绍</h2><p>多数linux的应用程序需要有配置，配置文件的保存和读写通常的实现方式是通过操作文件来完成的。各应用程序都自定配置文件的格式，格式风格存在诸多差异。</p><p>Sysrepo是一个基于YANG模型的配置和操作数据库，为应用程序提供一致的操作数据的接口，解决了配置读写困难的问题。应用程序使用YANG模型来建模，这样就可以利用YANG模型完成数据合法性的检查，保证的风格的一致，不需要应用程序直接操作配置文件了。</p><p><img data-src="/images_sr/high_level_architecture.png"></p><p>SYSREPO数据库它提供了以下特性:</p><ul><li>模型配置文件和状态数据的集中存储</li><li>应用程序可以通过XPATH访问配置</li><li>支持启动、运行和临时数据存储</li><li>支持事务，符合ACID</li><li>根据YANG模型，进行数据一致性和约束的检查</li><li>没有单一故障点，应用程序不需要运行任何其他进程来访问其配置</li></ul><h1 id="Sysrepo-常用操作"><a href="#Sysrepo-常用操作" class="headerlink" title="Sysrepo 常用操作"></a>Sysrepo 常用操作</h1><p>sysrepo 提供两个独立的，非常实用的程序。方便开发者便捷地使用 sysrepo 来开发与调试自己的应用。</p><h2 id="sysrepoctl"><a href="#sysrepoctl" class="headerlink" title="sysrepoctl"></a>sysrepoctl</h2><p>sysrepoctl，它用于列出，安装，卸载或更新 sysrepo 模块，也能用于修改一个 sysrepo 模块的特性，权限等。开发过程中经常使用的命令如下</p><ol><li>列出全部已经安装在 sysrepo 中的 Yang 模块，并包含模块的基本信息</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -l, --list</span></span><br></pre></td></tr></table></figure><ol start="2"><li>安装指定Yang模型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -i， --install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang  <span class="comment"># 以默认权限安装ietf-interfaces模型</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --install /root/ietf-interfaces.yang --owner=admin:admin --permissions=644   <span class="comment"># 为特定admin用户安装可访问权限为644的ietf-interfaces.yang模型</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>卸载已安装的 Yang 模型</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -u, --uninstall</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --uninstall ietf-interfaces</span></span><br></pre></td></tr></table></figure><ol start="4"><li>修改 Yang 模型，常用的是设置模型支持的特性</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -c, --chang</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --change ietf-interfaces --(<span class="built_in">disable</span>|<span class="built_in">enable</span>)-feature if-mib</span></span><br></pre></td></tr></table></figure><ol start="5"><li>更新 Yang 模型，如果已安装的 Yang 模型有更新，可以执行该命令</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl -U, --update</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepoctl --update /root/ietf-netconf@2013-09-29.yang</span></span><br></pre></td></tr></table></figure><h2 id="sysrepocfg"><a href="#sysrepocfg" class="headerlink" title="sysrepocfg"></a>sysrepocfg</h2><p>sysrepocfg 是用于 importing，exporting，exporting，replacing 配置到指定的数据库中。命令默认是操作running 库，也支持多种数据格式：json, xml, lyb，除非通过 <code>–format</code> 特定指出，默认的采用 xml 格式。常用的命令如下:</p><ol><li>导入一个配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -I, --import[=]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces.xml   <span class="comment"># 将ietf-interfaces配置导入默认running下的ietf-interfaces模块</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --import=/root/ietf-interfaces_startup.json --datastore startup --module ietf-interfaces  <span class="comment"># 将json格式的ietf-interfaces配置导入startup的ietf-interfaces模块</span></span></span><br></pre></td></tr></table></figure><ol start="2"><li>导出一个配置</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -X, --<span class="built_in">export</span>[=]</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --<span class="built_in">export</span>=ietf-interfaces_running.xml --format xml --module ietf-interfaces <span class="comment"># 将running库ietf-interfaces 的配置xml的格式导出，并以ietf-interfaces_running.xml名字命令配置文件</span></span></span><br></pre></td></tr></table></figure><ol start="3"><li>编辑或修改配置文件，应用到指定的数据库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -E, --edit[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=candidate.xml --datastore candidate   <span class="comment"># 如果是修改running库，需要加相应的锁</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --edit=vim --lock</span></span><br></pre></td></tr></table></figure><ol start="4"><li>发一个RPC请求，RPC返回的结果直接输出于终端</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg -R, --rpc[=/]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepocfg --rpc=vim</span></span><br></pre></td></tr></table></figure><p>更多sysrepocfg的使用，请参考sysrepocfg -h。</p><h1 id="o-hub-netconf-相关开发"><a href="#o-hub-netconf-相关开发" class="headerlink" title="o-hub netconf 相关开发"></a>o-hub netconf 相关开发</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> /tmp/o-ran-software-management.so /usr/lib/sysrepo/plugins/</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sysrepo-plugind -d -v 4</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer2-server -d -v 3</span></span><br></pre></td></tr></table></figure><p>o-hub software download xml fotmat:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/* sftp://<span class="tag">&lt;<span class="name">username</span>&gt;</span>@<span class="tag">&lt;<span class="name">host</span>&gt;</span>[:<span class="tag">&lt;<span class="name">port</span>&gt;</span>]/path */ </span><br><span class="line"><span class="tag">&lt;<span class="name">software-download</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:o-ran:software-management:1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">remote-file-path</span>&gt;</span>sftp://sftp-admin@192.168.2.76:sysupgrade-BaiHub_1.0.4.bin<span class="tag">&lt;/<span class="name">remote-file-path</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">password</span>&gt;</span>123456<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">software-download</span>&gt;</span></span><br></pre></td></tr></table></figure><p>o-hub software install xml fotmat：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">software-install</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:o-ran:software-management:1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-name</span>&gt;</span>system_slot<span class="tag">&lt;/<span class="name">slot-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">file-names</span>&gt;</span>test_file<span class="tag">&lt;/<span class="name">file-names</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">software-install</span>&gt;</span></span><br></pre></td></tr></table></figure><p>o-hub software activate xml fotmat：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">software-activate</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:o-ran:software-management:1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">slot-name</span>&gt;</span>system_slot<span class="tag">&lt;/<span class="name">slot-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">software-activate</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="B4860-4G-HUB-级连口-T14-测量问题查看方式"><a href="#B4860-4G-HUB-级连口-T14-测量问题查看方式" class="headerlink" title="B4860 4G HUB 级连口 T14 测量问题查看方式"></a>B4860 4G HUB 级连口 T14 测量问题查看方式</h1><h3 id="1-首先查看级联口是否存在链路闪断或者异常"><a href="#1-首先查看级联口是否存在链路闪断或者异常" class="headerlink" title="1) 首先查看级联口是否存在链路闪断或者异常"></a>1) 首先查看级联口是否存在链路闪断或者异常</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x1000 0x20  <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看 1002的 bit7~4，如果是4 ，表示是稳定的</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x1070 0x20  <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看1078 107a 107c 107e  4个寄存器是否有变化，没变化表示cpri状态ok的</span></span><br></pre></td></tr></table></figure><h3 id="2-若-1-状态ok，则开始读取-T14-的值"><a href="#2-若-1-状态ok，则开始读取-T14-的值" class="headerlink" title="2) 若 1) 状态ok，则开始读取 T14 的值"></a>2) 若 1) 状态ok，则开始读取 T14 的值</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x1040 0x20  <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看 1040 和 1042 ，这两个值就是 T14 测量的值</span></span><br></pre></td></tr></table></figure><h3 id="3-若-1-状态不-ok，则开始读取上联口的-CPRI-状态"><a href="#3-若-1-状态不-ok，则开始读取上联口的-CPRI-状态" class="headerlink" title="3) 若 1) 状态不 ok，则开始读取上联口的 CPRI 状态"></a>3) 若 1) 状态不 ok，则开始读取上联口的 CPRI 状态</h3> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x0000 0x20   <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看 1002的 bit7~4，如果是4 ，表示是稳定的</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">mpi_read 0x2 0x0070 0x20   <span class="comment"># 读2次</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">主要看1078 107a 107c 107e  4个寄存器是否有变化，没变化表示cpri状态ok的</span></span><br></pre></td></tr></table></figure><h3 id="4-若3-读取看到状态不正常，则需要去查看上联口的光纤连接情况。若-3-看到正常，则需要检测级联端口的连接情况以及下一级-rhub-的情况"><a href="#4-若3-读取看到状态不正常，则需要去查看上联口的光纤连接情况。若-3-看到正常，则需要检测级联端口的连接情况以及下一级-rhub-的情况" class="headerlink" title="4) 若3) 读取看到状态不正常，则需要去查看上联口的光纤连接情况。若 3) 看到正常，则需要检测级联端口的连接情况以及下一级 rhub 的情况"></a>4) 若3) 读取看到状态不正常，则需要去查看上联口的光纤连接情况。若 3) 看到正常，则需要检测级联端口的连接情况以及下一级 rhub 的情况</h3><h1 id="B4860-BU-TO-RU-时延计算"><a href="#B4860-BU-TO-RU-时延计算" class="headerlink" title="B4860 BU TO RU 时延计算"></a>B4860 BU TO RU 时延计算</h1><p>参数说明：</p><ul><li>HUB上联口 Toffset &#x3D; 2 * Cycle ，HUB 级联口 Toffset &#x3D; 3 * Cycle，  HUB下联口 Toffset &#x3D; 53 * Cycle</li><li>RU Toffset &#x3D; 6 * Cycle</li><li>Cycle &#x3D; 8.013ns</li></ul><p><strong>一级HUB BU 到 RU 时延值：</strong></p><p>环境：BU –&gt; HUB –&gt; RU</p><p>1） BU –&gt; HUB  T12</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" title="T12=\left ( T14 - Toffset * Cycle \right ) / 2" /></a></p><ul><li>T14 BBU侧测量值，单位ns</li><li>Toffset &#x3D; 2* Cycle （hub上联口 Toffset）</li></ul><p>2） TBdelayDL –&gt; HUB上联口到对应 RU接HUB下联口的时延值，单位Cycle</p><p>3）HUB –&gt; RU  T12_1</p><p><a href="https://www.codecogs.com/eqnedit.php?latex={T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?{T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" title="{T12}'= \left ( {T14}' - Toffset \right ) / 2 * Cycle" /></a></p><ul><li>T14_1 RU 接 HUB 下联口的 T14 测量值，HUB侧测量值，单位Cycle</li><li>Toffset &#x3D; 6 * Cycle （RU Toffset）</li></ul><p>4） T2a  RU 上报，单位Cycle</p><p>下行 BU 到 RU 时延值：</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=BBU->RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;T2a" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?BBU->RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;T2a" title="BBU->RU DL_{Delay} = T12 + TBdelayDL + {T12}' + T2a" /></a></p><p><strong>二级HUB BU 到 RU 时延值：</strong></p><p>环境：BU –&gt; HUB –&gt; HUB –&gt; RU</p><p>1） BU –&gt; HUB  T12</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?T12=\left&space;(&space;T14&space;-&space;Toffset&space;*&space;Cycle&space;\right&space;)&space;/&space;2" title="T12=\left ( T14 - Toffset * Cycle \right ) / 2" /></a></p><ul><li>T14  BBU侧测量值，单位ns</li><li>Toffset &#x3D; 2 * Cycle （HUB上联口 Toffset）</li></ul><p>2） TBdelayDL –&gt; 一级HUB 上联口到 一级HUB 级联口时延值，单位Cycle</p><p>3） HUB –&gt; HUB  T12_1</p><p><a href="https://www.codecogs.com/eqnedit.php?latex={T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?{T12}'=&space;\left&space;(&space;{T14}'&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" title="{T12}'= \left ( {T14}' - Toffset \right ) / 2 * Cycle" /></a></p><ul><li>T14_1  一级HUB 级联口 到 二级 HUB 上联口 T14，单位Cycle</li><li>Toffset &#x3D; 2 * Cycle （二级HUB上联口 Toffset）</li></ul><p>4）TBdelayDL_1 –&gt; 二级HUB上联口到对应 RU接 二级HUB下联口的时延值，单位Cycle</p><p>5）HUB –&gt; RU  T12_2</p><p><a href="https://www.codecogs.com/eqnedit.php?latex={T12}''&space;=&space;\left&space;(&space;{T14}''&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?{T12}''&space;=&space;\left&space;(&space;{T14}''&space;-&space;Toffset&space;\right&space;)&space;/&space;2&space;*&space;Cycle" title="{T12}'' = \left ( {T14}'' - Toffset \right ) / 2 * Cycle" /></a></p><ul><li>T14_2  RU 接 二级HUB 下联口的 T14 测量值，二级HUB侧测量值，单位Cycle</li><li>Toffset &#x3D; 6 * Cycle （RU Toffset）</li></ul><p>6） T2a  RU 上报，单位Cycle</p><p>下行 BU 到 RU时延值：</p><p><a href="https://www.codecogs.com/eqnedit.php?latex=BBU&space;->&space;RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;{TBdelayDL}'&space;&plus;&space;{T12}''&space;&plus;&space;T2a" target="_blank"><img data-src="https://latex.codecogs.com/gif.latex?BBU&space;->&space;RU&space;DL_{Delay}&space;=&space;T12&space;&plus;&space;TBdelayDL&space;&plus;&space;{T12}'&space;&plus;&space;{TBdelayDL}'&space;&plus;&space;{T12}''&space;&plus;&space;T2a" title="BBU -> RU DL_{Delay} = T12 + TBdelayDL + {T12}' + {TBdelayDL}' + {T12}'' + T2a" /></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">snmptrap -v1 -c public 192.168.2.124 .1.3.6.1.4.1.1 192.168.2.125 6 10 100 1.3.6.1.9.9.44.1.2.1 i 12</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 版本 -c 共同体 TrapServerIP Enterprise-OID AgentIP 陷阱类型 oid 时间 被发送参数的OID  数据类型 值</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">i  整形 u  无符号型    c  COUNTER32    s  字符串   x  16进制字符串   d  10进制字符串  n  空对象 o  对象ID  t  计时器  a  IP地址 b  比特</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Generic Type包括7种, 分别是:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">0  coldStart  1  warmStart  2  linkDown  3  linkUp 4  authenticationFailure          5  egpNeighborLoss        6  enterpriseSpecific</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><blockquote><p><a href="https://github.com/CESNET/libyang">libyang – GitHub</a></p><p><a href="https://github.com/CESNET/netopeer2">netopeer2 – GitHub</a></p><p><a href="https://github.com/sysrepo/sysrepo">sysrepo – GitHub</a></p></blockquote><blockquote><p><a href="https://netopeer.liberouter.org/doc/libyang/master/index.html">libyang – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/libnetconf2/devel/index.html">libnetconf2 – Doc</a></p><p><a href="https://netopeer.liberouter.org/doc/sysrepo/master/index.html">sysrepo – Doc</a></p><p><a href="https://www.runoob.com/xpath/xpath-tutorial.html">XPath 教程 – RUNOOB.COM</a></p><p><a href="https://www.yiibai.com/xpath">XPath教程 – 易百教程</a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/xuguozheng110/article/details/104043039">netopeer2 + sysrepo研究总结</a></p><p><a href="https://blog.csdn.net/qq_27923047/article/details/108069409">sysrepo简单使用</a></p><p><a href="https://blog.csdn.net/m0_47413019/article/details/105867406">第三章 sysrepo-plugind源码分析</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Netopper2-安装&quot;&gt;&lt;a href=&quot;#Netopper2-安装&quot; class=&quot;headerlink&quot; title=&quot;Netopper2 安装&quot;&gt;&lt;/a&gt;Netopper2 安装&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;环境 centos&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-基础软件安装&quot;&gt;&lt;a href=&quot;#1-基础软件安装&quot; class=&quot;headerlink&quot; title=&quot;1. 基础软件安装&quot;&gt;&lt;/a&gt;1. 基础软件安装&lt;/h2&gt;</summary>
    
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/categories/Netconf/"/>
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>netconf note</title>
    <link href="http://miaopei.github.io/2020/09/21/Netconf/netconf-note/"/>
    <id>http://miaopei.github.io/2020/09/21/Netconf/netconf-note/</id>
    <published>2020-09-21T13:50:28.000Z</published>
    <updated>2024-05-31T01:39:59.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Netconf-学习笔记"><a href="#Netconf-学习笔记" class="headerlink" title="Netconf 学习笔记"></a>Netconf 学习笔记</h1><h2 id="1-Netconf简介"><a href="#1-Netconf简介" class="headerlink" title="1. Netconf简介"></a>1. Netconf简介</h2><p>随着SDN的大热，一个诞生了十年之久的协议焕发了第二春，它就是NETCONF协议。如果你在两年前去搜索NETCONF协议，基本得到的信息都是“这个协议是一个网管协议，主要目的是弥补SNMP协议的不足，希望可以取代SNMP协议”。SNMP有哪些不足，而NETCONF是否真的能够弥补，这都不是重点，重点是NETCONF诞生至今SNMP依旧活的好好的。所以如果我们还是把NETCONF当做一个网管协议的话，估计它会在冷板凳上一直坐下去，而如果我们换一个角度去看待NETCONF协议，你会发现也许它是最适合SDN的一个协议。</p><span id="more"></span><p>NETCONF的自动化配置系统采用Client&#x2F;Server架构，而netopeer即实现了netconf的C&#x2F;S框架的开源项目。</p><p>Netopeer是基于开源项目libnetconf库完成的，已实现client和server端的代码。主要涉及的组件为netopeer-cli和netopeer-server；其中netopeer-cli为一个CLI程序，允许通过该程序连接到netconfserver，和操纵它的配置数据；netopeer-server为一个netconf服务器端的守护进程，允许与netconf client建立连接，接收配置数据等操作。除了这两个重要的模块，netopeer项目还包含了libnetconf transAPI模块举例，位于项目源码transAPI&#x2F;路径下，例如cfgsystem模块，实现的是一个ietf-system数据模型。</p><h2 id="2-Netconf架构"><a href="#2-Netconf架构" class="headerlink" title="2. Netconf架构"></a>2. Netconf架构</h2><p>NETCONF是一个基于XML的交换机配置接口，用于替代CLI、SNMP等配置交换机。</p><blockquote><p>本质上来说,NETCONF就是利用XML-RPC的通讯机制实现配置客户端和配置服务端之间的通信，实现对网络设备的配置和管理。</p></blockquote><p>NETCONF分为四个层：安全传输层、消息层、操作层、内容层。</p><p><img data-src="/images/images_netconf/netconf-layer-model-1.png" alt="NETCONF Layering Model And Examplel"></p><ul><li><p><strong>安全传输层</strong>：用于跟交换机安全通信，NETCONF并未规定具体使用哪种传输层协议，所以可以使用SSH、TLS、HTTP等各种协议</p></li><li><p><strong>消息层</strong>：提供一种传输无关的消息封装格式，用于RPC通信</p></li><li><p><strong>操作层</strong>：定义了一系列的RPC调用方法，并可以通过Capabilities来扩展</p></li><li><p><strong>内容层</strong>：定义RPC调用的数据内容</p></li></ul><p>NETCONF关键技术实现：</p><blockquote><p>关键的环节包括：安全认证、建立加密传输通道、rpc-xml消息收发、rpc-xml文件解析、rpc-reply消息的生成。</p></blockquote><h2 id="3-Netconf环境搭建"><a href="#3-Netconf环境搭建" class="headerlink" title="3. Netconf环境搭建"></a>3. Netconf环境搭建</h2><p>基于centos7搭建环境：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libtool</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libxml2-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libxslt-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libcurl-devel</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install python-setuptools</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install pkg-config</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install readline-devel</span></span><br></pre></td></tr></table></figure><h3 id="pyang-编译安装"><a href="#pyang-编译安装" class="headerlink" title="pyang 编译安装"></a>pyang 编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/mbj4668/pyang.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> pyang</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">python setup.py install</span></span><br></pre></td></tr></table></figure><h3 id="libssh-0-6-4-编译安装"><a href="#libssh-0-6-4-编译安装" class="headerlink" title="libssh (&gt;&#x3D;0.6.4) 编译安装"></a>libssh (&gt;&#x3D;0.6.4) 编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum install libssh-devel</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://git.libssh.org/projects/libssh.git libssh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libssh</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> build</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">cmake ..</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> ..</span></span><br></pre></td></tr></table></figure><h3 id="libnetconf-编译安装"><a href="#libnetconf-编译安装" class="headerlink" title="libnetconf 编译安装"></a>libnetconf 编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/libnetconf.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> libnetconf</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><h3 id="netopeeran编译安装"><a href="#netopeeran编译安装" class="headerlink" title="netopeeran编译安装"></a>netopeeran编译安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CESNET/netopeer.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装netopeer-server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> netopeer/server</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译安装netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> netopeer/cli</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br></pre></td></tr></table></figure><h3 id="netopeer-启动与验证"><a href="#netopeer-启动与验证" class="headerlink" title="netopeer 启动与验证"></a>netopeer 启动与验证</h3><p>启动netopeer server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-server -d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认监听端口x.x.x.x:830，连接的用户名密码为系统用户</span></span><br></pre></td></tr></table></figure><p>验证 netopeer-cli 与 netopeer-server 连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">connect localhost</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config startup</span></span><br></pre></td></tr></table></figure><p>其它操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a) 配置netopeer server模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-configurator</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">b) 检查默认启动的模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br></pre></td></tr></table></figure><h2 id="4-Netconf案例使用"><a href="#4-Netconf案例使用" class="headerlink" title="4. Netconf案例使用"></a>4. Netconf案例使用</h2><h3 id="工具lnctool"><a href="#工具lnctool" class="headerlink" title="工具lnctool"></a>工具lnctool</h3><p>假设经过第一步后成功编译出libnetconf和netopeer，这样我们就可以直接运行netopeer。netconf默认监听端口是830端口。</p><p>众所周知，netconf协议支持自定义rpc，因此此步骤需要做的是如何在现有netconf中增加自己的yang模型以及执行自己的rpc？？</p><p>这里就需要用到这个工 <code>lnctool</code>。这个工具是用python实现的，里面代码也比较简单，比如说调用其他应用程序（pyang）或者直接写文件。</p><p><img data-src="/images/images_netconf/lnctool%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8.png" alt="lnctool工具使用"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lnctool --model ./turing-machine.yang transapi --paths ./path</span></span><br></pre></td></tr></table></figure><p>另外一个重点是就是实现源文件中相关接口—rpc函数。当经过以上两个步骤之后，就可以进行编译，默认编译出动态库.so文件。</p><p>当我们把rpc函数实现之后，就可以通过另外一个工具，netopeer-manager安装自定义模型，使用命令行如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name [module name]  --model  [model path]  --transapi  [model share library]  --datastore [module datastore file]</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name turing-machine --model /usr/local/etc/netopeer/turing-machine/turing-machine.yin --transapi /usr/local/lib/turing-machine.so --datastore /usr/local/etc/netopeer/turing-machine/datastore.xml</span></span><br></pre></td></tr></table></figure><h3 id="turing-machine-demo"><a href="#turing-machine-demo" class="headerlink" title="turing-machine demo"></a>turing-machine demo</h3><h4 id="1-编译-turing-machine"><a href="#1-编译-turing-machine" class="headerlink" title="1. 编译 turing-machine"></a>1. 编译 turing-machine</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">autoreconf --force --install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br></pre></td></tr></table></figure><h4 id="2-检查-xml"><a href="#2-检查-xml" class="headerlink" title="2. 检查 xml"></a>2. 检查 xml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/etc/netopeer/cfgnetopeer/datastore.xml</span> </span><br><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;datastores xmlns=&quot;urn:cesnet:tmc:datastores:file&quot;&gt;</span><br><span class="line">  &lt;running lock=&quot;&quot;&gt;</span><br><span class="line">    &lt;netopeer xmlns=&quot;urn:cesnet:tmc:netopeer:1.0&quot;&gt;</span><br><span class="line">      &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;</span><br><span class="line">          &lt;name&gt;turing-machine&lt;/name&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line">      &lt;/modules&gt;</span><br><span class="line">    &lt;/netopeer&gt;</span><br><span class="line">  &lt;/running&gt;</span><br><span class="line">  &lt;startup lock=&quot;&quot;&gt;</span><br><span class="line">    &lt;netopeer xmlns=&quot;urn:cesnet:tmc:netopeer:1.0&quot;&gt;</span><br><span class="line">      &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;</span><br><span class="line">          &lt;name&gt;turing-machine&lt;/name&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line">      &lt;/modules&gt;</span><br><span class="line">    &lt;/netopeer&gt;</span><br><span class="line">  &lt;/startup&gt;</span><br><span class="line">  &lt;candidate lock=&quot;&quot; modified=&quot;false&quot; locktime=&quot;&quot;&gt;</span><br><span class="line">    &lt;netopeer xmlns=&quot;urn:cesnet:tmc:netopeer:1.0&quot;&gt;</span><br><span class="line">      &lt;modules&gt;</span><br><span class="line">        &lt;module&gt;</span><br><span class="line">          &lt;name&gt;turing-machine&lt;/name&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/module&gt;</span><br><span class="line">      &lt;/modules&gt;</span><br><span class="line">    &lt;/netopeer&gt;</span><br><span class="line">  &lt;/candidate&gt;</span><br><span class="line">&lt;/datastores&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/etc/netopeer/cfgnetopeer/datastore-server.xml</span> </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;datastores xmlns=&quot;urn:cesnet:tmc:datastores:file&quot;&gt;</span><br><span class="line">  &lt;running lock=&quot;&quot;/&gt;</span><br><span class="line">  &lt;startup lock=&quot;&quot;/&gt;</span><br><span class="line">  &lt;candidate modified=&quot;false&quot; lock=&quot;&quot; locktime=&quot;&quot;/&gt;</span><br><span class="line">&lt;/datastores&gt;</span><br></pre></td></tr></table></figure><h4 id="3-安装模块"><a href="#3-安装模块" class="headerlink" title="3. 安装模块"></a>3. 安装模块</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">su root</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> turing-machine.yin /usr/local/etc/netopeer/turing-machine/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> .libs/turing-machine.so /usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> turing-machine.la /usr/local/lib</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name turing-machine --model /usr/local/etc/netopeer/turing-machine/turing-machine.yin --transapi /usr/local/lib/turing-machine.so --datastore /usr/local/etc/netopeer/turing-machine/datastore.xml</span></span><br></pre></td></tr></table></figure><h4 id="4-netopeer-manager-list"><a href="#4-netopeer-manager-list" class="headerlink" title="4. netopeer-manager list"></a>4. netopeer-manager list</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br><span class="line">Reading the configuration from /usr/local/etc/netopeer/modules.conf.d/</span><br><span class="line">List of startup Netopeer modules:</span><br><span class="line">turing-machine (enabled)</span><br></pre></td></tr></table></figure><h4 id="5-启动-netopeer-server"><a href="#5-启动-netopeer-server" class="headerlink" title="5. 启动 netopeer-server"></a>5. 启动 netopeer-server</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-server -v 3</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h4 id="6-启动-netopeer-cli"><a href="#6-启动-netopeer-cli" class="headerlink" title="6. 启动 netopeer-cli"></a>6. 启动 netopeer-cli</h4><p>使用命令:</p><ul><li>connect 192.168.205.98 </li><li>get </li><li>lock candidate </li><li>edit-config candidate</li><li>commit </li><li>unlock candidate </li><li>get-config running Get-config </li><li>edit-config candidate</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">connect 192.168.205.98</span></span><br><span class="line">The authenticity of the host &#x27;192.168.205.98&#x27; cannot be established.</span><br><span class="line">ssh-rsa key fingerprint is 9f:c8:f9:13:7d:04:b8:18:e9:4d:4e:9c:cb:63:84:17:0b:d9:ad:6a.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">root@192.168.205.98 password: </span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get</span></span><br><span class="line">......</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">lock candidate</span></span><br><span class="line">  Result OK</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">debug</span></span><br><span class="line">Verbose level set to DEBUG</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=merge --config=/root/turing.xml candidate</span></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:34:38 Writing message (session 1): </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;3&quot;&gt;</span><br><span class="line">  &lt;edit-config&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;default-operation&gt;merge&lt;/default-operation&gt;</span><br><span class="line">    &lt;config&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot; xmlns:xc=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;&gt;</span><br><span class="line">        &lt;transition-function xc:operation=&quot;merge&quot;&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">  &lt;/edit-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:34:38 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;3&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Result OK</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">commit</span></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:35: 9 Writing message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;4&quot;&gt;</span><br><span class="line">  &lt;commit/&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:35: 9 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;4&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Result OK</span><br></pre></td></tr></table></figure><h4 id="7-check-datastore-xml"><a href="#7-check-datastore-xml" class="headerlink" title="7. check datastore.xml"></a>7. check datastore.xml</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /usr/local/etc/netopeer/turing-machine/datastore.xml</span> </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;datastores xmlns=&quot;urn:cesnet:tmc:datastores:file&quot;&gt;</span><br><span class="line">  &lt;running lock=&quot;&quot;&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/running&gt;</span><br><span class="line">  &lt;startup lock=&quot;&quot;/&gt;</span><br><span class="line">  &lt;candidate modified=&quot;true&quot; lock=&quot;1&quot; locktime=&quot;2018-01-26T06:33:55Z&quot;&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/candidate&gt;</span><br><span class="line">&lt;/datastores&gt;</span><br></pre></td></tr></table></figure><p>OK, unlock candidate:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">unlock candidate</span></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:38: 4 Writing message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;unlock&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">  &lt;/unlock&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: 4984-D  1-26 14:38: 4 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  Result OK</span><br><span class="line"><span class="meta prompt_">netconf&gt; </span></span><br></pre></td></tr></table></figure><p>unlock is successfully</p><p>server’s output:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[4981]: 4981-D  1-26 14:38: 4 11--Received message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;unlock&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">  &lt;/unlock&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line">netopeer-server[4981]: 4981-V  1-26 14:38: 4 Created dummy session 0 for user &#x27;root&#x27; (UID 0) - recovery session</span><br><span class="line">netopeer-server[4981]: 4981-V  1-26 14:38: 4 Created dummy session 0 for user &#x27;root&#x27; (UID 0) - recovery session</span><br><span class="line">netopeer-server[4981]: 4981-D  1-26 14:38: 4 Adding new event (0)</span><br><span class="line">netopeer-server[4981]: 4981-V  1-26 14:38: 4 Created dummy session 0 for user &#x27;root&#x27; (UID 0) - recovery session</span><br><span class="line">netopeer-server[4981]: 4981-D  1-26 14:38: 4 Writing message (session 1): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;5&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="turing-machine-demo-get操作案例"><a href="#turing-machine-demo-get操作案例" class="headerlink" title="turing-machine demo get操作案例"></a>turing-machine demo get操作案例</h3><p>running datestore 内容：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">netconf&gt; get-config running</span><br><span class="line"></span><br><span class="line">  Result:</span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>end<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span><span class="tag">&lt;<span class="name">netopeer</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:cesnet:tmc:netopeer:1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">module</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>turing-machine<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">netopeer</span>&gt;</span></span><br><span class="line">netconf&gt;</span><br></pre></td></tr></table></figure><p>准备get xml文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- turing-machine-get-test.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>netopeer-cli 命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">netconf&gt; get --filter=/turing-machine-get-test.xml</span><br><span class="line"></span><br><span class="line">  Result:</span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>netopeer-server log：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[127219]: Received message (session 4): <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rpc</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span> <span class="attr">message-id</span>=<span class="string">&quot;34&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">get</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span> <span class="attr">type</span>=<span class="string">&quot;subtree&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">get</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc</span>&gt;</span></span><br><span class="line">netopeer-server[127219]: Merging the node turing-machine (src/datastore/edit_config.c:2325)</span><br><span class="line">netopeer-server[127219]: Deleting the node turing-machine (src/datastore/edit_config.c:1003)</span><br><span class="line">netopeer-server[127219]: Writing message (session 4): <span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">rpc-reply</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span> <span class="attr">message-id</span>=<span class="string">&quot;34&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">data</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">data</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">rpc-reply</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置netopeer服务器模块"><a href="#配置netopeer服务器模块" class="headerlink" title="配置netopeer服务器模块"></a>配置netopeer服务器模块</h3><p>要查找要添加YANG模块的默认位置，请运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /usr/bin/netopeer-configurator</span></span><br></pre></td></tr></table></figure><p>你可以在[Netopeer]一栏找到以下信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Netopeer]     Using modules installed in path: /usr/local/etc/netopeer/modules.conf.d</span><br></pre></td></tr></table></figure><p>默认情况下，所有模块的XML实例数据(Netopeer调用这个数据存储，不幸的是，使用与NETCONF的运行&#x2F;候选&#x2F;启动数据存储相同的术语)存储在 <code>/usr/local/etc/Netopeer/modules.conf.d</code>中</p><p>当您使用 <code>netopier -manager</code> 添加模块时，<code>—datastore</code> 选项应该指向 <code>/usr/local/etc/netopeer/modules.conf.d</code></p><p>使用 <code>netopier -manager</code> 的例子:</p><p>首先检查哪些模块是默认启用的:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br><span class="line">List of startup Netopeer modules:No module installed.</span><br></pre></td></tr></table></figure><p>没有安装模块。让我们添加一些模块。要添加模型，首先使用PyangNETCONFc转换 <code>.yang</code> 文件 <code>yin文件</code>。Netopeer内部使用 YIN 格式。例如，让我们添加 toaster 数据存储，这样您就可以使用NETCONFc来配置它。</p><p>Download toaster.yang from<a href="http://www.seguesoft.com/get-standard-yang-modules"> http://seguesoft.com/get-standard-yang-modules</a>. Then you can do:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f yin /home/bob/YANG_modules/toaster.yang -o /home/bob/YANG_modules/toaster.yin</span></span><br></pre></td></tr></table></figure><p>Then add toaster.yin’s datastore into Netopeer as follows</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --name toaster --model /home/bob/YANG_modules/toaster.yin --datastore /usr/local/etc/netopeer/modules.conf.d/toaster.xml</span></span><br></pre></td></tr></table></figure><p>对于命令引用类型</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager add --<span class="built_in">help</span></span>     </span><br><span class="line">To actually implement a model, see http://github.com/CESNET/netopeer/tree/master/transAPI/cfgsystem</span><br></pre></td></tr></table></figure><h3 id="操作过程："><a href="#操作过程：" class="headerlink" title="操作过程："></a>操作过程：</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">xml 生成</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f sample-xml-skeleton turing-machine.yang -o turing-machine.xml</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">生成 rpc 接口代码</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">lnctool --model ./turing-machine.yang transapi --paths ./path</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">netconf <span class="built_in">log</span> 接口</span> </span><br><span class="line">nc_verb_verbose(&quot;Miaow: Turing machine transapi_init...&quot;);</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">编译 rpc 模块代码，并安装模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">autoreconf --force --install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">./configure</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">make</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo make install</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查看已安装的模块</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">netopeer-manager list</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">man netopeer-manager</span></span><br></pre></td></tr></table></figure><p>启动服务测试：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /usr/local/bin/netopeer-server -v 3</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo /usr/local/bin/netopeer-cli</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash"><span class="built_in">help</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> Available commands:</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">help</span>            Display this text</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> connect         Connect to a NETCONF server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> listen          Listen <span class="keyword">for</span> a NETCONF Call Home</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> disconnect      Disconnect from a NETCONF server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> commit          NETCONF &lt;commit&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> copy-config     NETCONF &lt;copy-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> delete-config   NETCONF &lt;delete-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> discard-changes NETCONF &lt;discard-changes&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> edit-config     NETCONF &lt;edit-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> get             NETCONF &lt;get&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> get-config      NETCONF &lt;get-config&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> get-schema      NETCONF &lt;get-schema&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> kill-session    NETCONF &lt;kill-session&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> lock            NETCONF &lt;lock&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> unlock          NETCONF &lt;unlock&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> validate        NETCONF &lt;validate&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> <span class="built_in">test</span>            Run a specified <span class="built_in">test</span> <span class="keyword">case</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> subscribe       NETCONF Event Notifications &lt;create-subscription&gt; operation</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> time            Enable/disable measuring time of <span class="built_in">command</span> execution</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> knownhosts      Manage known hosts <span class="keyword">in</span> the <span class="string">&quot;~/.ssh/known_hosts&quot;</span> file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> status          Print information about the current NETCONF session</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> user-rpc        Send your own content <span class="keyword">in</span> an RPC envelope (<span class="keyword">for</span> DEBUG purposes)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> verbose         Enable/disable verbose messages</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> quit            Quit the program</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> auth            Manage SSH authentication options</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> capability      Add/remove capability to/from the list of supported capabilities</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> editor          Manage the editor to be used <span class="keyword">for</span> manual XML pasting/writing</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">connect 127.0.0.1</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get [--<span class="built_in">help</span>] [--defaults report-all|report-all-tagged|trim|explicit] [--filter [file]] [--out file]</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get --filter=/root/turing.xml</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">get-config [--<span class="built_in">help</span>] [--defaults report-all|report-all-tagged|trim|explicit] [--filter [file]] [--out file] running|startup|candidate</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config --filter=/root/turing.xml candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config -h</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">edit-config [--<span class="built_in">help</span>] [--defop &lt;merge|replace|none&gt;] [--error &lt;stop|<span class="built_in">continue</span>|rollback&gt;] [--<span class="built_in">test</span> &lt;<span class="built_in">set</span>|test-only|test-then-set&gt;] [--config &lt;file&gt; | --url &lt;url&gt;] running|startup|candidate</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If neither --config nor --url is specified, user is prompted to <span class="built_in">set</span> edit data manually.</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">lock candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">debug</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=merge --config=/root/turing.xml candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">commit</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">unlock candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">netconf&gt; user-rpc --file=/root/rpc-run.xml</span></span><br></pre></td></tr></table></figure><h2 id="5-turing-machine-操作层示例"><a href="#5-turing-machine-操作层示例" class="headerlink" title="5. turing-machine 操作层示例"></a>5. turing-machine 操作层示例</h2><p>安装好 turing-machine 之后，可以对模块做一些操作，以下为实际的操作过程以及对应的xml编写示例。</p><p><code>&lt;edit-config&gt;</code> 详解：</p><p><strong>描述：</strong></p><p>&#96;&#96;操作将全部或部分指定配置加载到指定的目标配置数据存储。此操作允许以多种方式表示新配置，例如使用本地文件，远程文件或内联。如果目标配置数据存储不存在，它将被创建。</p><p>如果一个<code>NETCONF</code>节点(<code>peer</code>)支持：<code>url</code>能力（<a href="https://tools.ietf.org/html/rfc6241#section-8.8">8.8节</a>），那么<code>元素可以出现而不是</code>参数。</p><p>设备分析源和目标配置并执行所请求的更改。目标配置不一定被替换，就像&#96;&#96;消息一样。而是根据源数据和请求的操作来更改目标配置。</p><p>如果&#96;&#96;操作包含应用于基础数据模型中相同概念节点的多个子操作，则操作的结果是未定义的（即，不在<code>NETCONF协</code>议的范围之内）。</p><p><strong>属性：</strong></p><ul><li><code>operation</code>：<code>子树中的元素可以包含一个“`operation`”属性，它属于[3.1](https://tools.ietf.org/html/rfc6241#section-3.1)节定义的`NETCONF`名称空间。该属性标识配置中的要执行该操作的点，并可以在整个</code>子树中的多个元素上出现。如果未指定“<code>operation</code>”属性，则配置将合并到配置数据存储中。 “<code>operation</code>”属性具有以下值之一：<ul><li><code>merge</code>：由包含此属性的元素标识的配置数据与由&#96;&#96;参数标识的配置数据存储中对应级别的配置合并。这是默认行为。</li><li><code>replace</code>：由包含此属性的元素标识的配置数据将替换由<code>参数标识的配置数据存储区中的任何相关配置。如果配置数据存储中不存在此类配置数据，则会创建它。与替换整个目标配置的</code>操作不同，只有实际存在于&#96;&#96;参数中的配置受到影响。</li><li><code>create</code>：当且仅当配置数据存在于配置数据存储中时，才将包含此属性的元素标识的配置数据添加到配置中。如果配置数据存在，则返回一个<code>值为“`data-exists`”的</code>元素。</li><li><code>delete</code>：当且仅当配置数据当前存在于配置数据存储中时，才从配置中删除由包含此属性的元素标识的配置数据。如果配置数据不存在，则返回一个<code>值为“`data-missing`”的</code>元素。</li><li><code>remove</code>：如果配置数据当前存在于配置数据存储中，则从配置中删除由包含此属性的元素标识的配置数据。如果配置数据不存在，服务器会自动忽略“<code>remove</code>”操作。</li></ul></li></ul><p><strong>参数：</strong></p><ul><li><code>target</code>：正在编辑的配置数据存储的名称，例如<code>或</code>。</li><li><code>default-operation</code>：选择此<code>请求的默认操作（如“`operation`”属性中所述）。 </code>参数的默认值是<code>“merge</code>”。&#96;&#96;参数是可选的，但是如果提供，它具有以下值之一：<ul><li><code>merge</code>：&#96;&#96;参数中的配置数据与目标数据存储中相应级别的配置合并。这是默认行为。</li><li><code>replace</code>：&#96;&#96;参数中的配置数据完全替换了目标数据存储中的配置。这对加载以前保存的配置数据很有用。</li><li><code>none</code>：目标数据存储不受<code>参数中的配置影响，除非和直到传入的配置数据使用“`operation`”属性请求不同的操作。如果</code>参数中的配置包含目标数据存储中没有相应级别的数据，则返回<code>，并带有</code>缺少数据的值。使用“<code>none</code>”允许像“<code>delete</code>”这样的操作避免无意中创建要删除的元素的父层次结构。</li></ul></li><li><code>test-option</code>：只有当设备公布支持<code>:validate:1.1</code>能力时才能指定<code>元素（[8.6节](https://tools.ietf.org/html/rfc6241#section-8.6)）。</code>元素具有以下值之一：<ul><li><code>test-then-set</code>：在尝试设置之前执行验证测试。 如果发生验证错误，请不要执行&#96;&#96;操作。 这是默认的测试选项。</li><li><code>set</code>：先执行一个没有验证测试的设置。</li><li><code>test-only</code>：仅执行验证测试，而不尝试设置。</li></ul></li><li><code>error-option</code>：&#96;&#96;元素具有以下值之一：<ul><li><code>stop-on-error</code>：停止第一个错误的&#96;&#96;操作。这是默认的错误选项。</li><li><code>continue-on-error</code>：继续处理错误的配置数据;记录错误，如果发生任何错误，则产生否定响应。</li><li><code>rollback-on-error</code>：如果发生错误情况，从而生成错误严重性<code>元素，则服务器将停止处理</code>操作，并在指定的开始时将指定的配置恢复到完整状态这个&#96;&#96;操作。该选项要求服务器支持<a href="https://tools.ietf.org/html/rfc6241#section-8.5">8.5节</a>中描述的错误回滚功能。</li></ul></li><li><code>config</code>：配置数据的层次结构，由设备的一个数据模型定义。内容必须放置在适当的命名空间中，以允许设备检测适当的数据模型，并且内容必须遵循该数据模型的约束，如其能力定义所定义。能力在<a href="https://tools.ietf.org/html/rfc6241#section-8">第8节</a>讨论。</li></ul><h3 id="创建实例"><a href="#创建实例" class="headerlink" title="创建实例"></a>创建实例</h3><p><code>turing.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>end<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为 turing-machine 创建实例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=merge --config=/root/turing.xml candidate</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;8&quot;&gt;</span><br><span class="line">  &lt;edit-config&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;default-operation&gt;merge&lt;/default-operation&gt;</span><br><span class="line">    &lt;config&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">        &lt;transition-function&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;1&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;end&lt;/label&gt;</span><br><span class="line">            &lt;input&gt;</span><br><span class="line">              &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">              &lt;symbol/&gt;</span><br><span class="line">            &lt;/input&gt;</span><br><span class="line">            &lt;output&gt;</span><br><span class="line">              &lt;state&gt;1&lt;/state&gt;</span><br><span class="line">            &lt;/output&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">  &lt;/edit-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;8&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p><code>delete-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;remove&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span>&gt;</span>1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>删除 delta 中的一项：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/delete-delta.xml candidate</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;13&quot;&gt;</span><br><span class="line">  &lt;edit-config&gt;</span><br><span class="line">    &lt;target&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/target&gt;</span><br><span class="line">    &lt;default-operation&gt;none&lt;/default-operation&gt;</span><br><span class="line">    &lt;config&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot; xmlns:xc=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;&gt;</span><br><span class="line">        &lt;transition-function&gt;</span><br><span class="line">          &lt;delta xc:operation=&quot;remove&quot;&gt;</span><br><span class="line">            &lt;label&gt;1&lt;/label&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/config&gt;</span><br><span class="line">  &lt;/edit-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;13&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get-config candidate</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;14&quot;&gt;</span><br><span class="line">  &lt;get-config&gt;</span><br><span class="line">    &lt;source&gt;</span><br><span class="line">      &lt;candidate/&gt;</span><br><span class="line">    &lt;/source&gt;</span><br><span class="line">  &lt;/get-config&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;14&quot;&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;end&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol/&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;1&lt;/state&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="创建数据"><a href="#创建数据" class="headerlink" title="创建数据"></a>创建数据</h3><p><code>create-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;create&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 delta 数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/create-delta.xml candidate</span></span><br></pre></td></tr></table></figure><h3 id="合并和替换数据"><a href="#合并和替换数据" class="headerlink" title="合并和替换数据"></a>合并和替换数据</h3><p><code>merge-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;merge&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>1<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>1<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>replace-delta.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span> <span class="attr">xmlns:xc</span>=<span class="string">&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">delta</span> <span class="attr">xc:operation</span>=<span class="string">&quot;replace&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>3<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">output</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">state</span>&gt;</span>0<span class="tag">&lt;/<span class="name">state</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">symbol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">output</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>合并和替换 delta：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/merge-delta.xml candidate</span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">edit-config --defop=none --config=/root/replace-delta.xml candidate</span></span><br></pre></td></tr></table></figure><h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p><code>get-turing.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>get-delta-0.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">turing-machine</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span>&gt;</span>0<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">turing-machine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>获取特定数据：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get --filter=/root/get-turing.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;17&quot;&gt;</span><br><span class="line">  &lt;get&gt;</span><br><span class="line">    &lt;filter type=&quot;subtree&quot;&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">&lt;/turing-machine&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">  &lt;/get&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;17&quot;&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;1&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;end&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol/&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;1&lt;/state&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">      &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">      &lt;head-position&gt;0&lt;/head-position&gt;</span><br><span class="line">      &lt;tape&gt;</span><br><span class="line">        &lt;cell&gt;</span><br><span class="line">          &lt;coord&gt;0&lt;/coord&gt;</span><br><span class="line">          &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">        &lt;/cell&gt;</span><br><span class="line">      &lt;/tape&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">get --filter=/root/get-delta-0.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;18&quot;&gt;</span><br><span class="line">  &lt;get&gt;</span><br><span class="line">    &lt;filter type=&quot;subtree&quot;&gt;</span><br><span class="line">      &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">        &lt;transition-function&gt;</span><br><span class="line">          &lt;delta&gt;</span><br><span class="line">            &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;/delta&gt;</span><br><span class="line">        &lt;/transition-function&gt;</span><br><span class="line">      &lt;/turing-machine&gt;</span><br><span class="line">    &lt;/filter&gt;</span><br><span class="line">  &lt;/get&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;18&quot;&gt;</span><br><span class="line">  &lt;data&gt;</span><br><span class="line">    &lt;turing-machine xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">      &lt;transition-function&gt;</span><br><span class="line">        &lt;delta&gt;</span><br><span class="line">          &lt;label&gt;0&lt;/label&gt;</span><br><span class="line">          &lt;input&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;0&lt;/symbol&gt;</span><br><span class="line">          &lt;/input&gt;</span><br><span class="line">          &lt;output&gt;</span><br><span class="line">            &lt;state&gt;0&lt;/state&gt;</span><br><span class="line">            &lt;symbol&gt;1&lt;/symbol&gt;</span><br><span class="line">          &lt;/output&gt;</span><br><span class="line">        &lt;/delta&gt;</span><br><span class="line">      &lt;/transition-function&gt;</span><br><span class="line">    &lt;/turing-machine&gt;</span><br><span class="line">  &lt;/data&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><h3 id="自定义-rpc-方法调用"><a href="#自定义-rpc-方法调用" class="headerlink" title="自定义 rpc 方法调用"></a>自定义 rpc 方法调用</h3><p><code>rpc-initialize.xml </code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">initialize</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tape-content</span>&gt;</span>0<span class="tag">&lt;/<span class="name">tape-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">initialize</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 rpc-initialize ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">user-rpc --file=/root/rpc-initialize.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;19&quot;&gt;</span><br><span class="line">  &lt;initialize xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">    &lt;tape-content&gt;0&lt;/tape-content&gt;</span><br><span class="line">  &lt;/initialize&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;19&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><p>server 响应内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[14444]: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;20&quot;&gt;</span><br><span class="line">  &lt;initialize xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">    &lt;tape-content&gt;0&lt;/tape-content&gt;</span><br><span class="line">  &lt;/initialize&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line">netopeer-server[14444]: Calling initialize RPC function</span><br><span class="line">netopeer-server[14444]: Miaow: Turing machine rpc_initialize...</span><br><span class="line">netopeer-server[14444]: Miaow: Turing machine get_rpc_node...</span><br><span class="line">netopeer-server[14444]: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;20&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><p><code>rpc-run.xml</code> 内容如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">run</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://example.net/turing-machine&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">run</span>&gt;</span></span><br></pre></td></tr></table></figure><p>执行 rpc-run ：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">netconf&gt; </span><span class="language-bash">user-rpc --file=/root/rpc-run.xml</span></span><br><span class="line">libnetconf DEBUG: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;run xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">&lt;/run&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line"></span><br><span class="line">libnetconf DEBUG: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br></pre></td></tr></table></figure><p>server 响应内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">netopeer-server[14444]: Received message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;run xmlns=&quot;http://example.net/turing-machine&quot;&gt;</span><br><span class="line">&lt;/run&gt;</span><br><span class="line">&lt;/rpc&gt;</span><br><span class="line">netopeer-server[14444]: Calling run RPC function</span><br><span class="line">netopeer-server[14444]: Miaow: Turing machine rpc_run...</span><br><span class="line">netopeer-server[14444]: Writing message (session 7): &lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;rpc-reply xmlns=&quot;urn:ietf:params:xml:ns:netconf:base:1.0&quot; message-id=&quot;21&quot;&gt;</span><br><span class="line">  &lt;ok/&gt;</span><br><span class="line">&lt;/rpc-reply&gt;</span><br><span class="line">netopeer-server[14444]: Adding new event (0)</span><br></pre></td></tr></table></figure><h3 id="notification-测试"><a href="#notification-测试" class="headerlink" title="notification 测试"></a>notification 测试</h3><p>TODO</p><h2 id="6-Netconf总结"><a href="#6-Netconf总结" class="headerlink" title="6. Netconf总结"></a>6. Netconf总结</h2><p>Netconf2</p><p>TODO</p><h1 id="Netconf-2-使用介绍"><a href="#Netconf-2-使用介绍" class="headerlink" title="Netconf 2 使用介绍"></a>Netconf 2 使用介绍</h1><h2 id="pyang-工具使用"><a href="#pyang-工具使用" class="headerlink" title="pyang 工具使用"></a>pyang 工具使用</h2><h3 id="yang建模语言及pyang背景简介"><a href="#yang建模语言及pyang背景简介" class="headerlink" title="yang建模语言及pyang背景简介"></a>yang建模语言及pyang背景简介</h3><blockquote><p>YANG（RFC 7950）是NETCONF（RFC 6241）的数据建模语言，由IETF NETMOD WG开发。</p><p>pyang是一个YANG验证器，转换器和代码生成器，用python编写。 它可用于验证YANG模块的正确性，将YANG模块转换为其他格式，以及从模块生成代码。</p></blockquote><p>sdn、nfv盛行的今天，yang建模语言变得越来越重要，它定义于netconf协议，但是却超越了netconf协议本身，在网络世界迸发自己的活力。</p><p>如今最大的开源sdn控制器-opendaylight以yang作为建模语言进行核心模型存储，netconf以及restconf纷纷依靠yang模型定义接口,定义南向模型、北向模型。最具sdn气息的openflow也有个伴侣协议of-config使用yang建模，借助netconf通道下发相关配置。</p><p>yang很重要，但是用好yang可以选择的工具却并不多，pyang就是其中很重要的一个，这是一个由python代码编写的yang语法验证器、转换器以及代码生成器，一些开源软件使用它构建模型校验语法，比如开源netconf agent netopeer，我们作为用户也可以使用它进行语法校验，生成tree、yin等其它格式模型、数据。它是一个命令行，是一个学习好yang之路的一个好用的工具。</p><h3 id="pyang工具特性"><a href="#pyang工具特性" class="headerlink" title="pyang工具特性"></a>pyang工具特性</h3><ul><li>Validate YANG modules.  校验yang模型；</li><li>Convert YANG modules to YIN, and YIN to YANG.  yang和yin模型相互转换</li><li>Translate YANG data models to DSDL schemas, which can be used for validating various XML instance documents. See <a href="https://github.com/mbj4668/pyang/wiki/InstanceValidation">InstanceValidation</a>.  yang模型与dsdl结构模型转化</li><li>Translate YANG data models to XSD.  yang与xsd转化；</li><li>Generate UML diagrams from YANG models. See <a href="https://github.com/mbj4668/pyang/wiki/UMLOutput">UMLOutput</a> for an example.  生成yang模型uml；</li><li>Generate compact tree representation of YANG models for quick visualization. See <a href="https://github.com/mbj4668/pyang/wiki/TreeOutput">TreeOutput</a> for an example.  生成tree来呈现yang的快速视图；</li><li>Generate a skeleton XML instance document from the data model.  生成xml骨架实例；</li><li>Schema-aware translation of instance documents encoded in XML to JSON and vice-versa. See <a href="https://github.com/mbj4668/pyang/wiki/XmlJson">XmlJson</a>.  xml、json实例转换</li><li>Plugin framework for simple development of other outputs, such as code generation.  其他开发输出的框架插件，例如代码生成；</li></ul><h3 id="pyang-命令行简介"><a href="#pyang-命令行简介" class="headerlink" title="pyang 命令行简介"></a>pyang 命令行简介</h3><p>pyang命令行的使用，提供了丰富的文档说明通过pyang –help或者man pyang都能看到非常详细的信息：</p><p><img data-src="/images/images_netconf/pyangCommad.png" alt="pyang 命令行简介"></p><p>普通用户模式转换主要关注如下几个即可：</p><ul><li>-f  输出格式，这里支持的格式包括tree、yang、yin等，用户可以根据需求灵活选择；</li><li>-o 输出文件名；</li><li>-p 输出路径；</li></ul><h3 id="pyang-的yin、yang-模型转化"><a href="#pyang-的yin、yang-模型转化" class="headerlink" title="pyang 的yin、yang 模型转化"></a>pyang 的yin、yang 模型转化</h3><p>pyang的格式 yin和yang转换很简单，按照下面命令完成即可：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f yin -o ietf-yang-types.yin ietf-yang-types.yang</span></span><br></pre></td></tr></table></figure><h3 id="pyang-生成-tree-文件"><a href="#pyang-生成-tree-文件" class="headerlink" title="pyang 生成 tree 文件"></a>pyang 生成 tree 文件</h3><p>tree 文件是 yang 独有的一个文件，主要功能就是为 yang 生成一个快速化的浏览视图.</p><p>如下所示为一个批量处理 yang 文件生成 tree 文件的命令行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang -f tree yangdir/*.yang -o ouputdir/output.tree</span></span><br></pre></td></tr></table></figure><h3 id="yang-语法校验"><a href="#yang-语法校验" class="headerlink" title="yang 语法校验"></a>yang 语法校验</h3><p>因为没有仔细理解功能，这里只是将功能简单尝试了以下，后续有机会再系统的梳理一下这个功能，此处只给出简单的说明：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">pyang  --ietf  test.yang</span></span><br></pre></td></tr></table></figure><h3 id="pyang-小结"><a href="#pyang-小结" class="headerlink" title="pyang 小结"></a>pyang 小结</h3><p>总的来说pyang是我们使用yang的一个必不可少的命令行、工具和插件，这里给出的一只是笔者平时的一些使用经验，它还有许多强大的功能在这里没有一一详述。</p><h2 id="yang-explorer-一个开源的杨浏览器和-RPC-Builder"><a href="#yang-explorer-一个开源的杨浏览器和-RPC-Builder" class="headerlink" title="yang-explorer, 一个开源的杨浏览器和 RPC Builder"></a>yang-explorer, 一个开源的杨浏览器和 RPC Builder</h2><blockquote><p><a href="https://www.kutu66.com/GitHub/article_130134">yang-explorer, 一个开源的杨浏览器和 RPC Builder</a></p></blockquote><blockquote><p>An open-source Yang Browser and RPC Builder Application</p></blockquote><ul><li><p>源代码名称:<strong>yang-explorer</strong></p></li><li><p>源代码网址:<a href="http://www.github.com/CiscoDevNet/yang-explorer">http://www.github.com/CiscoDevNet/yang-explorer</a></p></li><li><p><a href="http://www.github.com/CiscoDevNet/yang-explorer/wiki">yang-explorer源代码文档</a></p></li><li><p><a href="http://www.github.com/CiscoDevNet/yang-explorer/releases">yang-explorer源代码下载</a></p></li></ul><p>Git URL:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git://www.github.com/CiscoDevNet/yang-explorer.git</span></span><br></pre></td></tr></table></figure><p>Git Clone代码到本地:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> http://www.github.com/CiscoDevNet/yang-explorer</span></span><br></pre></td></tr></table></figure><p>Subversion代码到本地:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">svn co --depth empty http://www.github.com/CiscoDevNet/yang-explorer</span></span><br><span class="line">Checked out revision 1.</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> repo</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">svn up trunk</span></span><br></pre></td></tr></table></figure><h3 id="描述开源Yang浏览器和-RPC-Builder应用Yang数据模型实验"><a href="#描述开源Yang浏览器和-RPC-Builder应用Yang数据模型实验" class="headerlink" title="描述开源Yang浏览器和 RPC Builder应用Yang数据模型实验"></a>描述开源Yang浏览器和 RPC Builder应用Yang数据模型实验</h3><p><strong>功能</strong></p><ul><li>从用户界面或者 命令行 上传&#x2F;编译yang模型</li><li>生成 NetConf RPC</li><li>生成 python 示例代码 <strong>[new]</strong></li><li>搜索 yang <strong>[new]</strong></li><li>针对真正的netconf服务器执行 RPC</li><li>将创建的rpc保存到收藏集以便以后使用</li><li>建立模型的依赖关系图</li><li>浏览数据模型树并检查杨属性</li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>MAC，Linux ( Windows 上不支持)</li><li>python 2.7</li><li>pip软件包管理器( <a href="https://pip.pypa.io/en/stable/installing/">https://pip.pypa.io/en/stable/installing/</a> )</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">If already installed, make sure that pip/setuptools are upto date (commands may vary)</span><br><span class="line">pip install --upgrade pip</span><br><span class="line">Ubuntu: sudo pip install --upgrade setuptools</span><br></pre></td></tr></table></figure><ul><li>virtualenv ( 推荐)</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu: sudo apt-get install python-virtualenv</span><br><span class="line">Fedora: sudo dnf install python-virtualenv</span><br><span class="line">MAC: sudo pip install virtualenv</span><br></pre></td></tr></table></figure><ul><li>graphviz ( <a href="http://www.graphviz.org/Download.php">http://www.graphviz.org/Download.php</a> )</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu: sudo apt-get install graphviz</span><br><span class="line">Fedora: sudo dnf install graphviz</span><br><span class="line">MAC: brew install graphviz</span><br></pre></td></tr></table></figure><ul><li>带有最新 Flash 插件的浏览器( 通过 Google Chrome 测试)</li></ul><p>Download 和 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/CiscoDevNet/yang-explorer.git</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> yang-explorer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash setup.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: sudo may be required <span class="keyword">if</span> you <span class="keyword">do</span> not use virtualenv.</span></span><br></pre></td></tr></table></figure><p>有关更多信息，请参见第 7节疑难解答：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">If you get installation error for missing python.h or xmlversion.h try installing</span><br><span class="line">dependency packages:</span><br><span class="line">Ubuntu: sudo apt-get install libxml2-dev libxslt1-dev python-dev zlib1g-dev</span><br><span class="line">Fedora: sudo dnf install libxml2-devel libxslt-devel python-devel zlib-devel</span><br></pre></td></tr></table></figure><p>更新 exising 安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>&lt;install-root&gt;/yang-explorer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash (<span class="keyword">if</span> you have <span class="built_in">local</span> changes)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git stash apply (<span class="keyword">if</span> you have <span class="built_in">local</span> changes)</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash setup.sh</span></span><br></pre></td></tr></table></figure><p>备份数据</p><p>可以从数据目录备份YangExplorer数据，并且可以移植到新服务器上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cp</span> -r &lt;install-root&gt;/yang-explorer/server/data &lt;backup-location&gt;/data</span></span><br></pre></td></tr></table></figure><p>从备份位置还原</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>&lt;install-root&gt;/yang-explorer/server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">move current data to tmp location <span class="built_in">mv</span> data data_old</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">replace data from backup location <span class="built_in">cp</span> -r &lt;backup-location&gt;/data data</span></span><br></pre></td></tr></table></figure><p>运行 YangExplorer, localhost Start 服务器：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span>&lt;install-root&gt;/yang-explorer</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">[sudo]./start.sh &amp;</span> </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: sudo may be required <span class="keyword">if</span> you did not use virtualenv during installation.</span></span><br></pre></td></tr></table></figure><p>Start 资源管理器：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:8088/static/YangExplorer.html</span><br></pre></td></tr></table></figure><p>运行 ip 地址( 共享服务器)  Start 服务器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Determine &lt;ip-address&gt; using if-config<span class="comment"># Add ip-address/port in YangExplorer.html after following line:cd&lt;install-root&gt;/yang-explorer/server/static</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi YangExplorer.html</span></span><br><span class="line"> var flashvars = &#123;&#125;; </span><br><span class="line">+ flashvars.host = &#x27;&lt;ip-address&gt;&#x27;;+ flashvars.port = &#x27;8088&#x27;; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save &amp; quit<span class="comment"># Update ip-address in startup scriptcd&lt;install-root&gt;/yang-explorer</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">vi start.sh</span></span><br><span class="line"> (update HOST variable with &lt;ip-address&gt;)</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">save &amp; quit. /start.sh</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note: sudo may be required <span class="keyword">if</span> you did not use virtualenv during installation.</span></span><br></pre></td></tr></table></figure><p>Start 资源管理器：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://&lt;ip-address&gt;:8088/static/YangExplorer.html</span><br></pre></td></tr></table></figure><h2 id="virtual-python-env"><a href="#virtual-python-env" class="headerlink" title="virtual python env"></a>virtual python env</h2><blockquote><p><a href="https://www.readwithu.com/Article/advanced/Mac%E4%B8%AD%E4%BD%BF%E7%94%A8virtualenv%E5%92%8Cvirtualenvwrapper.html">创建 virtual python env</a></p><p><a href="https://segmentfault.com/a/1190000014935970">python环境神器virtualenvwrapper安装与使用</a></p></blockquote><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><h3 id="模块下载地址"><a href="#模块下载地址" class="headerlink" title="模块下载地址"></a>模块下载地址</h3><ul><li><strong>[<a href="https://rawgit.com/CESNET/libnetconf/master/doc/doxygen/html/index.html"> Libnetconf文档网站 ]</a></strong></li><li><strong>[<a href="https://github.com/CESNET/Netopeer"> Netopeer项目 ]</a></strong></li><li><strong>[<a href="https://github.com/CESNET/libnetconf"> Libnetconf项目 ]</a></strong></li><li><strong>[<a href="https://github.com/mbj4668/pyang"> Pyang项目 ]</a></strong></li><li><strong>[<a href="https://git.libssh.org/projects/libssh.git"> Libssh项目 ]</a></strong></li></ul><h3 id="模块编译安装"><a href="#模块编译安装" class="headerlink" title="模块编译安装"></a>模块编译安装</h3><blockquote><p><a href="https://blog.csdn.net/rocson001/article/details/54575899">NETCONF协议netopeer软件安装与环境搭建</a></p><p><a href="http://www.seguesoft.com/index.php/how-to-set-up-netopeer-server-to-use-with-netconfc">Set up Netopeer Server to use with NETCONFc</a></p><p><a href="https://blog.csdn.net/baiqishijkh/article/details/74006878">NETCONF协议之netopeer软件安装</a></p></blockquote><h3 id="netconf学习资料"><a href="#netconf学习资料" class="headerlink" title="netconf学习资料"></a>netconf学习资料</h3><blockquote><p><a href="https://www.cnblogs.com/ssyfj/p/11651450.html">软件定义网络基础—NETCONF协议</a></p><p><a href="https://www.sdnlab.com/17786.html">Netconf配置及其RPC和Notification下发流程解析</a></p><p><a href="https://blog.csdn.net/CSND_PAN/article/details/79541868">NETCONF协议详解</a></p><p><a href="https://blog.csdn.net/haopeng123321/article/details/54934542">NETCONF模块设计介绍</a></p><p><a href="https://blog.csdn.net/mylifeyouwill/article/details/81539547">netopeer工具的使用</a></p><p><a href="https://blog.csdn.net/xinquanv1/article/details/88133803">【开源推介02-pyang】-你离yang模型只差一个pyang工具</a></p></blockquote><h3 id="netconf相关问题解决"><a href="#netconf相关问题解决" class="headerlink" title="netconf相关问题解决"></a>netconf相关问题解决</h3><blockquote><p><a href="https://github.com/CESNET/netopeer/issues/166">An error occurred after executing the ‘commit‘’ command</a></p><p><a href="https://github.com/CESNET/netopeer/issues/138">cannot execute lock&#x2F;unlock from netopeer-cli</a></p><p><a href="https://wiki.opendaylight.org/view/YANG_Tools:Yang1.1_Draft">YANG Tools:Yang1.1 Draft Yang Tools: Yang1.1 Draft</a></p><p><a href="https://github.com/CESNET/Netopeer2/issues/333">edit-config with delete&#x3D;”operation” not working</a></p></blockquote><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p><a href="https://tonydeng.github.io/rfc6241-zh/">关于RFC6241中文翻译</a></p><p><a href="https://www.bookstack.cn/read/rfc7950-zh/README.md">YANG 1.1 数据建模语言</a></p><p><a href="https://tonydeng.github.io/sdn-handbook/">网络基础</a></p><p><a href="https://tools.ietf.org/id/draft-ietf-netconf-netconf-event-notifications-05.html">NETCONF Support for Event Notifications</a></p><p><a href="https://tools.ietf.org/id/draft-ietf-netconf-subscribed-notifications-09.html">Custom Subscription to Event Streams</a></p><p><a href="https://wenku.baidu.com/view/6b812dbabe23482fb5da4c3f.html">YANG模型介绍及语法</a></p><p><a href="https://www.sdnlab.com/14932.html">SDN实战团分享（七）：YANG模型与OpenDaylight南北向接口</a></p><p><a href="http://rennesong.com/2019/07/13/yang-model-tuto/">深入浅出理解 YANG 模型</a></p><p><a href="https://www.cisco.com/c/zh_cn/support/docs/storage-networking/management/200933-YANG-NETCONF-Configuration-Validation.html">配置NETCONF&#x2F;YANG并且验证Cisco IOS XE 16.x平台的示例</a></p><p><a href="https://blog.csdn.net/csnd_pan/article/details/79542917">Yang解析</a></p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1000074862?section=j006">CloudEngine 7800&amp;6800&amp;5800 V100R003C00 配置指南-网络管理与监控配置</a></p><p><a href="https://support.huawei.com/enterprise/zh/doc/EDOC1100058323/d06526ed">NE20E-S2 V800R010C10SPC500 配置指南 - 系统管理 01</a></p><p><a href="https://kurisu.love/index.php/archives/155/">NETCONF 学习 – python</a></p></blockquote>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;Netconf-学习笔记&quot;&gt;&lt;a href=&quot;#Netconf-学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Netconf 学习笔记&quot;&gt;&lt;/a&gt;Netconf 学习笔记&lt;/h1&gt;&lt;h2 id=&quot;1-Netconf简介&quot;&gt;&lt;a href=&quot;#1-Netconf简介&quot; class=&quot;headerlink&quot; title=&quot;1. Netconf简介&quot;&gt;&lt;/a&gt;1. Netconf简介&lt;/h2&gt;&lt;p&gt;随着SDN的大热，一个诞生了十年之久的协议焕发了第二春，它就是NETCONF协议。如果你在两年前去搜索NETCONF协议，基本得到的信息都是“这个协议是一个网管协议，主要目的是弥补SNMP协议的不足，希望可以取代SNMP协议”。SNMP有哪些不足，而NETCONF是否真的能够弥补，这都不是重点，重点是NETCONF诞生至今SNMP依旧活的好好的。所以如果我们还是把NETCONF当做一个网管协议的话，估计它会在冷板凳上一直坐下去，而如果我们换一个角度去看待NETCONF协议，你会发现也许它是最适合SDN的一个协议。&lt;/p&gt;</summary>
    
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/categories/Netconf/"/>
    
    
    <category term="Netconf" scheme="http://miaopei.github.io/tags/Netconf/"/>
    
  </entry>
  
  <entry>
    <title>hexo 使用指南</title>
    <link href="http://miaopei.github.io/2017/03/28/Hexo/hexo-operating-guide/"/>
    <id>http://miaopei.github.io/2017/03/28/Hexo/hexo-operating-guide/</id>
    <published>2017-03-28T08:53:46.000Z</published>
    <updated>2024-06-11T05:07:56.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装、初始化和配置"><a href="#1-安装、初始化和配置" class="headerlink" title="1. 安装、初始化和配置"></a>1. 安装、初始化和配置</h2><h3 id="1-1-准备工作"><a href="#1-1-准备工作" class="headerlink" title="1.1 准备工作"></a>1.1 准备工作</h3><ul><li>git</li><li>node.js</li><li>github</li></ul><span id="more"></span><h3 id="1-2-安装和初始化"><a href="#1-2-安装和初始化" class="headerlink" title="1.2 安装和初始化"></a>1.2 安装和初始化</h3><p>首先确定已经安装好了 <code>nodejs</code> 和 <code>npm</code> 以及 <code>git</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo -g</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo init blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> blog</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo server</span></span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000/">http://localhost:4000</a>，会看到生成好的博客。</p><h3 id="1-3-主目录结构"><a href="#1-3-主目录结构" class="headerlink" title="1.3 主目录结构"></a>1.3 主目录结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">|-- _config.yml</span><br><span class="line">|-- package.json</span><br><span class="line">|-- scaffolds</span><br><span class="line">|-- source</span><br><span class="line">   |-- _posts</span><br><span class="line">|-- themes</span><br><span class="line">|-- .gitignore</span><br><span class="line">|-- package.json</span><br></pre></td></tr></table></figure><p><strong>_config.yml</strong></p><p>全局配置文件，网站的很多信息都在这里配置，诸如网站名称，副标题，描述，作者，语言，主题，部署等等参数。这个文件下面会做较为详细的介绍。</p><p><strong>package.json</strong></p><p>hexo框架的参数和所依赖插件，如下：  </p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hexo-site&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;hexo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-archive&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-category&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-index&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-generator-tag&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-ejs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-stylus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-renderer-marked&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.10&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hexo-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.2.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>scaffold</strong></p><p>scaffolds是“脚手架、骨架”的意思，当你新建一篇文章（hexo new ‘title’）的时候，hexo是根据这个目录下的文件进行构建的。基本不用关心。</p><p><strong>_config.yml文件</strong></p><p>_config.yml 采用YAML语法格式，<a href="http://my.oschina.net/u/1861837/blog/526142?p=%7B%7BtotalPage%7D%7D">具体语法自行学习</a> 。<br>具体配置可以参考<a href="https://hexo.io/zh-cn/docs/configuration.html">官方文档</a>，_config.yml 文件中的内容，并对主要参数做简单的介绍</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">Hexo</span>   <span class="comment">#网站标题</span></span><br><span class="line"><span class="attr">subtitle:</span>     <span class="comment">#网站副标题</span></span><br><span class="line"><span class="attr">description:</span>  <span class="comment">#网站描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">John</span> <span class="string">Doe</span>  <span class="comment">#作者</span></span><br><span class="line"><span class="attr">language:</span>    <span class="comment">#语言</span></span><br><span class="line"><span class="attr">timezone:</span>    <span class="comment">#网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as &#x27;http://yoursite.com/child&#x27; and root as &#x27;/child/&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http://yoursite.com</span>   <span class="comment">#你的站点Url</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span>                    <span class="comment">#站点的根目录</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span>   <span class="comment">#文章的 永久链接 格式   </span></span><br><span class="line"><span class="attr">permalink_defaults:</span>    <span class="comment">#永久链接中各部分的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Directory   </span></span><br><span class="line"><span class="attr">source_dir:</span> <span class="string">source</span>         <span class="comment">#资源文件夹，这个文件夹用来存放内容</span></span><br><span class="line"><span class="attr">public_dir:</span> <span class="string">public</span>         <span class="comment">#公共文件夹，这个文件夹用于存放生成的站点文件。</span></span><br><span class="line"><span class="attr">tag_dir:</span> <span class="string">tags</span>              <span class="comment">#标签文件夹     </span></span><br><span class="line"><span class="attr">archive_dir:</span> <span class="string">archives</span>      <span class="comment">#归档文件夹</span></span><br><span class="line"><span class="attr">category_dir:</span> <span class="string">categories</span>   <span class="comment">#分类文件夹</span></span><br><span class="line"><span class="attr">code_dir:</span> <span class="string">downloads/code</span>   <span class="comment">#Include code 文件夹</span></span><br><span class="line"><span class="attr">i18n_dir:</span> <span class="string">:lang</span>            <span class="comment">#国际化（i18n）文件夹</span></span><br><span class="line"><span class="attr">skip_render:</span>               <span class="comment">#跳过指定文件的渲染，您可使用 glob 表达式来匹配路径。    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span>   <span class="comment">#新文章的文件名称</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span>       <span class="comment">#预设布局</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span>           <span class="comment">#把标题转换为 title case</span></span><br><span class="line"><span class="attr">external_link:</span> <span class="literal">true</span>        <span class="comment">#在新标签中打开链接</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span>           <span class="comment">#把文件名称转换为 (1) 小写或 (2) 大写</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span>       <span class="comment">#是否显示草稿</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span>   <span class="comment">#是否启动 Asset 文件夹</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span>       <span class="comment">#把链接改为与根目录的相对位址    </span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span>               <span class="comment">#显示未来的文章</span></span><br><span class="line"><span class="attr">highlight:</span>                 <span class="comment">#内容中代码块的设置    </span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span></span><br><span class="line"><span class="attr">category_map:</span>          <span class="comment">#分类别名</span></span><br><span class="line"><span class="attr">tag_map:</span>               <span class="comment">#标签别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span>         <span class="comment">#日期格式</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span>           <span class="comment">#时间格式    </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span>    <span class="comment">#分页数量</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">landscape</span>   <span class="comment">#主题名称</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="comment">#  部署部分的设置</span></span><br><span class="line"><span class="attr">deploy:</span>     </span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span>  <span class="comment">#类型，常用的git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/nanshanyi/nanshanyi.github.io.git</span> <span class="comment">#github仓库的地址</span></span><br></pre></td></tr></table></figure><h3 id="1-4-注意"><a href="#1-4-注意" class="headerlink" title="1.4 注意"></a>1.4 注意</h3><p><strong>如果页面中出现中文，应以UTF-8无BOM编码格式，所以不要用win自带的记事本，而是用notepad++这种支持编码转换的编辑器。</strong></p><p>由于google在天朝大陆被墙，进入 <code>themes\landscape\layout\_partial</code> ，打开 <code>head.ejs</code> ，删掉第31行 <code>fonts.googleapis.com</code> 的链接。</p><p>下载下来 <code>jQuery-2.0.3.min.js</code> ，放到 <code>themes\landscape\source\js</code> 文件夹中。之后进入 <code>themes\landscape\layout\_partial</code> ，打开 <code>after-footer.ejs</code> ，将第17行的路径替换为 <code>/js/jquery-2.0.3.min.js</code> 。</p><p>至此大功告成。</p><h2 id="2-写文章-草稿"><a href="#2-写文章-草稿" class="headerlink" title="2. 写文章&amp;草稿"></a>2. 写文章&amp;草稿</h2><h3 id="2-1-文章"><a href="#2-1-文章" class="headerlink" title="2.1 文章"></a>2.1 文章</h3><p>命令行输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new post <span class="string">&quot;new article&quot;</span></span><br></pre></td></tr></table></figure><p>之后在 <code>soource/_posts</code> 目录下面多了一个 <code>new-article.md</code> 的文件。</p><h3 id="2-2-文章属性"><a href="#2-2-文章属性" class="headerlink" title="2.2 文章属性"></a>2.2 文章属性</h3><table><thead><tr><th>Setting</th><th>Description</th><th>Default</th></tr></thead><tbody><tr><td>layout</td><td>Layout</td><td>post或page</td></tr><tr><td>title</td><td>文章的标题</td><td></td></tr><tr><td>date</td><td>穿件日期</td><td>文件的创建日期</td></tr><tr><td>updated</td><td>修改日期</td><td>文件的修改日期</td></tr><tr><td>comments</td><td>是否开启评论</td><td>true</td></tr><tr><td>tags</td><td>标签</td><td></td></tr><tr><td>categories</td><td>分类</td><td></td></tr><tr><td>permalink</td><td>url中的名字</td><td>文件名</td></tr><tr><td>toc</td><td>是否开启目录</td><td>true</td></tr><tr><td>reward</td><td>是否开启打赏</td><td>true</td></tr></tbody></table><h3 id="2-3-分类和标签"><a href="#2-3-分类和标签" class="headerlink" title="2.3 分类和标签"></a>2.3 分类和标签</h3><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">  - 日记</span><br><span class="line">tags:</span><br><span class="line">  - Hexo</span><br><span class="line">  - node.js</span><br></pre></td></tr></table></figure><h3 id="2-4-摘要"><a href="#2-4-摘要" class="headerlink" title="2.4 摘要"></a>2.4 摘要</h3><p><code>&lt;!--more--&gt;</code> 之上的内容为摘要。</p><h3 id="2-5-草稿"><a href="#2-5-草稿" class="headerlink" title="2.5 草稿"></a>2.5 草稿</h3><p>草稿相当于很多博客都有的“私密文章”功能。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;new draft&quot;</span></span><br></pre></td></tr></table></figure><p>会在 <code>source/_drafts</code> 目录下生成一个 <code>new-draft.md</code> 文件。但是这个文件不被显示在页面上，链接也访问不到。也就是说如果你想把某一篇文章移除显示，又不舍得删除，可以把它移动到 <code>_drafts</code> 目录之中。</p><p>如果你希望强行预览草稿，更改配置文件：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">render_drafts: true</span><br></pre></td></tr></table></figure><p>或者，如下方式启动server：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server --drafts</span><br></pre></td></tr></table></figure><p>下面这条命令可以把草稿变成文章，或者页面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">$ hexo publish drafts hexo-使用指南</span><br></pre></td></tr></table></figure><h2 id="3-Blog中出入图片和音乐"><a href="#3-Blog中出入图片和音乐" class="headerlink" title="3. Blog中出入图片和音乐"></a>3. Blog中出入图片和音乐</h2><p>文章推介：<a href="http://www.jianshu.com/p/53e0d2a617da">Hexo 博客中插入音乐&#x2F;视频</a></p><p>​   <a href="http://blog.shiqichan.com/use-qiniu-store-image-for-hexo/">使用七牛为Hexo存储图片</a></p><pre><code>             [hexo主题中添加相册功能](http://www.cnblogs.com/xljzlw/p/5137622.html)</code></pre><p>​   <a href="http://wuchong.me/blog/2014/12/13/hexo-theme-creating-image-styles/?utm_source=tuicool&utm_medium=referral#">为 Hexo 主题添加多种图片样式(主题不错考虑移植)</a></p><p>​   <a href="https://yq.aliyun.com/articles/8607">Hexo折腾记——基本配置篇</a></p><p>​   <a href="http://www.cnblogs.com/jarson-7426/p/5515870.html">hexo博客进阶－相册和独立域名</a></p><p>插入图片基本分为两种办法** ：</p><p>（1） 放在本地文件</p><p>首先在根目录下确认 <code>_config.yml</code> 中有 <code>post_asset_folder:true</code> 。<br>在 hexo 目录，执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>之后再使用 <code>hexo new &#39;new&#39; </code>创建新博客的时候，会在 <code>source/_posts</code> 里面创建 <code>.md</code> 文件的同时生成一个相同的名字的文件夹。把该文章中需要使用的图片放在该文件夹下即可。<br>使用的时候</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">![<span class="string">“图片描述”（可以不写）</span>](<span class="link">/文件夹名/你的图片名字.JPG</span>)</span><br><span class="line">例如：</span><br><span class="line">！[ ] (new/text.jpg)</span><br></pre></td></tr></table></figure><p>（2）放在<a href="https://portal.qiniu.com/signup?code=3lglas6pgi2qa">七牛</a>上，需要先注册，上传图片生成链接，直接在文章中使用链接即可。</p><p><strong>插入音乐</strong> ：</p><p>可以使用网易云音乐，搜索想要的歌曲，点击歌曲名字进入播放器页面，点击生成外链播放器；复制代码，直接粘贴到博文中即可。这样会显示一个网易的播放器，可以把</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">border</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginwidth</span>=<span class="string">&quot;0&quot;</span> <span class="attr">marginheight</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">298</span> <span class="attr">height</span>=<span class="string">52</span> <span class="attr">src</span>=<span class="string">&quot;http://music.163.com/outchain/player?type=2&amp;id=32192436&amp;auto=1&amp;height=32&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">//其中的width=298 height=52 均改为0就看不到了，依然可以播放音乐</span><br></pre></td></tr></table></figure><img data-src="/2017/03/28/Hexo/hexo-operating-guide/Y60twn8.png" class=""><img data-src="/2017/03/28/Hexo/hexo-operating-guide/i42cvBI.png" class=""><h2 id="4-代码高亮highlight-js支持"><a href="#4-代码高亮highlight-js支持" class="headerlink" title="4. 代码高亮highlight.js支持"></a>4. 代码高亮highlight.js支持</h2><p><a href="https://highlightjs.org/">highlightjs官网</a></p><p><a href="https://highlightjs.org/static/demo/">highlightjs主题风格</a></p><h2 id="5-其他"><a href="#5-其他" class="headerlink" title="5. 其他"></a>5. 其他</h2><p><a href="http://www.yehbeats.com/2015/04/08/hexo-search/">Hexo，Yilia主题添加站内搜索功能</a></p><p><a href="http://kuangqi.me/tricks/enable-table-of-contents-on-hexo/">为Hexo博客添加目录</a></p><p><a href="http://www.ituring.com.cn/article/199624">Hexo站点中添加文章目录以及归档</a></p><p><a href="http://crescentmoon.info/2014/12/11/popular-widget/">使用LeanCloud平台为Hexo博客添加文章浏览量统计组件</a></p><p><a href="http://www.tuicool.com/articles/ABFn2qU">使用hexo搭建静态博客</a></p><p><a href="http://www.ituring.com.cn/article/199035?utm_source=tuicool&utm_medium=referral">Hexo Docs中文 ： （二）基本用法</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-安装、初始化和配置&quot;&gt;&lt;a href=&quot;#1-安装、初始化和配置&quot; class=&quot;headerlink&quot; title=&quot;1. 安装、初始化和配置&quot;&gt;&lt;/a&gt;1. 安装、初始化和配置&lt;/h2&gt;&lt;h3 id=&quot;1-1-准备工作&quot;&gt;&lt;a href=&quot;#1-1-准备工作&quot; class=&quot;headerlink&quot; title=&quot;1.1 准备工作&quot;&gt;&lt;/a&gt;1.1 准备工作&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;li&gt;node.js&lt;/li&gt;
&lt;li&gt;github&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://miaopei.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://miaopei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + Github 博客多终端同步</title>
    <link href="http://miaopei.github.io/2017/03/20/Hexo/Hexo-Github-Sync/"/>
    <id>http://miaopei.github.io/2017/03/20/Hexo/Hexo-Github-Sync/</id>
    <published>2017-03-19T20:20:57.000Z</published>
    <updated>2024-06-11T02:32:37.979Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://blog.csdn.net/Monkey_LZL/article/details/60870891">原文链接</a></p><p>主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。下面是详细的步骤讲解：</p><span id="more"></span><h2 id="1-准备条件"><a href="#1-准备条件" class="headerlink" title="1. 准备条件"></a>1. 准备条件</h2><p>安装了Node.js,Git,Hexo环境<br>完成Github与本地Hexo的对接<br>这部分大家可以参考<a href="https://xuanwo.org/2015/03/26/hexo-intor/">史上最详细的Hexo博客搭建图文教程</a></p><p>配置好这些，就可以捋起袖子大干一场了！</p><h2 id="2-在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname-github-io的hexo分支上"><a href="#2-在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname-github-io的hexo分支上" class="headerlink" title="2. 在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上"></a>2. 在其中一个中单操作，push本地文件夹Hexo中的必要文件到yourname.github.io的hexo分支上</h2><p>在利用Github+Hexo搭建自己的博客时，新建了一个Hexo的文件夹，并进行相关的配置，这部分主要是将这些配置的文件托管到Github项目的分支上，其中只托管部分用于多终端的同步的文件，如完成的效果图所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化本地仓库</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git init</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将必要的文件依次添加，有些文件夹如npm install产生的node_modules由于路径过长不好处理，所以这里没有用`git add .`命令了，而是依次添加必要文件</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;Blog Source Hexo&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建hexo分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到hexo分支上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地与Github项目对接</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push到Github项目的hexo分支上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin hexo</span></span><br></pre></td></tr></table></figure><p>这样你的github项目中就会多出一个Hexo分支，这个就是用于多终端同步关键的部分。</p><h2 id="3-另一终端完成clone和push更新"><a href="#3-另一终端完成clone和push更新" class="headerlink" title="3. 另一终端完成clone和push更新"></a>3. 另一终端完成clone和push更新</h2><p>此时在另一终端更新博客，只需要将Github的hexo分支clone下来，进行初次的相关配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将Github中hexo分支<span class="built_in">clone</span>到本地</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> -b hexo https://github.com/yourname/yourname.github.io.git</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到刚刚<span class="built_in">clone</span>的文件夹内</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> yourname.github.io</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">cheackout 远程代码到本地hexo分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout -b hexo origin/hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意，这里一定要切换到刚刚<span class="built_in">clone</span>的文件夹内执行，安装必要的所需组件，不用再init</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个.md文件，并编辑完成自己的博客内容</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new post <span class="string">&quot;new blog name&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">经测试每次只要更新sorcerer中的文件到Github中即可，因为只是新建了一篇新博客</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;XX&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">push更新完分支之后将自己写的博客对接到自己搭的博客网站上，同时同步了Github中的master</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d -g</span></span><br></pre></td></tr></table></figure><h2 id="4-不同终端间愉快地玩耍"><a href="#4-不同终端间愉快地玩耍" class="headerlink" title="4. 不同终端间愉快地玩耍"></a>4. 不同终端间愉快地玩耍</h2><p>在不同的终端已经做完配置，就可以愉快的分享自己更新的博客<br>进入自己相应的文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">先pull完成本地与远端的融合</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull origin hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new post <span class="string">&quot; new blog name&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add <span class="built_in">source</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;XX&quot;</span></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push origin hexo</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo d -g</span></span><br></pre></td></tr></table></figure><h2 id="5-创建新文章"><a href="#5-创建新文章" class="headerlink" title="5. 创建新文章"></a>5. 创建新文章</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page --path <span class="built_in">test</span>/timages <span class="string">&quot;test_images&quot;</span></span></span><br><span class="line">INFO  Validating config</span><br><span class="line">INFO  Created: ~/PATH/source/test/timages.md</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> <span class="built_in">source</span>/test/timages.md</span></span><br><span class="line">---</span><br><span class="line">title: test_images</span><br><span class="line">date: 2024-06-11 09:36:41</span><br><span class="line">---</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;http://blog.csdn.net/Monkey_LZL/article/details/60870891&quot;&gt;原文链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;主体的思路是将博文内容相关文件放在Github项目中master中，将Hexo配置写博客用的相关文件放在Github项目的hexo分支上，这个是关键，多终端的同步只需要对分支hexo进行操作。下面是详细的步骤讲解：&lt;/p&gt;</summary>
    
    
    
    <category term="hexo" scheme="http://miaopei.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://miaopei.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hexo的Next主题个性化设置</title>
    <link href="http://miaopei.github.io/2016/12/23/Hexo/Hexo-Next-Configuration/"/>
    <id>http://miaopei.github.io/2016/12/23/Hexo/Hexo-Next-Configuration/</id>
    <published>2016-12-23T02:14:50.000Z</published>
    <updated>2024-05-29T01:43:23.522Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://github.com/HarleyWang93/blog/issues/1">Hexo + GitHub (Coding) Pages 搭建博客</a></p><p><a href="http://blog.shenyuanluo.com/HexoConfig1.html">Hexo的Next主题个性化设置（一）——基础设置</a></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/HarleyWang93/blog/issues/1&quot;&gt;Hexo + GitHub (Coding) Pages 搭建博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.sh</summary>
      
    
    
    
    <category term="hexo" scheme="http://miaopei.github.io/categories/hexo/"/>
    
    
    <category term="hexo" scheme="http://miaopei.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
